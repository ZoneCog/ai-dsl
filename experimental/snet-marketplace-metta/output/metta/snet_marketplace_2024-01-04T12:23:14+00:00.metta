;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; File generated by gen-snet-marketplace-metta.sh                      ;;
;;                                                                      ;;
;; Contains:                                                            ;;
;;                                                                      ;;
;; 1. Description of all or part of the organization on the marketplace.;;
;; 2. Description of all or part of the AI services on the marketplace. ;;
;; 3. Protobuf specifications of AI services in MeTTa format.           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; Type Definitions ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define List type and constructor
(: List (-> $a Type))
(: Nil (List $a))
(: Cons (-> $a (List $a) (List $a)))

;; Define List functions

;; Return the head of a list
(: head (-> (List $a) $a))
(= (head (Cons $head $tail)) $head)

;; Return the tail of a list
(: tail (-> (List $a) $a))
(= (tail (Cons $head $tail)) $tail)

;; Return True iff the given list is empty
(: empty (-> (List $a) Bool))
(= (empty Nil) True)
(= (empty (Cons $head $tail)) False)

;; Return the length of a list
(: length (-> (List $a) Number))
(= (length Nil) 0)
(= (length (Const $head $tail)) (+ 1 (length $tail)))

;; Return the element of a list at a given index
(: indexElem (-> (List $a) Number $a))
(= (indexElem (Cons $head $tail) )
   (if (< 0 ) (indexElem $tail (- $k 1)) $head))

;; Define OrganizationID type
(: OrganizationID Type)

;; Define access function from organization ID to organization data
;; structure (see Organization defined further below)
(: organization (-> OrganizationID Organization))

;; Define Organization type
(: Organization Type)

;; Define Organization constructor
(: MkOrganization
   (->
       String ; org_name
       String ; org_id
       String ; org_type
       Description ; description
       (List Assets) ; assets
       (List Contact) ; contacts
       (List Group) ; groups
       Organization))

;; Define Organization access functions
(: Organization.org_name (-> Organization String))
(= (Organization.org_name
      (MkOrganization
        $org_name
        $org_id
        $org_type
        $description
        $assets
        $contacts
        $groups
       )
   )
   $org_name)
(: Organization.org_id (-> Organization String))
(= (Organization.org_id
      (MkOrganization
        $org_name
        $org_id
        $org_type
        $description
        $assets
        $contacts
        $groups
       )
   )
   $org_id)
(: Organization.org_type (-> Organization String))
(= (Organization.org_type
      (MkOrganization
        $org_name
        $org_id
        $org_type
        $description
        $assets
        $contacts
        $groups
       )
   )
   $org_type)
(: Organization.description (-> Organization Description))
(= (Organization.description
      (MkOrganization
        $org_name
        $org_id
        $org_type
        $description
        $assets
        $contacts
        $groups
       )
   )
   $description)
(: Organization.assets (-> Organization (List Assets)))
(= (Organization.assets
      (MkOrganization
        $org_name
        $org_id
        $org_type
        $description
        $assets
        $contacts
        $groups
       )
   )
   $assets)
(: Organization.contacts (-> Organization (List Contact)))
(= (Organization.contacts
      (MkOrganization
        $org_name
        $org_id
        $org_type
        $description
        $assets
        $contacts
        $groups
       )
   )
   $contacts)
(: Organization.groups (-> Organization (List Group)))
(= (Organization.groups
      (MkOrganization
        $org_name
        $org_id
        $org_type
        $description
        $assets
        $contacts
        $groups
       )
   )
   $groups)

;; Define Description type
(: Description Type)

;; Define Description constructor
(: MkDescription
   (->
       String ; url
       String ; url_content
       String ; description
       String ; short_description
       Description))

;; Define Description access functions
(: Description.url (-> Description String))
(= (Description.url
      (MkDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $url)
(: Description.url_content (-> Description String))
(= (Description.url_content
      (MkDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $url_content)
(: Description.description (-> Description String))
(= (Description.description
      (MkDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $description)
(: Description.short_description (-> Description String))
(= (Description.short_description
      (MkDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $short_description)

;; Define ServiceID type.  A service ID must be associated to an
;; organization ID.
(: ServiceID (-> OrganizationID Type))

;; Define access function from service ID to service data structure
;; (see Service defined further below).
(: service (-> (ServiceID $org) Service))

;; Define Pricing type
(: Pricing Type)

;; Define Pricing constructor
(: MkPricing
   (->
       String ; price_model
       Number ; price_in_cogs
       Bool ; default
       Pricing))

;; Define Pricing access functions
(: Pricing.price_model (-> Pricing String))
(= (Pricing.price_model
      (MkPricing
        $price_model
        $price_in_cogs
        $default
       )
   )
   $price_model)
(: Pricing.price_in_cogs (-> Pricing Number))
(= (Pricing.price_in_cogs
      (MkPricing
        $price_model
        $price_in_cogs
        $default
       )
   )
   $price_in_cogs)
(: Pricing.default (-> Pricing Bool))
(= (Pricing.default
      (MkPricing
        $price_model
        $price_in_cogs
        $default
       )
   )
   $default)

;; Define Group type
(: Group Type)

;; Define Group constructor
(: MkGroup
   (->
       String ; group_name
       Pricing ; pricing
       (List String) ; endpoints
       String ; group_id
       Number ; free_calls
       String ; free_call_signer_address
       (List String) ; daemon_addresses
       Group))

;; Define Group access functions
(: Group.group_name (-> Group String))
(= (Group.group_name
      (MkGroup
        $group_name
        $pricing
        $endpoints
        $group_id
        $free_calls
        $free_call_signer_address
        $daemon_addresses
       )
   )
   $group_name)
(: Group.pricing (-> Group Pricing))
(= (Group.pricing
      (MkGroup
        $group_name
        $pricing
        $endpoints
        $group_id
        $free_calls
        $free_call_signer_address
        $daemon_addresses
       )
   )
   $pricing)
(: Group.endpoints (-> Group (List String)))
(= (Group.endpoints
      (MkGroup
        $group_name
        $pricing
        $endpoints
        $group_id
        $free_calls
        $free_call_signer_address
        $daemon_addresses
       )
   )
   $endpoints)
(: Group.group_id (-> Group String))
(= (Group.group_id
      (MkGroup
        $group_name
        $pricing
        $endpoints
        $group_id
        $free_calls
        $free_call_signer_address
        $daemon_addresses
       )
   )
   $group_id)
(: Group.free_calls (-> Group Number))
(= (Group.free_calls
      (MkGroup
        $group_name
        $pricing
        $endpoints
        $group_id
        $free_calls
        $free_call_signer_address
        $daemon_addresses
       )
   )
   $free_calls)
(: Group.free_call_signer_address (-> Group String))
(= (Group.free_call_signer_address
      (MkGroup
        $group_name
        $pricing
        $endpoints
        $group_id
        $free_calls
        $free_call_signer_address
        $daemon_addresses
       )
   )
   $free_call_signer_address)
(: Group.daemon_addresses (-> Group (List String)))
(= (Group.daemon_addresses
      (MkGroup
        $group_name
        $pricing
        $endpoints
        $group_id
        $free_calls
        $free_call_signer_address
        $daemon_addresses
       )
   )
   $daemon_addresses)

;; Define ServiceDescription type
(: ServiceDescription Type)

;; Define ServiceDescription constructor
(: MkServiceDescription
   (->
       String ; url
       String ; url_content
       String ; description
       String ; short_description
       ServiceDescription))

;; Define ServiceDescription access functions
(: ServiceDescription.url (-> ServiceDescription String))
(= (ServiceDescription.url
      (MkServiceDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $url)
(: ServiceDescription.url_content (-> ServiceDescription String))
(= (ServiceDescription.url_content
      (MkServiceDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $url_content)
(: ServiceDescription.description (-> ServiceDescription String))
(= (ServiceDescription.description
      (MkServiceDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $description)
(: ServiceDescription.short_description (-> ServiceDescription String))
(= (ServiceDescription.short_description
      (MkServiceDescription
        $url
        $url_content
        $description
        $short_description
       )
   )
   $short_description)

;; Define Contributor type
(: Contributor Type)

;; Define Contributor constructor
(: MkContributor
   (->
       String ; name
       String ; email_id
       Contributor))

;; Define Contributor access functions
(: Contributor.name (-> Contributor String))
(= (Contributor.name
      (MkContributor
        $name
        $email_id
       )
   )
   $name)
(: Contributor.email_id (-> Contributor String))
(= (Contributor.email_id
      (MkContributor
        $name
        $email_id
       )
   )
   $email_id)

;; Define Medium type
(: Medium Type)

;; Define Medium constructor
(: MkMedium
   (->
       Number ; order
       String ; url
       String ; file_type
       Medium))

;; Define Medium access functions
(: Medium.order (-> Medium Number))
(= (Medium.order
      (MkMedium
        $order
        $url
        $file_type
       )
   )
   $order)
(: Medium.url (-> Medium String))
(= (Medium.url
      (MkMedium
        $order
        $url
        $file_type
       )
   )
   $url)
(: Medium.file_type (-> Medium String))
(= (Medium.file_type
      (MkMedium
        $order
        $url
        $file_type
       )
   )
   $file_type)

;; Define Service type
(: Service Type)

;; Define Service constructor
(: MkService
   (->
       Number ; version
       String ; display_name
       String ; encoding
       String ; service_type
       String ; model_ipfs_hash
       String ; mpe_address
       (List Group) ; groups
       ServiceDescription ; service_description
       (List Contributor) ; contributors
       (List Medium) ; media
       (List String) ; tags
       Service))

;; Define Service access functions
(: Service.version (-> Service Number))
(= (Service.version
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $version)
(: Service.display_name (-> Service String))
(= (Service.display_name
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $display_name)
(: Service.encoding (-> Service String))
(= (Service.encoding
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $encoding)
(: Service.service_type (-> Service String))
(= (Service.service_type
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $service_type)
(: Service.model_ipfs_hash (-> Service String))
(= (Service.model_ipfs_hash
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $model_ipfs_hash)
(: Service.mpe_address (-> Service String))
(= (Service.mpe_address
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $mpe_address)
(: Service.groups (-> Service (List Group)))
(= (Service.groups
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $groups)
(: Service.service_description (-> Service ServiceDescription))
(= (Service.service_description
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $service_description)
(: Service.contributors (-> Service (List Contributor)))
(= (Service.contributors
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $contributors)
(: Service.media (-> Service (List Medium)))
(= (Service.media
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $media)
(: Service.tags (-> Service (List String)))
(= (Service.tags
      (MkService
        $version
        $display_name
        $encoding
        $service_type
        $model_ipfs_hash
        $mpe_address
        $groups
        $service_description
        $contributors
        $media
        $tags
       )
   )
   $tags)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SingularityNET MarketPlace Data ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; OrganizationID definition of snet
(: snet OrganizationID)

;; Organization metadata of snet
(= (organization snet)
   ; Organization
   (MkOrganization
       ; org_name
       "snet"
       ; org_id
       "snet"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://singularitynet.io"
           ; url content
           null
           ; description
           "We gathered leading minds in machine learning and blockchain to democratize access to AI technology.Now anyone can take advantage of a global network of AI algorithms, services, and agents. The world's first decentralized AI network has arrived"
           ; short_description
           "SingularityNET lets anyone create, share, and monetize AI services at scale.")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of snet


;; ServiceID definition of snet.cntk-image-recon"
(: snet.cntk-image-recon (ServiceID snet))

;; Service metadata of snet.cntk-image-recon
(= (service snet.cntk-image-recon)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "AI Sight"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmWEuXDXBfRMedvzbzC52iYYuv4Bgp6w2PTbwcYyKWg1XU"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/cntk-image-recon.html"
           ; url content
           null
           ; description
           "<div>Images of flowers and dogs can be classified using deep neural network models, generated using Microsoft's Cognitive Toolkit. The service receives an image, and then uses it as an input for a pretrained ResNet152 model.<br></br>There are two pre-trained models available, one trained with a flowers dataset from the Oxford Visual Geometry Group, that includes 102 different categories of flowers common to the UK. The second model was trained using the Columbia Dogs Dataset, which possesses 133 different dog breeds.<br></br>The service makes predictions using computer vision and machine learning techniques, and displays a top 5 prediction list (ordered by confidence) based on the specified dataset (flowers or dogs).</div>"
           ; short_description
           "Use neural network models generated by Microsoft's Cognitive Toolkit to classify images of flowers and dogs. Simply upload an image and the service will identify and apply a label.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "image" (Cons "cntk" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: image_recon.proto
;; Protobuf syntax: proto3
;; Prefix: snet.cntk-image-recon
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.cntk-image-recon.Input type
(: snet.cntk-image-recon.Input Type)

;; Define snet.cntk-image-recon.Input constuctor
(: snet.cntk-image-recon.MkInput
   (->
    String ; model
    String ; img_path
    snet.cntk-image-recon.Input))

;; Define snet.cntk-image-recon.Input access functions

;; Define snet.cntk-image-recon.Input.model
(: snet.cntk-image-recon.Input.model (-> snet.cntk-image-recon.Input String))
(= (snet.cntk-image-recon.Input.model
    (snet.cntk-image-recon.MkInput
     $model
     $img_path)) $model)

;; Define snet.cntk-image-recon.Input.img_path
(: snet.cntk-image-recon.Input.img_path (-> snet.cntk-image-recon.Input String))
(= (snet.cntk-image-recon.Input.img_path
    (snet.cntk-image-recon.MkInput
     $model
     $img_path)) $img_path)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.cntk-image-recon.Output type
(: snet.cntk-image-recon.Output Type)

;; Define snet.cntk-image-recon.Output constuctor
(: snet.cntk-image-recon.MkOutput
   (->
    String ; delta_time
    String ; top_5
    snet.cntk-image-recon.Output))

;; Define snet.cntk-image-recon.Output access functions

;; Define snet.cntk-image-recon.Output.delta_time
(: snet.cntk-image-recon.Output.delta_time (-> snet.cntk-image-recon.Output String))
(= (snet.cntk-image-recon.Output.delta_time
    (snet.cntk-image-recon.MkOutput
     $delta_time
     $top_5)) $delta_time)

;; Define snet.cntk-image-recon.Output.top_5
(: snet.cntk-image-recon.Output.top_5 (-> snet.cntk-image-recon.Output String))
(= (snet.cntk-image-recon.Output.top_5
    (snet.cntk-image-recon.MkOutput
     $delta_time
     $top_5)) $top_5)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Recognizer ;;
;;;;;;;;;;;;;;;;

;; Define snet.cntk-image-recon.flowers service method
(: snet.cntk-image-recon.flowers (-> snet.cntk-image-recon.Input snet.cntk-image-recon.Output))

;; Define snet.cntk-image-recon.dogs service method
(: snet.cntk-image-recon.dogs (-> snet.cntk-image-recon.Input snet.cntk-image-recon.Output))



;; ServiceID definition of snet.test_sergey"
(: snet.test_sergey (ServiceID snet))

;; Service metadata of snet.test_sergey
(= (service snet.test_sergey)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "test_sergey"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmXbY5p15TAb21DiEUKvarugjUQQoMMzw1jozd7GUTcooq"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://dev.singularitynet.io/docs/ai-developers/"
           ; url content
           null
           ; description
           "test_sergey"
           ; short_description
           "test_sergey")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "test_sergey" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: paraphrase.proto
;; Protobuf syntax: proto3
;; Protobuf package: paraphrase
;; Prefix: snet.test_sergey
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define snet.test_sergey.Query type
(: snet.test_sergey.Query Type)

;; Define snet.test_sergey.Query constuctor
(: snet.test_sergey.MkQuery
   (->
    String ; sentence
    snet.test_sergey.Query))

;; Define snet.test_sergey.Query access functions

;; Define snet.test_sergey.Query.sentence
(: snet.test_sergey.Query.sentence (-> snet.test_sergey.Query String))
(= (snet.test_sergey.Query.sentence
    (snet.test_sergey.MkQuery
     $sentence)) $sentence)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define snet.test_sergey.Answer type
(: snet.test_sergey.Answer Type)

;; Define snet.test_sergey.Answer constuctor
(: snet.test_sergey.MkAnswer
   (->
    String ; answer
    snet.test_sergey.Answer))

;; Define snet.test_sergey.Answer access functions

;; Define snet.test_sergey.Answer.answer
(: snet.test_sergey.Answer.answer (-> snet.test_sergey.Answer String))
(= (snet.test_sergey.Answer.answer
    (snet.test_sergey.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; paraphrase ;;
;;;;;;;;;;;;;;;;

;; Define snet.test_sergey.paraphrase service method
(: snet.test_sergey.paraphrase (-> snet.test_sergey.Query snet.test_sergey.Answer))



;; ServiceID definition of snet.topic-analysis"
(: snet.topic-analysis (ServiceID snet))

;; Service metadata of snet.topic-analysis
(= (service snet.topic-analysis)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Topic Analysis"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmaEBP6ReeDnqyZGDekStFGKei3neFTYehuYpurMeYHfSv"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/topic-analysis"
           ; url content
           null
           ; description
           "<div>Methods to identify recurrent themes or topics include latent semantic analysis (LSA), probabilistic latent semantic analysis (PLSA), latent Dirichlet allocation (LDA) and LDA2vec.</div>"
           ; short_description
           "Extrapolate further meaning from a provided text through identifying recurrent themes, or topics.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "lda" (Cons "plsa" (Cons "lsa" (Cons "modelling" (Cons "analysis" (Cons "topic" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: topic_analysis.proto
;; Protobuf syntax: proto3
;; Prefix: snet.topic-analysis
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; PLSARequest ;;
;;;;;;;;;;;;;;;;;

;; Define snet.topic-analysis.PLSARequest type
(: snet.topic-analysis.PLSARequest Type)

;; Define snet.topic-analysis.PLSARequest constuctor
(: snet.topic-analysis.MkPLSARequest
   (->
    String ; docs
    SInt64 ; num_topics
    SInt64 ; topic_divider
    SInt64 ; maxiter
    Double ; beta
    snet.topic-analysis.PLSARequest))

;; Define snet.topic-analysis.PLSARequest access functions

;; Define snet.topic-analysis.PLSARequest.docs
(: snet.topic-analysis.PLSARequest.docs (-> snet.topic-analysis.PLSARequest String))
(= (snet.topic-analysis.PLSARequest.docs
    (snet.topic-analysis.MkPLSARequest
     $docs
     $num_topics
     $topic_divider
     $maxiter
     $beta)) $docs)

;; Define snet.topic-analysis.PLSARequest.num_topics
(: snet.topic-analysis.PLSARequest.num_topics (-> snet.topic-analysis.PLSARequest SInt64))
(= (snet.topic-analysis.PLSARequest.num_topics
    (snet.topic-analysis.MkPLSARequest
     $docs
     $num_topics
     $topic_divider
     $maxiter
     $beta)) $num_topics)

;; Define snet.topic-analysis.PLSARequest.topic_divider
(: snet.topic-analysis.PLSARequest.topic_divider (-> snet.topic-analysis.PLSARequest SInt64))
(= (snet.topic-analysis.PLSARequest.topic_divider
    (snet.topic-analysis.MkPLSARequest
     $docs
     $num_topics
     $topic_divider
     $maxiter
     $beta)) $topic_divider)

;; Define snet.topic-analysis.PLSARequest.maxiter
(: snet.topic-analysis.PLSARequest.maxiter (-> snet.topic-analysis.PLSARequest SInt64))
(= (snet.topic-analysis.PLSARequest.maxiter
    (snet.topic-analysis.MkPLSARequest
     $docs
     $num_topics
     $topic_divider
     $maxiter
     $beta)) $maxiter)

;; Define snet.topic-analysis.PLSARequest.beta
(: snet.topic-analysis.PLSARequest.beta (-> snet.topic-analysis.PLSARequest Double))
(= (snet.topic-analysis.PLSARequest.beta
    (snet.topic-analysis.MkPLSARequest
     $docs
     $num_topics
     $topic_divider
     $maxiter
     $beta)) $beta)

;;;;;;;;;;;;;;
;; FloatRow ;;
;;;;;;;;;;;;;;

;; Define snet.topic-analysis.FloatRow type
(: snet.topic-analysis.FloatRow Type)

;; Define snet.topic-analysis.FloatRow constuctor
(: snet.topic-analysis.MkFloatRow
   (->
    Double ; doubleValue
    snet.topic-analysis.FloatRow))

;; Define snet.topic-analysis.FloatRow access functions

;; Define snet.topic-analysis.FloatRow.doubleValue
(: snet.topic-analysis.FloatRow.doubleValue (-> snet.topic-analysis.FloatRow Double))
(= (snet.topic-analysis.FloatRow.doubleValue
    (snet.topic-analysis.MkFloatRow
     $doubleValue)) $doubleValue)

;;;;;;;;;;;;;;;;;;
;; PLSAResponse ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.topic-analysis.PLSAResponse type
(: snet.topic-analysis.PLSAResponse Type)

;; Define snet.topic-analysis.PLSAResponse constuctor
(: snet.topic-analysis.MkPLSAResponse
   (->
    Bool ; status
    String ; message
    String ; handle
    snet.topic-analysis.PLSAResponse))

;; Define snet.topic-analysis.PLSAResponse access functions

;; Define snet.topic-analysis.PLSAResponse.status
(: snet.topic-analysis.PLSAResponse.status (-> snet.topic-analysis.PLSAResponse Bool))
(= (snet.topic-analysis.PLSAResponse.status
    (snet.topic-analysis.MkPLSAResponse
     $status
     $message
     $handle)) $status)

;; Define snet.topic-analysis.PLSAResponse.message
(: snet.topic-analysis.PLSAResponse.message (-> snet.topic-analysis.PLSAResponse String))
(= (snet.topic-analysis.PLSAResponse.message
    (snet.topic-analysis.MkPLSAResponse
     $status
     $message
     $handle)) $message)

;; Define snet.topic-analysis.PLSAResponse.handle
(: snet.topic-analysis.PLSAResponse.handle (-> snet.topic-analysis.PLSAResponse String))
(= (snet.topic-analysis.PLSAResponse.handle
    (snet.topic-analysis.MkPLSAResponse
     $status
     $message
     $handle)) $handle)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; TopicAnalysis ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.topic-analysis.PLSA service method
(: snet.topic-analysis.PLSA (-> snet.topic-analysis.PLSARequest snet.topic-analysis.PLSAResponse))



;; ServiceID definition of snet.tononi-phi"
(: snet.tononi-phi (ServiceID snet))

;; Service metadata of snet.tononi-phi
(= (service snet.tononi-phi)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Tononi's Phi Service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmWpeXwUk4CfJqx1roWXdPx9Rmgw3ieaZXksf8feKTono7"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/phi"
           ; url content
           null
           ; description
           "<div>Takes as input a time series of values (importance or excitation values for example) and returns a time series of estimated Tononi Phi values.</div>"
           ; short_description
           "Takes as input a time series of values (importance or excitation values for example) and returns a time series of estimated Tononi Phi values.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "consciousness" (Cons "phi" (Cons "tononi" (Cons "series" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: tononi_phi.proto
;; Protobuf syntax: proto3
;; Protobuf package: tononi_phi
;; Prefix: snet.tononi-phi
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.tononi-phi.Input type
(: snet.tononi-phi.Input Type)

;; Define snet.tononi-phi.Input constuctor
(: snet.tononi-phi.MkInput
   (->
    String ; input_url
    Int32 ; window_length
    Int32 ; timeout
    Int32 ; bins
    Int32 ; nodes
    Int32 ; columns_to_skip
    Int32 ; window_start
    Int32 ; max_nodes
    snet.tononi-phi.Input))

;; Define snet.tononi-phi.Input access functions

;; Define snet.tononi-phi.Input.input_url
(: snet.tononi-phi.Input.input_url (-> snet.tononi-phi.Input String))
(= (snet.tononi-phi.Input.input_url
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $input_url)

;; Define snet.tononi-phi.Input.window_length
(: snet.tononi-phi.Input.window_length (-> snet.tononi-phi.Input Int32))
(= (snet.tononi-phi.Input.window_length
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $window_length)

;; Define snet.tononi-phi.Input.timeout
(: snet.tononi-phi.Input.timeout (-> snet.tononi-phi.Input Int32))
(= (snet.tononi-phi.Input.timeout
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $timeout)

;; Define snet.tononi-phi.Input.bins
(: snet.tononi-phi.Input.bins (-> snet.tononi-phi.Input Int32))
(= (snet.tononi-phi.Input.bins
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $bins)

;; Define snet.tononi-phi.Input.nodes
(: snet.tononi-phi.Input.nodes (-> snet.tononi-phi.Input Int32))
(= (snet.tononi-phi.Input.nodes
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $nodes)

;; Define snet.tononi-phi.Input.columns_to_skip
(: snet.tononi-phi.Input.columns_to_skip (-> snet.tononi-phi.Input Int32))
(= (snet.tononi-phi.Input.columns_to_skip
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $columns_to_skip)

;; Define snet.tononi-phi.Input.window_start
(: snet.tononi-phi.Input.window_start (-> snet.tononi-phi.Input Int32))
(= (snet.tononi-phi.Input.window_start
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $window_start)

;; Define snet.tononi-phi.Input.max_nodes
(: snet.tononi-phi.Input.max_nodes (-> snet.tononi-phi.Input Int32))
(= (snet.tononi-phi.Input.max_nodes
    (snet.tononi-phi.MkInput
     $input_url
     $window_length
     $timeout
     $bins
     $nodes
     $columns_to_skip
     $window_start
     $max_nodes)) $max_nodes)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.tononi-phi.Output type
(: snet.tononi-phi.Output Type)

;; Define snet.tononi-phi.Output constuctor
(: snet.tononi-phi.MkOutput
   (->
    Float ; std
    Float ; mean
    Float ; values
    snet.tononi-phi.Output))

;; Define snet.tononi-phi.Output access functions

;; Define snet.tononi-phi.Output.std
(: snet.tononi-phi.Output.std (-> snet.tononi-phi.Output Float))
(= (snet.tononi-phi.Output.std
    (snet.tononi-phi.MkOutput
     $std
     $mean
     $values)) $std)

;; Define snet.tononi-phi.Output.mean
(: snet.tononi-phi.Output.mean (-> snet.tononi-phi.Output Float))
(= (snet.tononi-phi.Output.mean
    (snet.tononi-phi.MkOutput
     $std
     $mean
     $values)) $mean)

;; Define snet.tononi-phi.Output.values
(: snet.tononi-phi.Output.values (-> snet.tononi-phi.Output Float))
(= (snet.tononi-phi.Output.values
    (snet.tononi-phi.MkOutput
     $std
     $mean
     $values)) $values)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefinition ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.tononi-phi.tononi_phi service method
(: snet.tononi-phi.tononi_phi (-> snet.tononi-phi.Input snet.tononi-phi.Output))



;; ServiceID definition of snet.speech-recognition"
(: snet.speech-recognition (ServiceID snet))

;; Service metadata of snet.speech-recognition
(= (service snet.speech-recognition)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Speech Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeuZDT31EWoh3zEQHHcXMGtD2QeV61anz11vVupKEgT2k"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/speech-recognition-service"
           ; url content
           null
           ; description
           "<div>Provide a WAV file (up to 4Mb in size and no longer than 90 seconds in duration) of English speech and generate text from the provided WAV file. Also known as speech-to-text.</div>"
           ; short_description
           "Provide a WAV file (up to 4Mb in size and no longer than 90 seconds in duration) of English speech and generate text from the provided WAV file. Also known as speech-to-text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "speech" (Cons "asr" (Cons "speech2text" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: asr.proto
;; Protobuf syntax: proto3
;; Protobuf package: asr
;; Prefix: snet.speech-recognition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define snet.speech-recognition.Audio type
(: snet.speech-recognition.Audio Type)

;; Define snet.speech-recognition.Audio constuctor
(: snet.speech-recognition.MkAudio
   (->
    Bytes ; data
    snet.speech-recognition.Audio))

;; Define snet.speech-recognition.Audio access functions

;; Define snet.speech-recognition.Audio.data
(: snet.speech-recognition.Audio.data (-> snet.speech-recognition.Audio Bytes))
(= (snet.speech-recognition.Audio.data
    (snet.speech-recognition.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define snet.speech-recognition.Text type
(: snet.speech-recognition.Text Type)

;; Define snet.speech-recognition.Text constuctor
(: snet.speech-recognition.MkText
   (->
    String ; text
    snet.speech-recognition.Text))

;; Define snet.speech-recognition.Text access functions

;; Define snet.speech-recognition.Text.text
(: snet.speech-recognition.Text.text (-> snet.speech-recognition.Text String))
(= (snet.speech-recognition.Text.text
    (snet.speech-recognition.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; ASR ;;
;;;;;;;;;

;; Define snet.speech-recognition.s2t service method
(: snet.speech-recognition.s2t (-> snet.speech-recognition.Audio snet.speech-recognition.Text))



;; ServiceID definition of snet.speech-synthesis"
(: snet.speech-synthesis (ServiceID snet))

;; Service metadata of snet.speech-synthesis
(= (service snet.speech-synthesis)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Speech Synthesis"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmWyXTQhs2fEH6CjtuwXtvyhMCT1cQsExzSPd2FPHwNKfR"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/speech-synthesis-service"
           ; url content
           null
           ; description
           "<div>Provide a piece of English text (up to 140 characters) and generate an artificial human voice to playback the provided text. Also known as text-to-speech.</div>"
           ; short_description
           "Provide a piece of English text (up to 140 characters) and generate an artificial human voice to playback the provided text. Also known as text-to-speech.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "synthesis" (Cons "speech" (Cons "text2Speech" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: tts.proto
;; Protobuf syntax: proto3
;; Protobuf package: tts
;; Prefix: snet.speech-synthesis
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define snet.speech-synthesis.Audio type
(: snet.speech-synthesis.Audio Type)

;; Define snet.speech-synthesis.Audio constuctor
(: snet.speech-synthesis.MkAudio
   (->
    Bytes ; data
    snet.speech-synthesis.Audio))

;; Define snet.speech-synthesis.Audio access functions

;; Define snet.speech-synthesis.Audio.data
(: snet.speech-synthesis.Audio.data (-> snet.speech-synthesis.Audio Bytes))
(= (snet.speech-synthesis.Audio.data
    (snet.speech-synthesis.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define snet.speech-synthesis.Text type
(: snet.speech-synthesis.Text Type)

;; Define snet.speech-synthesis.Text constuctor
(: snet.speech-synthesis.MkText
   (->
    String ; text
    snet.speech-synthesis.Text))

;; Define snet.speech-synthesis.Text access functions

;; Define snet.speech-synthesis.Text.text
(: snet.speech-synthesis.Text.text (-> snet.speech-synthesis.Text String))
(= (snet.speech-synthesis.Text.text
    (snet.speech-synthesis.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; TTS ;;
;;;;;;;;;

;; Define snet.speech-synthesis.t2s service method
(: snet.speech-synthesis.t2s (-> snet.speech-synthesis.Text snet.speech-synthesis.Audio))



;; ServiceID definition of snet.causality-detection"
(: snet.causality-detection (ServiceID snet))

;; Service metadata of snet.causality-detection
(= (service snet.causality-detection)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Causality Detection"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmZ15v5m2JpN8VfB39Nz16qmwoZRCDwHLfkK7JtK9QnioP"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/causality-detection#readme"
           ; url content
           null
           ; description
           "<div>Inspect causality between multiple time series using multivariate Granger causality algorithm</div>"
           ; short_description
           "Inspect causality between multiple time series using multivariate Granger causality algorithm.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "causality" (Cons "granger" (Cons "multivariate" (Cons "time series" (Cons "causality" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: causality_detection.proto
;; Protobuf syntax: proto3
;; Prefix: snet.causality-detection
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CausalityDetectionRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.causality-detection.CausalityDetectionRequest type
(: snet.causality-detection.CausalityDetectionRequest Type)

;; Define snet.causality-detection.CausalityDetectionRequest constuctor
(: snet.causality-detection.MkCausalityDetectionRequest
   (->
    String ; data
    String ; start
    String ; end
    String ; input_features
    String ; output_feature
    Int32 ; lags
    String ; modelling_type
    Bool ; list_subcausalities
    snet.causality-detection.CausalityDetectionRequest))

;; Define snet.causality-detection.CausalityDetectionRequest access functions

;; Define snet.causality-detection.CausalityDetectionRequest.data
(: snet.causality-detection.CausalityDetectionRequest.data (-> snet.causality-detection.CausalityDetectionRequest String))
(= (snet.causality-detection.CausalityDetectionRequest.data
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $data)

;; Define snet.causality-detection.CausalityDetectionRequest.start
(: snet.causality-detection.CausalityDetectionRequest.start (-> snet.causality-detection.CausalityDetectionRequest String))
(= (snet.causality-detection.CausalityDetectionRequest.start
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $start)

;; Define snet.causality-detection.CausalityDetectionRequest.end
(: snet.causality-detection.CausalityDetectionRequest.end (-> snet.causality-detection.CausalityDetectionRequest String))
(= (snet.causality-detection.CausalityDetectionRequest.end
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $end)

;; Define snet.causality-detection.CausalityDetectionRequest.input_features
(: snet.causality-detection.CausalityDetectionRequest.input_features (-> snet.causality-detection.CausalityDetectionRequest String))
(= (snet.causality-detection.CausalityDetectionRequest.input_features
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $input_features)

;; Define snet.causality-detection.CausalityDetectionRequest.output_feature
(: snet.causality-detection.CausalityDetectionRequest.output_feature (-> snet.causality-detection.CausalityDetectionRequest String))
(= (snet.causality-detection.CausalityDetectionRequest.output_feature
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $output_feature)

;; Define snet.causality-detection.CausalityDetectionRequest.lags
(: snet.causality-detection.CausalityDetectionRequest.lags (-> snet.causality-detection.CausalityDetectionRequest Int32))
(= (snet.causality-detection.CausalityDetectionRequest.lags
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $lags)

;; Define snet.causality-detection.CausalityDetectionRequest.modelling_type
(: snet.causality-detection.CausalityDetectionRequest.modelling_type (-> snet.causality-detection.CausalityDetectionRequest String))
(= (snet.causality-detection.CausalityDetectionRequest.modelling_type
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $modelling_type)

;; Define snet.causality-detection.CausalityDetectionRequest.list_subcausalities
(: snet.causality-detection.CausalityDetectionRequest.list_subcausalities (-> snet.causality-detection.CausalityDetectionRequest Bool))
(= (snet.causality-detection.CausalityDetectionRequest.list_subcausalities
    (snet.causality-detection.MkCausalityDetectionRequest
     $data
     $start
     $end
     $input_features
     $output_feature
     $lags
     $modelling_type
     $list_subcausalities)) $list_subcausalities)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define snet.causality-detection.Result type
(: snet.causality-detection.Result Type)

;; Define snet.causality-detection.Result constuctor
(: snet.causality-detection.MkResult
   (->
    String ; response
    String ; message
    snet.causality-detection.Result))

;; Define snet.causality-detection.Result access functions

;; Define snet.causality-detection.Result.response
(: snet.causality-detection.Result.response (-> snet.causality-detection.Result String))
(= (snet.causality-detection.Result.response
    (snet.causality-detection.MkResult
     $response
     $message)) $response)

;; Define snet.causality-detection.Result.message
(: snet.causality-detection.Result.message (-> snet.causality-detection.Result String))
(= (snet.causality-detection.Result.message
    (snet.causality-detection.MkResult
     $response
     $message)) $message)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;
;; CausalityDetection ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.causality-detection.detect_causality service method
(: snet.causality-detection.detect_causality (-> snet.causality-detection.CausalityDetectionRequest snet.causality-detection.Result))



;; ServiceID definition of snet.cntk-language-understanding"
(: snet.cntk-language-understanding (ServiceID snet))

;; Service metadata of snet.cntk-language-understanding
(= (service snet.cntk-language-understanding)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Text Understanding"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmW7sDo5rjmS4ARBXqAsvN9u4n6ugtQTZoTHshSYHFEjSQ"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/nlp-services/users_guide/cntk-language-understanding.html"
           ; url content
           null
           ; description
           "<div>Slot tagging is a component in language understanding systems, where the service receives as input multiple files of a dataset. Slot tagging’s goal is to take a sequence of words and turn them into a sequence of tagged slots.The training and test dataset must be in CTF format (link), and the query and slot files are used to predict on new sentences. he service must receive as inputs the vocabulary size, number of slots labels, and number of intent labels. With these parameters, the service will be able to train a recurrent LSTM network model to perform slot tagging or intent classification. As a last parameter, the service receives a file with sentences (one per line). This file will be the input of the trained model.<br></br>Finally the service returns 2 URLs, one of a file containing the input sentences and model output (slot tagging or intent classification). The second URL is the file of trained model.</div>"
           ; short_description
           "Slot tagging (labeling user query with semantic meaning) and intent classification using CNTK language understanding.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "classification" (Cons "intent" (Cons "slot" (Cons "cntk" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: language_understanding.proto
;; Protobuf syntax: proto3
;; Prefix: snet.cntk-language-understanding
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.cntk-language-understanding.Input type
(: snet.cntk-language-understanding.Input Type)

;; Define snet.cntk-language-understanding.Input constuctor
(: snet.cntk-language-understanding.MkInput
   (->
    String ; train_ctf_url
    String ; test_ctf_url
    String ; query_wl_url
    String ; slots_wl_url
    String ; intent_wl_url
    Int32 ; vocab_size
    Int32 ; num_labels
    Int32 ; num_intents
    String ; sentences_url
    snet.cntk-language-understanding.Input))

;; Define snet.cntk-language-understanding.Input access functions

;; Define snet.cntk-language-understanding.Input.train_ctf_url
(: snet.cntk-language-understanding.Input.train_ctf_url (-> snet.cntk-language-understanding.Input String))
(= (snet.cntk-language-understanding.Input.train_ctf_url
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $train_ctf_url)

;; Define snet.cntk-language-understanding.Input.test_ctf_url
(: snet.cntk-language-understanding.Input.test_ctf_url (-> snet.cntk-language-understanding.Input String))
(= (snet.cntk-language-understanding.Input.test_ctf_url
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $test_ctf_url)

;; Define snet.cntk-language-understanding.Input.query_wl_url
(: snet.cntk-language-understanding.Input.query_wl_url (-> snet.cntk-language-understanding.Input String))
(= (snet.cntk-language-understanding.Input.query_wl_url
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $query_wl_url)

;; Define snet.cntk-language-understanding.Input.slots_wl_url
(: snet.cntk-language-understanding.Input.slots_wl_url (-> snet.cntk-language-understanding.Input String))
(= (snet.cntk-language-understanding.Input.slots_wl_url
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $slots_wl_url)

;; Define snet.cntk-language-understanding.Input.intent_wl_url
(: snet.cntk-language-understanding.Input.intent_wl_url (-> snet.cntk-language-understanding.Input String))
(= (snet.cntk-language-understanding.Input.intent_wl_url
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $intent_wl_url)

;; Define snet.cntk-language-understanding.Input.vocab_size
(: snet.cntk-language-understanding.Input.vocab_size (-> snet.cntk-language-understanding.Input Int32))
(= (snet.cntk-language-understanding.Input.vocab_size
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $vocab_size)

;; Define snet.cntk-language-understanding.Input.num_labels
(: snet.cntk-language-understanding.Input.num_labels (-> snet.cntk-language-understanding.Input Int32))
(= (snet.cntk-language-understanding.Input.num_labels
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $num_labels)

;; Define snet.cntk-language-understanding.Input.num_intents
(: snet.cntk-language-understanding.Input.num_intents (-> snet.cntk-language-understanding.Input Int32))
(= (snet.cntk-language-understanding.Input.num_intents
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $num_intents)

;; Define snet.cntk-language-understanding.Input.sentences_url
(: snet.cntk-language-understanding.Input.sentences_url (-> snet.cntk-language-understanding.Input String))
(= (snet.cntk-language-understanding.Input.sentences_url
    (snet.cntk-language-understanding.MkInput
     $train_ctf_url
     $test_ctf_url
     $query_wl_url
     $slots_wl_url
     $intent_wl_url
     $vocab_size
     $num_labels
     $num_intents
     $sentences_url)) $sentences_url)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.cntk-language-understanding.Output type
(: snet.cntk-language-understanding.Output Type)

;; Define snet.cntk-language-understanding.Output constuctor
(: snet.cntk-language-understanding.MkOutput
   (->
    String ; model_url
    String ; output_url
    snet.cntk-language-understanding.Output))

;; Define snet.cntk-language-understanding.Output access functions

;; Define snet.cntk-language-understanding.Output.model_url
(: snet.cntk-language-understanding.Output.model_url (-> snet.cntk-language-understanding.Output String))
(= (snet.cntk-language-understanding.Output.model_url
    (snet.cntk-language-understanding.MkOutput
     $model_url
     $output_url)) $model_url)

;; Define snet.cntk-language-understanding.Output.output_url
(: snet.cntk-language-understanding.Output.output_url (-> snet.cntk-language-understanding.Output String))
(= (snet.cntk-language-understanding.Output.output_url
    (snet.cntk-language-understanding.MkOutput
     $model_url
     $output_url)) $output_url)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LanguageUnderstanding ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.cntk-language-understanding.slot_tagging service method
(: snet.cntk-language-understanding.slot_tagging (-> snet.cntk-language-understanding.Input snet.cntk-language-understanding.Output))

;; Define snet.cntk-language-understanding.intent service method
(: snet.cntk-language-understanding.intent (-> snet.cntk-language-understanding.Input snet.cntk-language-understanding.Output))



;; ServiceID definition of snet.cntk-next-day-trend"
(: snet.cntk-next-day-trend (ServiceID snet))

;; Service metadata of snet.cntk-next-day-trend
(= (service snet.cntk-next-day-trend)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Market Trends"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmasSobkpxZcxN8e1omrDCzafXXjxwrkPChJAt3M62XGHb"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/time-series-analysis/users_guide/finance/cntk-next-day-trend.html"
           ; url content
           null
           ; description
           "<div>Provide the ticker symbol of an asset, along with training and target dates, and use time-series analysis to gain insight into whether the asset is upward or downward trendi.<br></br>A MultiLayer Perceptron (MLP) is trained on the closing data of the given asset’s time series data for a given period of time. The assumption here is that the training period period is relatively similar (regarding the overall behavior of the target asset) to the time period just before the target date.</div>"
           ; short_description
           "Provide the ticker symbol of an asset, along with training and target dates, and use time-series analysis to gain insight into whether the asset is in an upward or downward trend.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "trend" (Cons "finance" (Cons "cntk" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: next_day_trend.proto
;; Protobuf syntax: proto3
;; Prefix: snet.cntk-next-day-trend
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.cntk-next-day-trend.Input type
(: snet.cntk-next-day-trend.Input Type)

;; Define snet.cntk-next-day-trend.Input constuctor
(: snet.cntk-next-day-trend.MkInput
   (->
    String ; source
    String ; contract
    String ; start
    String ; end
    String ; target_date
    snet.cntk-next-day-trend.Input))

;; Define snet.cntk-next-day-trend.Input access functions

;; Define snet.cntk-next-day-trend.Input.source
(: snet.cntk-next-day-trend.Input.source (-> snet.cntk-next-day-trend.Input String))
(= (snet.cntk-next-day-trend.Input.source
    (snet.cntk-next-day-trend.MkInput
     $source
     $contract
     $start
     $end
     $target_date)) $source)

;; Define snet.cntk-next-day-trend.Input.contract
(: snet.cntk-next-day-trend.Input.contract (-> snet.cntk-next-day-trend.Input String))
(= (snet.cntk-next-day-trend.Input.contract
    (snet.cntk-next-day-trend.MkInput
     $source
     $contract
     $start
     $end
     $target_date)) $contract)

;; Define snet.cntk-next-day-trend.Input.start
(: snet.cntk-next-day-trend.Input.start (-> snet.cntk-next-day-trend.Input String))
(= (snet.cntk-next-day-trend.Input.start
    (snet.cntk-next-day-trend.MkInput
     $source
     $contract
     $start
     $end
     $target_date)) $start)

;; Define snet.cntk-next-day-trend.Input.end
(: snet.cntk-next-day-trend.Input.end (-> snet.cntk-next-day-trend.Input String))
(= (snet.cntk-next-day-trend.Input.end
    (snet.cntk-next-day-trend.MkInput
     $source
     $contract
     $start
     $end
     $target_date)) $end)

;; Define snet.cntk-next-day-trend.Input.target_date
(: snet.cntk-next-day-trend.Input.target_date (-> snet.cntk-next-day-trend.Input String))
(= (snet.cntk-next-day-trend.Input.target_date
    (snet.cntk-next-day-trend.MkInput
     $source
     $contract
     $start
     $end
     $target_date)) $target_date)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.cntk-next-day-trend.Output type
(: snet.cntk-next-day-trend.Output Type)

;; Define snet.cntk-next-day-trend.Output constuctor
(: snet.cntk-next-day-trend.MkOutput
   (->
    String ; response
    snet.cntk-next-day-trend.Output))

;; Define snet.cntk-next-day-trend.Output access functions

;; Define snet.cntk-next-day-trend.Output.response
(: snet.cntk-next-day-trend.Output.response (-> snet.cntk-next-day-trend.Output String))
(= (snet.cntk-next-day-trend.Output.response
    (snet.cntk-next-day-trend.MkOutput
     $response)) $response)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; NextDayTrend ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.cntk-next-day-trend.trend service method
(: snet.cntk-next-day-trend.trend (-> snet.cntk-next-day-trend.Input snet.cntk-next-day-trend.Output))



;; ServiceID definition of snet.face-align"
(: snet.face-align (ServiceID snet))

;; Service metadata of snet.face-align
(= (service snet.face-align)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Align Face Images"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmVhh7xQ9Q9XfHZNYz6xJbhdBdE75tJTroBPkNdpmrowCa"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/face-services"
           ; url content
           null
           ; description
           "<div>Face-align rotates, scales, and aligns an image to a template landmark layout, perhaps identified through the face-landmarks service.</div>"
           ; short_description
           "Face-align rotates, scales, and aligns an image to a template landmark layout.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "alignment" (Cons "normalization" (Cons "face-analysis" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_alignment.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-align
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceAlignmentHeader ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.FaceAlignmentHeader type
(: snet.face-align.FaceAlignmentHeader Type)

;; Define snet.face-align.FaceAlignmentHeader constuctor
(: snet.face-align.MkFaceAlignmentHeader
   (->
    snet.face-align.BoundingBox ; source_bboxes
    snet.face-align.FaceAlignmentHeader))

;; Define snet.face-align.FaceAlignmentHeader access functions

;; Define snet.face-align.FaceAlignmentHeader.source_bboxes
(: snet.face-align.FaceAlignmentHeader.source_bboxes (-> snet.face-align.FaceAlignmentHeader snet.face-align.BoundingBox))
(= (snet.face-align.FaceAlignmentHeader.source_bboxes
    (snet.face-align.MkFaceAlignmentHeader
     $source_bboxes)) $source_bboxes)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceAlignmentRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.FaceAlignmentRequest type
(: snet.face-align.FaceAlignmentRequest Type)

;; Define snet.face-align.FaceAlignmentRequest constuctor
(: snet.face-align.MkFaceAlignmentRequest
   (->
    snet.face-align.FaceAlignmentHeader ; header
    snet.face-align.ImageRGB ; image_chunk
    snet.face-align.FaceAlignmentRequest))

;; Define snet.face-align.FaceAlignmentRequest access functions

;; Define snet.face-align.FaceAlignmentRequest.header
(: snet.face-align.FaceAlignmentRequest.header (-> snet.face-align.FaceAlignmentRequest snet.face-align.FaceAlignmentHeader))
(= (snet.face-align.FaceAlignmentRequest.header
    (snet.face-align.MkFaceAlignmentRequest
     $header
     $image_chunk)) $header)

;; Define snet.face-align.FaceAlignmentRequest.image_chunk
(: snet.face-align.FaceAlignmentRequest.image_chunk (-> snet.face-align.FaceAlignmentRequest snet.face-align.ImageRGB))
(= (snet.face-align.FaceAlignmentRequest.image_chunk
    (snet.face-align.MkFaceAlignmentRequest
     $header
     $image_chunk)) $image_chunk)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceAlignmentResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.FaceAlignmentResponse type
(: snet.face-align.FaceAlignmentResponse Type)

;; Define snet.face-align.FaceAlignmentResponse constuctor
(: snet.face-align.MkFaceAlignmentResponse
   (->
    snet.face-align.ImageRGB ; image_chunk
    snet.face-align.FaceAlignmentResponse))

;; Define snet.face-align.FaceAlignmentResponse access functions

;; Define snet.face-align.FaceAlignmentResponse.image_chunk
(: snet.face-align.FaceAlignmentResponse.image_chunk (-> snet.face-align.FaceAlignmentResponse snet.face-align.ImageRGB))
(= (snet.face-align.FaceAlignmentResponse.image_chunk
    (snet.face-align.MkFaceAlignmentResponse
     $image_chunk)) $image_chunk)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; FaceAlignment ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.AlignFace service method
(: snet.face-align.AlignFace (-> snet.face-align.FaceAlignmentRequest snet.face-align.FaceAlignmentResponse))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_common.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-align
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; ImageRGB ;;
;;;;;;;;;;;;;;

;; Define snet.face-align.ImageRGB type
(: snet.face-align.ImageRGB Type)

;; Define snet.face-align.ImageRGB constuctor
(: snet.face-align.MkImageRGB
   (->
    Bytes ; content
    snet.face-align.ImageRGB))

;; Define snet.face-align.ImageRGB access functions

;; Define snet.face-align.ImageRGB.content
(: snet.face-align.ImageRGB.content (-> snet.face-align.ImageRGB Bytes))
(= (snet.face-align.ImageRGB.content
    (snet.face-align.MkImageRGB
     $content)) $content)

;;;;;;;;;;;;;;;;;
;; BoundingBox ;;
;;;;;;;;;;;;;;;;;

;; Define snet.face-align.BoundingBox type
(: snet.face-align.BoundingBox Type)

;; Define snet.face-align.BoundingBox constuctor
(: snet.face-align.MkBoundingBox
   (->
    Int32 ; x
    Int32 ; y
    Int32 ; w
    Int32 ; h
    snet.face-align.BoundingBox))

;; Define snet.face-align.BoundingBox access functions

;; Define snet.face-align.BoundingBox.x
(: snet.face-align.BoundingBox.x (-> snet.face-align.BoundingBox Int32))
(= (snet.face-align.BoundingBox.x
    (snet.face-align.MkBoundingBox
     $x
     $y
     $w
     $h)) $x)

;; Define snet.face-align.BoundingBox.y
(: snet.face-align.BoundingBox.y (-> snet.face-align.BoundingBox Int32))
(= (snet.face-align.BoundingBox.y
    (snet.face-align.MkBoundingBox
     $x
     $y
     $w
     $h)) $y)

;; Define snet.face-align.BoundingBox.w
(: snet.face-align.BoundingBox.w (-> snet.face-align.BoundingBox Int32))
(= (snet.face-align.BoundingBox.w
    (snet.face-align.MkBoundingBox
     $x
     $y
     $w
     $h)) $w)

;; Define snet.face-align.BoundingBox.h
(: snet.face-align.BoundingBox.h (-> snet.face-align.BoundingBox Int32))
(= (snet.face-align.BoundingBox.h
    (snet.face-align.MkBoundingBox
     $x
     $y
     $w
     $h)) $h)

;;;;;;;;;;;;;
;; Point2D ;;
;;;;;;;;;;;;;

;; Define snet.face-align.Point2D type
(: snet.face-align.Point2D Type)

;; Define snet.face-align.Point2D constuctor
(: snet.face-align.MkPoint2D
   (->
    Int32 ; x
    Int32 ; y
    snet.face-align.Point2D))

;; Define snet.face-align.Point2D access functions

;; Define snet.face-align.Point2D.x
(: snet.face-align.Point2D.x (-> snet.face-align.Point2D Int32))
(= (snet.face-align.Point2D.x
    (snet.face-align.MkPoint2D
     $x
     $y)) $x)

;; Define snet.face-align.Point2D.y
(: snet.face-align.Point2D.y (-> snet.face-align.Point2D Int32))
(= (snet.face-align.Point2D.y
    (snet.face-align.MkPoint2D
     $x
     $y)) $y)

;;;;;;;;;;;;;;;;;;;;
;; FaceDetections ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.FaceDetections type
(: snet.face-align.FaceDetections Type)

;; Define snet.face-align.FaceDetections constuctor
(: snet.face-align.MkFaceDetections
   (->
    snet.face-align.BoundingBox ; face_bbox
    snet.face-align.FaceDetections))

;; Define snet.face-align.FaceDetections access functions

;; Define snet.face-align.FaceDetections.face_bbox
(: snet.face-align.FaceDetections.face_bbox (-> snet.face-align.FaceDetections snet.face-align.BoundingBox))
(= (snet.face-align.FaceDetections.face_bbox
    (snet.face-align.MkFaceDetections
     $face_bbox)) $face_bbox)

;;;;;;;;;;;;;;;;;;;
;; FaceLandmarks ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.FaceLandmarks type
(: snet.face-align.FaceLandmarks Type)

;; Define snet.face-align.FaceLandmarks constuctor
(: snet.face-align.MkFaceLandmarks
   (->
    String ; landmark_model
    snet.face-align.Point2D ; point
    snet.face-align.FaceLandmarks))

;; Define snet.face-align.FaceLandmarks access functions

;; Define snet.face-align.FaceLandmarks.landmark_model
(: snet.face-align.FaceLandmarks.landmark_model (-> snet.face-align.FaceLandmarks String))
(= (snet.face-align.FaceLandmarks.landmark_model
    (snet.face-align.MkFaceLandmarks
     $landmark_model
     $point)) $landmark_model)

;; Define snet.face-align.FaceLandmarks.point
(: snet.face-align.FaceLandmarks.point (-> snet.face-align.FaceLandmarks snet.face-align.Point2D))
(= (snet.face-align.FaceLandmarks.point
    (snet.face-align.MkFaceLandmarks
     $landmark_model
     $point)) $point)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkDescriptions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.FaceLandmarkDescriptions type
(: snet.face-align.FaceLandmarkDescriptions Type)

;; Define snet.face-align.FaceLandmarkDescriptions constuctor
(: snet.face-align.MkFaceLandmarkDescriptions
   (->
    String ; landmark_model
    String ; landmark_description
    snet.face-align.Point2D ; landmark_avg
    snet.face-align.FaceLandmarkDescriptions))

;; Define snet.face-align.FaceLandmarkDescriptions access functions

;; Define snet.face-align.FaceLandmarkDescriptions.landmark_model
(: snet.face-align.FaceLandmarkDescriptions.landmark_model (-> snet.face-align.FaceLandmarkDescriptions String))
(= (snet.face-align.FaceLandmarkDescriptions.landmark_model
    (snet.face-align.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_model)

;; Define snet.face-align.FaceLandmarkDescriptions.landmark_description
(: snet.face-align.FaceLandmarkDescriptions.landmark_description (-> snet.face-align.FaceLandmarkDescriptions String))
(= (snet.face-align.FaceLandmarkDescriptions.landmark_description
    (snet.face-align.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_description)

;; Define snet.face-align.FaceLandmarkDescriptions.landmark_avg
(: snet.face-align.FaceLandmarkDescriptions.landmark_avg (-> snet.face-align.FaceLandmarkDescriptions snet.face-align.Point2D))
(= (snet.face-align.FaceLandmarkDescriptions.landmark_avg
    (snet.face-align.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_avg)

;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkModels ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-align.FaceLandmarkModels type
(: snet.face-align.FaceLandmarkModels Type)

;; Define snet.face-align.FaceLandmarkModels constuctor
(: snet.face-align.MkFaceLandmarkModels
   (->
    snet.face-align.FaceLandmarkDescriptions ; model
    snet.face-align.FaceLandmarkModels))

;; Define snet.face-align.FaceLandmarkModels access functions

;; Define snet.face-align.FaceLandmarkModels.model
(: snet.face-align.FaceLandmarkModels.model (-> snet.face-align.FaceLandmarkModels snet.face-align.FaceLandmarkDescriptions))
(= (snet.face-align.FaceLandmarkModels.model
    (snet.face-align.MkFaceLandmarkModels
     $model)) $model)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;



;; ServiceID definition of snet.face-identity"
(: snet.face-identity (ServiceID snet))

;; Service metadata of snet.face-identity
(= (service snet.face-identity)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Face Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmT7LUX1mrSABWYsYS34xCGb784uQKnotstKBCwEMYr5L2"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/face-services"
           ; url content
           null
           ; description
           "<div>Maps a face to a 128 dimension vector. Faces of the same person should end up near to one another in this embedded space.</div>"
           ; short_description
           "Face-identity generates 128 measurements for a face within the provided image, which can be used for facial recognition training or identification.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "dimensional-embedding" (Cons "identity" (Cons "face-analysis" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_common.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-identity
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; ImageRGB ;;
;;;;;;;;;;;;;;

;; Define snet.face-identity.ImageRGB type
(: snet.face-identity.ImageRGB Type)

;; Define snet.face-identity.ImageRGB constuctor
(: snet.face-identity.MkImageRGB
   (->
    Bytes ; content
    snet.face-identity.ImageRGB))

;; Define snet.face-identity.ImageRGB access functions

;; Define snet.face-identity.ImageRGB.content
(: snet.face-identity.ImageRGB.content (-> snet.face-identity.ImageRGB Bytes))
(= (snet.face-identity.ImageRGB.content
    (snet.face-identity.MkImageRGB
     $content)) $content)

;;;;;;;;;;;;;;;;;
;; BoundingBox ;;
;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.BoundingBox type
(: snet.face-identity.BoundingBox Type)

;; Define snet.face-identity.BoundingBox constuctor
(: snet.face-identity.MkBoundingBox
   (->
    Int32 ; x
    Int32 ; y
    Int32 ; w
    Int32 ; h
    snet.face-identity.BoundingBox))

;; Define snet.face-identity.BoundingBox access functions

;; Define snet.face-identity.BoundingBox.x
(: snet.face-identity.BoundingBox.x (-> snet.face-identity.BoundingBox Int32))
(= (snet.face-identity.BoundingBox.x
    (snet.face-identity.MkBoundingBox
     $x
     $y
     $w
     $h)) $x)

;; Define snet.face-identity.BoundingBox.y
(: snet.face-identity.BoundingBox.y (-> snet.face-identity.BoundingBox Int32))
(= (snet.face-identity.BoundingBox.y
    (snet.face-identity.MkBoundingBox
     $x
     $y
     $w
     $h)) $y)

;; Define snet.face-identity.BoundingBox.w
(: snet.face-identity.BoundingBox.w (-> snet.face-identity.BoundingBox Int32))
(= (snet.face-identity.BoundingBox.w
    (snet.face-identity.MkBoundingBox
     $x
     $y
     $w
     $h)) $w)

;; Define snet.face-identity.BoundingBox.h
(: snet.face-identity.BoundingBox.h (-> snet.face-identity.BoundingBox Int32))
(= (snet.face-identity.BoundingBox.h
    (snet.face-identity.MkBoundingBox
     $x
     $y
     $w
     $h)) $h)

;;;;;;;;;;;;;
;; Point2D ;;
;;;;;;;;;;;;;

;; Define snet.face-identity.Point2D type
(: snet.face-identity.Point2D Type)

;; Define snet.face-identity.Point2D constuctor
(: snet.face-identity.MkPoint2D
   (->
    Int32 ; x
    Int32 ; y
    snet.face-identity.Point2D))

;; Define snet.face-identity.Point2D access functions

;; Define snet.face-identity.Point2D.x
(: snet.face-identity.Point2D.x (-> snet.face-identity.Point2D Int32))
(= (snet.face-identity.Point2D.x
    (snet.face-identity.MkPoint2D
     $x
     $y)) $x)

;; Define snet.face-identity.Point2D.y
(: snet.face-identity.Point2D.y (-> snet.face-identity.Point2D Int32))
(= (snet.face-identity.Point2D.y
    (snet.face-identity.MkPoint2D
     $x
     $y)) $y)

;;;;;;;;;;;;;;;;;;;;
;; FaceDetections ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceDetections type
(: snet.face-identity.FaceDetections Type)

;; Define snet.face-identity.FaceDetections constuctor
(: snet.face-identity.MkFaceDetections
   (->
    snet.face-identity.BoundingBox ; face_bbox
    snet.face-identity.FaceDetections))

;; Define snet.face-identity.FaceDetections access functions

;; Define snet.face-identity.FaceDetections.face_bbox
(: snet.face-identity.FaceDetections.face_bbox (-> snet.face-identity.FaceDetections snet.face-identity.BoundingBox))
(= (snet.face-identity.FaceDetections.face_bbox
    (snet.face-identity.MkFaceDetections
     $face_bbox)) $face_bbox)

;;;;;;;;;;;;;;;;;;;
;; FaceLandmarks ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceLandmarks type
(: snet.face-identity.FaceLandmarks Type)

;; Define snet.face-identity.FaceLandmarks constuctor
(: snet.face-identity.MkFaceLandmarks
   (->
    String ; landmark_model
    snet.face-identity.Point2D ; point
    snet.face-identity.FaceLandmarks))

;; Define snet.face-identity.FaceLandmarks access functions

;; Define snet.face-identity.FaceLandmarks.landmark_model
(: snet.face-identity.FaceLandmarks.landmark_model (-> snet.face-identity.FaceLandmarks String))
(= (snet.face-identity.FaceLandmarks.landmark_model
    (snet.face-identity.MkFaceLandmarks
     $landmark_model
     $point)) $landmark_model)

;; Define snet.face-identity.FaceLandmarks.point
(: snet.face-identity.FaceLandmarks.point (-> snet.face-identity.FaceLandmarks snet.face-identity.Point2D))
(= (snet.face-identity.FaceLandmarks.point
    (snet.face-identity.MkFaceLandmarks
     $landmark_model
     $point)) $point)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkDescriptions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceLandmarkDescriptions type
(: snet.face-identity.FaceLandmarkDescriptions Type)

;; Define snet.face-identity.FaceLandmarkDescriptions constuctor
(: snet.face-identity.MkFaceLandmarkDescriptions
   (->
    String ; landmark_model
    String ; landmark_description
    snet.face-identity.Point2D ; landmark_avg
    snet.face-identity.FaceLandmarkDescriptions))

;; Define snet.face-identity.FaceLandmarkDescriptions access functions

;; Define snet.face-identity.FaceLandmarkDescriptions.landmark_model
(: snet.face-identity.FaceLandmarkDescriptions.landmark_model (-> snet.face-identity.FaceLandmarkDescriptions String))
(= (snet.face-identity.FaceLandmarkDescriptions.landmark_model
    (snet.face-identity.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_model)

;; Define snet.face-identity.FaceLandmarkDescriptions.landmark_description
(: snet.face-identity.FaceLandmarkDescriptions.landmark_description (-> snet.face-identity.FaceLandmarkDescriptions String))
(= (snet.face-identity.FaceLandmarkDescriptions.landmark_description
    (snet.face-identity.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_description)

;; Define snet.face-identity.FaceLandmarkDescriptions.landmark_avg
(: snet.face-identity.FaceLandmarkDescriptions.landmark_avg (-> snet.face-identity.FaceLandmarkDescriptions snet.face-identity.Point2D))
(= (snet.face-identity.FaceLandmarkDescriptions.landmark_avg
    (snet.face-identity.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_avg)

;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkModels ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceLandmarkModels type
(: snet.face-identity.FaceLandmarkModels Type)

;; Define snet.face-identity.FaceLandmarkModels constuctor
(: snet.face-identity.MkFaceLandmarkModels
   (->
    snet.face-identity.FaceLandmarkDescriptions ; model
    snet.face-identity.FaceLandmarkModels))

;; Define snet.face-identity.FaceLandmarkModels access functions

;; Define snet.face-identity.FaceLandmarkModels.model
(: snet.face-identity.FaceLandmarkModels.model (-> snet.face-identity.FaceLandmarkModels snet.face-identity.FaceLandmarkDescriptions))
(= (snet.face-identity.FaceLandmarkModels.model
    (snet.face-identity.MkFaceLandmarkModels
     $model)) $model)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_recognition.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-identity
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceRecognitionHeader ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceRecognitionHeader type
(: snet.face-identity.FaceRecognitionHeader Type)

;; Define snet.face-identity.FaceRecognitionHeader constuctor
(: snet.face-identity.MkFaceRecognitionHeader
   (->
    snet.face-identity.BoundingBox ; faces
    snet.face-identity.FaceRecognitionHeader))

;; Define snet.face-identity.FaceRecognitionHeader access functions

;; Define snet.face-identity.FaceRecognitionHeader.faces
(: snet.face-identity.FaceRecognitionHeader.faces (-> snet.face-identity.FaceRecognitionHeader snet.face-identity.BoundingBox))
(= (snet.face-identity.FaceRecognitionHeader.faces
    (snet.face-identity.MkFaceRecognitionHeader
     $faces)) $faces)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceRecognitionRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceRecognitionRequest type
(: snet.face-identity.FaceRecognitionRequest Type)

;; Define snet.face-identity.FaceRecognitionRequest constuctor
(: snet.face-identity.MkFaceRecognitionRequest
   (->
    snet.face-identity.FaceRecognitionHeader ; header
    snet.face-identity.ImageRGB ; image_chunk
    snet.face-identity.FaceRecognitionRequest))

;; Define snet.face-identity.FaceRecognitionRequest access functions

;; Define snet.face-identity.FaceRecognitionRequest.header
(: snet.face-identity.FaceRecognitionRequest.header (-> snet.face-identity.FaceRecognitionRequest snet.face-identity.FaceRecognitionHeader))
(= (snet.face-identity.FaceRecognitionRequest.header
    (snet.face-identity.MkFaceRecognitionRequest
     $header
     $image_chunk)) $header)

;; Define snet.face-identity.FaceRecognitionRequest.image_chunk
(: snet.face-identity.FaceRecognitionRequest.image_chunk (-> snet.face-identity.FaceRecognitionRequest snet.face-identity.ImageRGB))
(= (snet.face-identity.FaceRecognitionRequest.image_chunk
    (snet.face-identity.MkFaceRecognitionRequest
     $header
     $image_chunk)) $image_chunk)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceRecognitionResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceRecognitionResponse type
(: snet.face-identity.FaceRecognitionResponse Type)

;; Define snet.face-identity.FaceRecognitionResponse constuctor
(: snet.face-identity.MkFaceRecognitionResponse
   (->
    snet.face-identity.FaceIdentity ; identities
    snet.face-identity.FaceRecognitionResponse))

;; Define snet.face-identity.FaceRecognitionResponse access functions

;; Define snet.face-identity.FaceRecognitionResponse.identities
(: snet.face-identity.FaceRecognitionResponse.identities (-> snet.face-identity.FaceRecognitionResponse snet.face-identity.FaceIdentity))
(= (snet.face-identity.FaceRecognitionResponse.identities
    (snet.face-identity.MkFaceRecognitionResponse
     $identities)) $identities)

;;;;;;;;;;;;;;;;;;
;; FaceIdentity ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.FaceIdentity type
(: snet.face-identity.FaceIdentity Type)

;; Define snet.face-identity.FaceIdentity constuctor
(: snet.face-identity.MkFaceIdentity
   (->
    Float ; identity
    snet.face-identity.FaceIdentity))

;; Define snet.face-identity.FaceIdentity access functions

;; Define snet.face-identity.FaceIdentity.identity
(: snet.face-identity.FaceIdentity.identity (-> snet.face-identity.FaceIdentity Float))
(= (snet.face-identity.FaceIdentity.identity
    (snet.face-identity.MkFaceIdentity
     $identity)) $identity)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; FaceRecognition ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-identity.RecogniseFace service method
(: snet.face-identity.RecogniseFace (-> snet.face-identity.FaceRecognitionRequest snet.face-identity.FaceRecognitionResponse))

;; Define snet.face-identity.RecogniseFacePrealigned service method
(: snet.face-identity.RecogniseFacePrealigned (-> snet.face-identity.FaceRecognitionRequest snet.face-identity.FaceRecognitionResponse))



;; ServiceID definition of snet.sound-spleeter"
(: snet.sound-spleeter (ServiceID snet))

;; Service metadata of snet.sound-spleeter
(= (service snet.sound-spleeter)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Deezer Spleeter"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmVJGRTSsSijmt7a4bAVfs2riwSzjCT34hmnqK97YntD5x"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/sound-spleeter.html"
           ; url content
           null
           ; description
           "<div>This service uses the Deezer Spleeter to perform source separation on audio files.<br></br>It receives an audio sample as input for a source separation pre-trained model and then it separates the vocals and the accompaniment from the input audio sample using machine learning techniques.</div>"
           ; short_description
           "This service uses Spleeter to perform source separation on audio files.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "spleeter" (Cons "deezer" (Cons "separation" (Cons "audio" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: sound_spleeter.proto
;; Protobuf syntax: proto3
;; Prefix: snet.sound-spleeter
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.sound-spleeter.Input type
(: snet.sound-spleeter.Input Type)

;; Define snet.sound-spleeter.Input constuctor
(: snet.sound-spleeter.MkInput
   (->
    String ; audio_url
    Bytes ; audio
    snet.sound-spleeter.Input))

;; Define snet.sound-spleeter.Input access functions

;; Define snet.sound-spleeter.Input.audio_url
(: snet.sound-spleeter.Input.audio_url (-> snet.sound-spleeter.Input String))
(= (snet.sound-spleeter.Input.audio_url
    (snet.sound-spleeter.MkInput
     $audio_url
     $audio)) $audio_url)

;; Define snet.sound-spleeter.Input.audio
(: snet.sound-spleeter.Input.audio (-> snet.sound-spleeter.Input Bytes))
(= (snet.sound-spleeter.Input.audio
    (snet.sound-spleeter.MkInput
     $audio_url
     $audio)) $audio)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.sound-spleeter.Output type
(: snet.sound-spleeter.Output Type)

;; Define snet.sound-spleeter.Output constuctor
(: snet.sound-spleeter.MkOutput
   (->
    Bytes ; vocals
    Bytes ; accomp
    snet.sound-spleeter.Output))

;; Define snet.sound-spleeter.Output access functions

;; Define snet.sound-spleeter.Output.vocals
(: snet.sound-spleeter.Output.vocals (-> snet.sound-spleeter.Output Bytes))
(= (snet.sound-spleeter.Output.vocals
    (snet.sound-spleeter.MkOutput
     $vocals
     $accomp)) $vocals)

;; Define snet.sound-spleeter.Output.accomp
(: snet.sound-spleeter.Output.accomp (-> snet.sound-spleeter.Output Bytes))
(= (snet.sound-spleeter.Output.accomp
    (snet.sound-spleeter.MkOutput
     $vocals
     $accomp)) $accomp)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; SoundSpleeter ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.sound-spleeter.spleeter service method
(: snet.sound-spleeter.spleeter (-> snet.sound-spleeter.Input snet.sound-spleeter.Output))



;; ServiceID definition of snet.zeta36-chess-alpha-zero"
(: snet.zeta36-chess-alpha-zero (ServiceID snet))

;; Service metadata of snet.zeta36-chess-alpha-zero
(= (service snet.zeta36-chess-alpha-zero)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "AlphaZero Chess"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmWJ3tpsvWuY6i3Ap4rKtLishVMdD8XVeJVGTSWVMyM1XC"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/zeta36-chess-alpha-zero.html"
           ; url content
           null
           ; description
           "<div>Play chess with reinforcement learning by DeepMind’s AlphaGo Zero methods.<br></br>The service receives a chess move as input, such as c2c4. This move means that the piece is at column c and row 2 and will move to the position at column c and row 4. Additionally, the model can detect illegal and end game moves.<br></br>The service uses deep neural networks and reinforcement learning techniques to output the best move supplied by the pre-trained model.</div>"
           ; short_description
           "Play chess with reinforcement learning by DeepMind’s AlphaGo Zero methods.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "player" (Cons "chess" (Cons "alphazero" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: alpha_zero.proto
;; Protobuf syntax: proto3
;; Prefix: snet.zeta36-chess-alpha-zero
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.zeta36-chess-alpha-zero.Input type
(: snet.zeta36-chess-alpha-zero.Input Type)

;; Define snet.zeta36-chess-alpha-zero.Input constuctor
(: snet.zeta36-chess-alpha-zero.MkInput
   (->
    String ; uid
    String ; move
    String ; cmd
    snet.zeta36-chess-alpha-zero.Input))

;; Define snet.zeta36-chess-alpha-zero.Input access functions

;; Define snet.zeta36-chess-alpha-zero.Input.uid
(: snet.zeta36-chess-alpha-zero.Input.uid (-> snet.zeta36-chess-alpha-zero.Input String))
(= (snet.zeta36-chess-alpha-zero.Input.uid
    (snet.zeta36-chess-alpha-zero.MkInput
     $uid
     $move
     $cmd)) $uid)

;; Define snet.zeta36-chess-alpha-zero.Input.move
(: snet.zeta36-chess-alpha-zero.Input.move (-> snet.zeta36-chess-alpha-zero.Input String))
(= (snet.zeta36-chess-alpha-zero.Input.move
    (snet.zeta36-chess-alpha-zero.MkInput
     $uid
     $move
     $cmd)) $move)

;; Define snet.zeta36-chess-alpha-zero.Input.cmd
(: snet.zeta36-chess-alpha-zero.Input.cmd (-> snet.zeta36-chess-alpha-zero.Input String))
(= (snet.zeta36-chess-alpha-zero.Input.cmd
    (snet.zeta36-chess-alpha-zero.MkInput
     $uid
     $move
     $cmd)) $cmd)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.zeta36-chess-alpha-zero.Output type
(: snet.zeta36-chess-alpha-zero.Output Type)

;; Define snet.zeta36-chess-alpha-zero.Output constuctor
(: snet.zeta36-chess-alpha-zero.MkOutput
   (->
    String ; uid
    String ; board
    String ; status
    snet.zeta36-chess-alpha-zero.Output))

;; Define snet.zeta36-chess-alpha-zero.Output access functions

;; Define snet.zeta36-chess-alpha-zero.Output.uid
(: snet.zeta36-chess-alpha-zero.Output.uid (-> snet.zeta36-chess-alpha-zero.Output String))
(= (snet.zeta36-chess-alpha-zero.Output.uid
    (snet.zeta36-chess-alpha-zero.MkOutput
     $uid
     $board
     $status)) $uid)

;; Define snet.zeta36-chess-alpha-zero.Output.board
(: snet.zeta36-chess-alpha-zero.Output.board (-> snet.zeta36-chess-alpha-zero.Output String))
(= (snet.zeta36-chess-alpha-zero.Output.board
    (snet.zeta36-chess-alpha-zero.MkOutput
     $uid
     $board
     $status)) $board)

;; Define snet.zeta36-chess-alpha-zero.Output.status
(: snet.zeta36-chess-alpha-zero.Output.status (-> snet.zeta36-chess-alpha-zero.Output String))
(= (snet.zeta36-chess-alpha-zero.Output.status
    (snet.zeta36-chess-alpha-zero.MkOutput
     $uid
     $board
     $status)) $status)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; AlphaZero ;;
;;;;;;;;;;;;;;;

;; Define snet.zeta36-chess-alpha-zero.play service method
(: snet.zeta36-chess-alpha-zero.play (-> snet.zeta36-chess-alpha-zero.Input snet.zeta36-chess-alpha-zero.Output))



;; ServiceID definition of snet.cntk-lstm-forecast"
(: snet.cntk-lstm-forecast (ServiceID snet))

;; Service metadata of snet.cntk-lstm-forecast
(= (service snet.cntk-lstm-forecast)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Time Series Forecasting"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmTaJHRHbKQ7LSEa2uzm58C5gdvzbmdm4nbfQTBx3BrRb8"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/time-series-analysis/users_guide/generic/cntk-lstm-forecast.html"
           ; url content
           null
           ; description
           "<div>Use this service to predict future values from a provided set of time-series data.</div>"
           ; short_description
           "Use this service to predict future values from a provided set of time-series data.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "forecast" (Cons "lstm" (Cons "cntk" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: time_series_forecast.proto
;; Protobuf syntax: proto3
;; Prefix: snet.cntk-lstm-forecast
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.cntk-lstm-forecast.Input type
(: snet.cntk-lstm-forecast.Input Type)

;; Define snet.cntk-lstm-forecast.Input constuctor
(: snet.cntk-lstm-forecast.MkInput
   (->
    Int32 ; window_len
    Int32 ; word_len
    Int32 ; alphabet_size
    String ; source_type
    String ; source
    String ; contract
    String ; start_date
    String ; end_date
    snet.cntk-lstm-forecast.Input))

;; Define snet.cntk-lstm-forecast.Input access functions

;; Define snet.cntk-lstm-forecast.Input.window_len
(: snet.cntk-lstm-forecast.Input.window_len (-> snet.cntk-lstm-forecast.Input Int32))
(= (snet.cntk-lstm-forecast.Input.window_len
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $window_len)

;; Define snet.cntk-lstm-forecast.Input.word_len
(: snet.cntk-lstm-forecast.Input.word_len (-> snet.cntk-lstm-forecast.Input Int32))
(= (snet.cntk-lstm-forecast.Input.word_len
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $word_len)

;; Define snet.cntk-lstm-forecast.Input.alphabet_size
(: snet.cntk-lstm-forecast.Input.alphabet_size (-> snet.cntk-lstm-forecast.Input Int32))
(= (snet.cntk-lstm-forecast.Input.alphabet_size
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $alphabet_size)

;; Define snet.cntk-lstm-forecast.Input.source_type
(: snet.cntk-lstm-forecast.Input.source_type (-> snet.cntk-lstm-forecast.Input String))
(= (snet.cntk-lstm-forecast.Input.source_type
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $source_type)

;; Define snet.cntk-lstm-forecast.Input.source
(: snet.cntk-lstm-forecast.Input.source (-> snet.cntk-lstm-forecast.Input String))
(= (snet.cntk-lstm-forecast.Input.source
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $source)

;; Define snet.cntk-lstm-forecast.Input.contract
(: snet.cntk-lstm-forecast.Input.contract (-> snet.cntk-lstm-forecast.Input String))
(= (snet.cntk-lstm-forecast.Input.contract
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $contract)

;; Define snet.cntk-lstm-forecast.Input.start_date
(: snet.cntk-lstm-forecast.Input.start_date (-> snet.cntk-lstm-forecast.Input String))
(= (snet.cntk-lstm-forecast.Input.start_date
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $start_date)

;; Define snet.cntk-lstm-forecast.Input.end_date
(: snet.cntk-lstm-forecast.Input.end_date (-> snet.cntk-lstm-forecast.Input String))
(= (snet.cntk-lstm-forecast.Input.end_date
    (snet.cntk-lstm-forecast.MkInput
     $window_len
     $word_len
     $alphabet_size
     $source_type
     $source
     $contract
     $start_date
     $end_date)) $end_date)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.cntk-lstm-forecast.Output type
(: snet.cntk-lstm-forecast.Output Type)

;; Define snet.cntk-lstm-forecast.Output constuctor
(: snet.cntk-lstm-forecast.MkOutput
   (->
    String ; last_sax_word
    String ; forecast_sax_letter
    Float ; position_in_sax_interval
    snet.cntk-lstm-forecast.Output))

;; Define snet.cntk-lstm-forecast.Output access functions

;; Define snet.cntk-lstm-forecast.Output.last_sax_word
(: snet.cntk-lstm-forecast.Output.last_sax_word (-> snet.cntk-lstm-forecast.Output String))
(= (snet.cntk-lstm-forecast.Output.last_sax_word
    (snet.cntk-lstm-forecast.MkOutput
     $last_sax_word
     $forecast_sax_letter
     $position_in_sax_interval)) $last_sax_word)

;; Define snet.cntk-lstm-forecast.Output.forecast_sax_letter
(: snet.cntk-lstm-forecast.Output.forecast_sax_letter (-> snet.cntk-lstm-forecast.Output String))
(= (snet.cntk-lstm-forecast.Output.forecast_sax_letter
    (snet.cntk-lstm-forecast.MkOutput
     $last_sax_word
     $forecast_sax_letter
     $position_in_sax_interval)) $forecast_sax_letter)

;; Define snet.cntk-lstm-forecast.Output.position_in_sax_interval
(: snet.cntk-lstm-forecast.Output.position_in_sax_interval (-> snet.cntk-lstm-forecast.Output Float))
(= (snet.cntk-lstm-forecast.Output.position_in_sax_interval
    (snet.cntk-lstm-forecast.MkOutput
     $last_sax_word
     $forecast_sax_letter
     $position_in_sax_interval)) $position_in_sax_interval)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; Forecast ;;
;;;;;;;;;;;;;;

;; Define snet.cntk-lstm-forecast.forecast service method
(: snet.cntk-lstm-forecast.forecast (-> snet.cntk-lstm-forecast.Input snet.cntk-lstm-forecast.Output))



;; ServiceID definition of snet.face-detect"
(: snet.face-detect (ServiceID snet))

;; Service metadata of snet.face-detect
(= (service snet.face-detect)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Detect Faces"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmb8MJhW6gAagbVDQd8NCxaKN8agTL1wiUhq375hrvG5Z7"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/face-services"
           ; url content
           null
           ; description
           "<div>One of four Face Services (localization, landmark detection, alignment, and recognition,) face-detect identifies computer generated bounding boxes to detect faces within an image.</div>"
           ; short_description
           "Face-detect identifies computer generated bounding boxes to detect faces within an image.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "object-localization" (Cons "face-analysis" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_common.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-detect
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; ImageRGB ;;
;;;;;;;;;;;;;;

;; Define snet.face-detect.ImageRGB type
(: snet.face-detect.ImageRGB Type)

;; Define snet.face-detect.ImageRGB constuctor
(: snet.face-detect.MkImageRGB
   (->
    Bytes ; content
    snet.face-detect.ImageRGB))

;; Define snet.face-detect.ImageRGB access functions

;; Define snet.face-detect.ImageRGB.content
(: snet.face-detect.ImageRGB.content (-> snet.face-detect.ImageRGB Bytes))
(= (snet.face-detect.ImageRGB.content
    (snet.face-detect.MkImageRGB
     $content)) $content)

;;;;;;;;;;;;;;;;;
;; BoundingBox ;;
;;;;;;;;;;;;;;;;;

;; Define snet.face-detect.BoundingBox type
(: snet.face-detect.BoundingBox Type)

;; Define snet.face-detect.BoundingBox constuctor
(: snet.face-detect.MkBoundingBox
   (->
    Int32 ; x
    Int32 ; y
    Int32 ; w
    Int32 ; h
    snet.face-detect.BoundingBox))

;; Define snet.face-detect.BoundingBox access functions

;; Define snet.face-detect.BoundingBox.x
(: snet.face-detect.BoundingBox.x (-> snet.face-detect.BoundingBox Int32))
(= (snet.face-detect.BoundingBox.x
    (snet.face-detect.MkBoundingBox
     $x
     $y
     $w
     $h)) $x)

;; Define snet.face-detect.BoundingBox.y
(: snet.face-detect.BoundingBox.y (-> snet.face-detect.BoundingBox Int32))
(= (snet.face-detect.BoundingBox.y
    (snet.face-detect.MkBoundingBox
     $x
     $y
     $w
     $h)) $y)

;; Define snet.face-detect.BoundingBox.w
(: snet.face-detect.BoundingBox.w (-> snet.face-detect.BoundingBox Int32))
(= (snet.face-detect.BoundingBox.w
    (snet.face-detect.MkBoundingBox
     $x
     $y
     $w
     $h)) $w)

;; Define snet.face-detect.BoundingBox.h
(: snet.face-detect.BoundingBox.h (-> snet.face-detect.BoundingBox Int32))
(= (snet.face-detect.BoundingBox.h
    (snet.face-detect.MkBoundingBox
     $x
     $y
     $w
     $h)) $h)

;;;;;;;;;;;;;
;; Point2D ;;
;;;;;;;;;;;;;

;; Define snet.face-detect.Point2D type
(: snet.face-detect.Point2D Type)

;; Define snet.face-detect.Point2D constuctor
(: snet.face-detect.MkPoint2D
   (->
    Int32 ; x
    Int32 ; y
    snet.face-detect.Point2D))

;; Define snet.face-detect.Point2D access functions

;; Define snet.face-detect.Point2D.x
(: snet.face-detect.Point2D.x (-> snet.face-detect.Point2D Int32))
(= (snet.face-detect.Point2D.x
    (snet.face-detect.MkPoint2D
     $x
     $y)) $x)

;; Define snet.face-detect.Point2D.y
(: snet.face-detect.Point2D.y (-> snet.face-detect.Point2D Int32))
(= (snet.face-detect.Point2D.y
    (snet.face-detect.MkPoint2D
     $x
     $y)) $y)

;;;;;;;;;;;;;;;;;;;;
;; FaceDetections ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-detect.FaceDetections type
(: snet.face-detect.FaceDetections Type)

;; Define snet.face-detect.FaceDetections constuctor
(: snet.face-detect.MkFaceDetections
   (->
    snet.face-detect.BoundingBox ; face_bbox
    snet.face-detect.FaceDetections))

;; Define snet.face-detect.FaceDetections access functions

;; Define snet.face-detect.FaceDetections.face_bbox
(: snet.face-detect.FaceDetections.face_bbox (-> snet.face-detect.FaceDetections snet.face-detect.BoundingBox))
(= (snet.face-detect.FaceDetections.face_bbox
    (snet.face-detect.MkFaceDetections
     $face_bbox)) $face_bbox)

;;;;;;;;;;;;;;;;;;;
;; FaceLandmarks ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.face-detect.FaceLandmarks type
(: snet.face-detect.FaceLandmarks Type)

;; Define snet.face-detect.FaceLandmarks constuctor
(: snet.face-detect.MkFaceLandmarks
   (->
    String ; landmark_model
    snet.face-detect.Point2D ; point
    snet.face-detect.FaceLandmarks))

;; Define snet.face-detect.FaceLandmarks access functions

;; Define snet.face-detect.FaceLandmarks.landmark_model
(: snet.face-detect.FaceLandmarks.landmark_model (-> snet.face-detect.FaceLandmarks String))
(= (snet.face-detect.FaceLandmarks.landmark_model
    (snet.face-detect.MkFaceLandmarks
     $landmark_model
     $point)) $landmark_model)

;; Define snet.face-detect.FaceLandmarks.point
(: snet.face-detect.FaceLandmarks.point (-> snet.face-detect.FaceLandmarks snet.face-detect.Point2D))
(= (snet.face-detect.FaceLandmarks.point
    (snet.face-detect.MkFaceLandmarks
     $landmark_model
     $point)) $point)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkDescriptions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-detect.FaceLandmarkDescriptions type
(: snet.face-detect.FaceLandmarkDescriptions Type)

;; Define snet.face-detect.FaceLandmarkDescriptions constuctor
(: snet.face-detect.MkFaceLandmarkDescriptions
   (->
    String ; landmark_model
    String ; landmark_description
    snet.face-detect.Point2D ; landmark_avg
    snet.face-detect.FaceLandmarkDescriptions))

;; Define snet.face-detect.FaceLandmarkDescriptions access functions

;; Define snet.face-detect.FaceLandmarkDescriptions.landmark_model
(: snet.face-detect.FaceLandmarkDescriptions.landmark_model (-> snet.face-detect.FaceLandmarkDescriptions String))
(= (snet.face-detect.FaceLandmarkDescriptions.landmark_model
    (snet.face-detect.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_model)

;; Define snet.face-detect.FaceLandmarkDescriptions.landmark_description
(: snet.face-detect.FaceLandmarkDescriptions.landmark_description (-> snet.face-detect.FaceLandmarkDescriptions String))
(= (snet.face-detect.FaceLandmarkDescriptions.landmark_description
    (snet.face-detect.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_description)

;; Define snet.face-detect.FaceLandmarkDescriptions.landmark_avg
(: snet.face-detect.FaceLandmarkDescriptions.landmark_avg (-> snet.face-detect.FaceLandmarkDescriptions snet.face-detect.Point2D))
(= (snet.face-detect.FaceLandmarkDescriptions.landmark_avg
    (snet.face-detect.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_avg)

;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkModels ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-detect.FaceLandmarkModels type
(: snet.face-detect.FaceLandmarkModels Type)

;; Define snet.face-detect.FaceLandmarkModels constuctor
(: snet.face-detect.MkFaceLandmarkModels
   (->
    snet.face-detect.FaceLandmarkDescriptions ; model
    snet.face-detect.FaceLandmarkModels))

;; Define snet.face-detect.FaceLandmarkModels access functions

;; Define snet.face-detect.FaceLandmarkModels.model
(: snet.face-detect.FaceLandmarkModels.model (-> snet.face-detect.FaceLandmarkModels snet.face-detect.FaceLandmarkDescriptions))
(= (snet.face-detect.FaceLandmarkModels.model
    (snet.face-detect.MkFaceLandmarkModels
     $model)) $model)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_detect.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-detect
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; FaceDetect ;;
;;;;;;;;;;;;;;;;

;; Define snet.face-detect.FindFace service method
(: snet.face-detect.FindFace (-> snet.face-detect.ImageRGB snet.face-detect.FaceDetections))



;; ServiceID definition of snet.yolov3-object-detection"
(: snet.yolov3-object-detection (ServiceID snet))

;; Service metadata of snet.yolov3-object-detection
(= (service snet.yolov3-object-detection)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Detect Objects"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUe1D5HVnnkipTphfx3qyyLTnykaPTFzMLwis73GQs6sP"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/yolov3-object-detection.html"
           ; url content
           null
           ; description
           "<div>Conduct real-time object detection on images, the service receives an image and uses it as an input for a pre-trained YOLOv3 model, and the model can then detect objects (80 classes) from the COCO Dataset. COCO is a large image dataset designed for object detection, segmentation, person keypoints detection, stuff segmentation, and caption generation.<br></br>The service makes predictions using computer vision and machine learning techniques, and outputs an image with a bounding box for each object that it has predicted (and its confidence).<br></br>The user must provide the following inputs in order to start the service and get a response:<br></br>Inputs:<br></br>model: DNN Model (yolov3\").</div>"
           ; short_description
           "Conduct real-time object detection on images.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "detection" (Cons "object" (Cons "yolov3" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: object_detection.proto
;; Protobuf syntax: proto3
;; Prefix: snet.yolov3-object-detection
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.yolov3-object-detection.Input type
(: snet.yolov3-object-detection.Input Type)

;; Define snet.yolov3-object-detection.Input constuctor
(: snet.yolov3-object-detection.MkInput
   (->
    String ; model
    String ; img_path
    Float ; confidence
    snet.yolov3-object-detection.Input))

;; Define snet.yolov3-object-detection.Input access functions

;; Define snet.yolov3-object-detection.Input.model
(: snet.yolov3-object-detection.Input.model (-> snet.yolov3-object-detection.Input String))
(= (snet.yolov3-object-detection.Input.model
    (snet.yolov3-object-detection.MkInput
     $model
     $img_path
     $confidence)) $model)

;; Define snet.yolov3-object-detection.Input.img_path
(: snet.yolov3-object-detection.Input.img_path (-> snet.yolov3-object-detection.Input String))
(= (snet.yolov3-object-detection.Input.img_path
    (snet.yolov3-object-detection.MkInput
     $model
     $img_path
     $confidence)) $img_path)

;; Define snet.yolov3-object-detection.Input.confidence
(: snet.yolov3-object-detection.Input.confidence (-> snet.yolov3-object-detection.Input Float))
(= (snet.yolov3-object-detection.Input.confidence
    (snet.yolov3-object-detection.MkInput
     $model
     $img_path
     $confidence)) $confidence)

;;;;;;;;;;;
;; Boxes ;;
;;;;;;;;;;;

;; Define snet.yolov3-object-detection.Boxes type
(: snet.yolov3-object-detection.Boxes Type)

;; Define snet.yolov3-object-detection.Boxes constuctor
(: snet.yolov3-object-detection.MkBoxes
   (->
    Int32 ; x
    Int32 ; y
    Int32 ; w
    Int32 ; h
    snet.yolov3-object-detection.Boxes))

;; Define snet.yolov3-object-detection.Boxes access functions

;; Define snet.yolov3-object-detection.Boxes.x
(: snet.yolov3-object-detection.Boxes.x (-> snet.yolov3-object-detection.Boxes Int32))
(= (snet.yolov3-object-detection.Boxes.x
    (snet.yolov3-object-detection.MkBoxes
     $x
     $y
     $w
     $h)) $x)

;; Define snet.yolov3-object-detection.Boxes.y
(: snet.yolov3-object-detection.Boxes.y (-> snet.yolov3-object-detection.Boxes Int32))
(= (snet.yolov3-object-detection.Boxes.y
    (snet.yolov3-object-detection.MkBoxes
     $x
     $y
     $w
     $h)) $y)

;; Define snet.yolov3-object-detection.Boxes.w
(: snet.yolov3-object-detection.Boxes.w (-> snet.yolov3-object-detection.Boxes Int32))
(= (snet.yolov3-object-detection.Boxes.w
    (snet.yolov3-object-detection.MkBoxes
     $x
     $y
     $w
     $h)) $w)

;; Define snet.yolov3-object-detection.Boxes.h
(: snet.yolov3-object-detection.Boxes.h (-> snet.yolov3-object-detection.Boxes Int32))
(= (snet.yolov3-object-detection.Boxes.h
    (snet.yolov3-object-detection.MkBoxes
     $x
     $y
     $w
     $h)) $h)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.yolov3-object-detection.Output type
(: snet.yolov3-object-detection.Output Type)

;; Define snet.yolov3-object-detection.Output constuctor
(: snet.yolov3-object-detection.MkOutput
   (->
    Float ; delta_time
    snet.yolov3-object-detection.Boxes ; boxes
    Int32 ; class_ids
    Float ; confidences
    String ; img_base64
    snet.yolov3-object-detection.Output))

;; Define snet.yolov3-object-detection.Output access functions

;; Define snet.yolov3-object-detection.Output.delta_time
(: snet.yolov3-object-detection.Output.delta_time (-> snet.yolov3-object-detection.Output Float))
(= (snet.yolov3-object-detection.Output.delta_time
    (snet.yolov3-object-detection.MkOutput
     $delta_time
     $boxes
     $class_ids
     $confidences
     $img_base64)) $delta_time)

;; Define snet.yolov3-object-detection.Output.boxes
(: snet.yolov3-object-detection.Output.boxes (-> snet.yolov3-object-detection.Output snet.yolov3-object-detection.Boxes))
(= (snet.yolov3-object-detection.Output.boxes
    (snet.yolov3-object-detection.MkOutput
     $delta_time
     $boxes
     $class_ids
     $confidences
     $img_base64)) $boxes)

;; Define snet.yolov3-object-detection.Output.class_ids
(: snet.yolov3-object-detection.Output.class_ids (-> snet.yolov3-object-detection.Output Int32))
(= (snet.yolov3-object-detection.Output.class_ids
    (snet.yolov3-object-detection.MkOutput
     $delta_time
     $boxes
     $class_ids
     $confidences
     $img_base64)) $class_ids)

;; Define snet.yolov3-object-detection.Output.confidences
(: snet.yolov3-object-detection.Output.confidences (-> snet.yolov3-object-detection.Output Float))
(= (snet.yolov3-object-detection.Output.confidences
    (snet.yolov3-object-detection.MkOutput
     $delta_time
     $boxes
     $class_ids
     $confidences
     $img_base64)) $confidences)

;; Define snet.yolov3-object-detection.Output.img_base64
(: snet.yolov3-object-detection.Output.img_base64 (-> snet.yolov3-object-detection.Output String))
(= (snet.yolov3-object-detection.Output.img_base64
    (snet.yolov3-object-detection.MkOutput
     $delta_time
     $boxes
     $class_ids
     $confidences
     $img_base64)) $img_base64)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Detect ;;
;;;;;;;;;;;;

;; Define snet.yolov3-object-detection.detect service method
(: snet.yolov3-object-detection.detect (-> snet.yolov3-object-detection.Input snet.yolov3-object-detection.Output))



;; ServiceID definition of snet.example-service"
(: snet.example-service (ServiceID snet))

;; Service metadata of snet.example-service
(= (service snet.example-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Sample Service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmdG9TnxwkLuZGR8qtvxGpBCWSjFz3PJJseECLqjDFsynS"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/example-service"
           ; url content
           null
           ; description
           "<div>Basic math functions to Test the platform.</div>"
           ; short_description
           "Basic math functions to Test the platform.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "calculator" (Cons "test" (Cons "Test" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: snet.example-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define snet.example-service.Numbers type
(: snet.example-service.Numbers Type)

;; Define snet.example-service.Numbers constuctor
(: snet.example-service.MkNumbers
   (->
    Float ; a
    Float ; b
    snet.example-service.Numbers))

;; Define snet.example-service.Numbers access functions

;; Define snet.example-service.Numbers.a
(: snet.example-service.Numbers.a (-> snet.example-service.Numbers Float))
(= (snet.example-service.Numbers.a
    (snet.example-service.MkNumbers
     $a
     $b)) $a)

;; Define snet.example-service.Numbers.b
(: snet.example-service.Numbers.b (-> snet.example-service.Numbers Float))
(= (snet.example-service.Numbers.b
    (snet.example-service.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define snet.example-service.Result type
(: snet.example-service.Result Type)

;; Define snet.example-service.Result constuctor
(: snet.example-service.MkResult
   (->
    Float ; value
    snet.example-service.Result))

;; Define snet.example-service.Result access functions

;; Define snet.example-service.Result.value
(: snet.example-service.Result.value (-> snet.example-service.Result Float))
(= (snet.example-service.Result.value
    (snet.example-service.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define snet.example-service.add service method
(: snet.example-service.add (-> snet.example-service.Numbers snet.example-service.Result))

;; Define snet.example-service.sub service method
(: snet.example-service.sub (-> snet.example-service.Numbers snet.example-service.Result))

;; Define snet.example-service.mul service method
(: snet.example-service.mul (-> snet.example-service.Numbers snet.example-service.Result))

;; Define snet.example-service.div service method
(: snet.example-service.div (-> snet.example-service.Numbers snet.example-service.Result))



;; ServiceID definition of snet.i3d-video-action-recognition"
(: snet.i3d-video-action-recognition (ServiceID snet))

;; Service metadata of snet.i3d-video-action-recognition
(= (service snet.i3d-video-action-recognition)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Detect Action In Video "
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmczNHLw6fwQAecMMPZv1xj7LXgwYjAxE123yzEv44ma8E"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/i3d-video-action-recognition.html"
           ; url content
           null
           ; description
           "<div>Using the Kinetics 400 or 600 dataset, identify either 400 or 600 different types of human actions within a video through state-of-the-art Inflated 3D Convolutional Neural Networks. The user must provide a video URL, and then the service will make predictions of actions within the video using computer vision and machine learning techniques. The service will output a top 5 prediction list (ordered by confidence) based on the specified Kinetics 400 or 600 dataset.</div>"
           ; short_description
           "Identify 400 - 600 different types of human actions within a video through state-of-the-art Inflated 3D Convolutional Neural Networks.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "action" (Cons "i3d" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: video_action_recon.proto
;; Protobuf syntax: proto3
;; Prefix: snet.i3d-video-action-recognition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.i3d-video-action-recognition.Input type
(: snet.i3d-video-action-recognition.Input Type)

;; Define snet.i3d-video-action-recognition.Input constuctor
(: snet.i3d-video-action-recognition.MkInput
   (->
    String ; model
    String ; url
    snet.i3d-video-action-recognition.Input))

;; Define snet.i3d-video-action-recognition.Input access functions

;; Define snet.i3d-video-action-recognition.Input.model
(: snet.i3d-video-action-recognition.Input.model (-> snet.i3d-video-action-recognition.Input String))
(= (snet.i3d-video-action-recognition.Input.model
    (snet.i3d-video-action-recognition.MkInput
     $model
     $url)) $model)

;; Define snet.i3d-video-action-recognition.Input.url
(: snet.i3d-video-action-recognition.Input.url (-> snet.i3d-video-action-recognition.Input String))
(= (snet.i3d-video-action-recognition.Input.url
    (snet.i3d-video-action-recognition.MkInput
     $model
     $url)) $url)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.i3d-video-action-recognition.Output type
(: snet.i3d-video-action-recognition.Output Type)

;; Define snet.i3d-video-action-recognition.Output constuctor
(: snet.i3d-video-action-recognition.MkOutput
   (->
    String ; value
    snet.i3d-video-action-recognition.Output))

;; Define snet.i3d-video-action-recognition.Output access functions

;; Define snet.i3d-video-action-recognition.Output.value
(: snet.i3d-video-action-recognition.Output.value (-> snet.i3d-video-action-recognition.Output String))
(= (snet.i3d-video-action-recognition.Output.value
    (snet.i3d-video-action-recognition.MkOutput
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VideoActionRecognition ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.i3d-video-action-recognition.video_action_recon service method
(: snet.i3d-video-action-recognition.video_action_recon (-> snet.i3d-video-action-recognition.Input snet.i3d-video-action-recognition.Output))



;; ServiceID definition of snet.face-landmarks"
(: snet.face-landmarks (ServiceID snet))

;; Service metadata of snet.face-landmarks
(= (service snet.face-landmarks)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Find Facial Landmarks"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmVN28eFWNafF3hgoCFyv5teqmYtR46qEtpGzFFLGAtbiD"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/face-services"
           ; url content
           null
           ; description
           "<div>Face-landmarks identifies any landmarks (keypoints) on faces within an image.<br></br>This service requires an input image and input bounding boxes (perhaps discovered through the face-detect service.) Identified landmarks correspond to the same locations on all faces.</div>"
           ; short_description
           "Face-landmarks identifies any landmarks (keypoints) on faces within an image.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "pose-detection" (Cons "face-analysis" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_common.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-landmarks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; ImageRGB ;;
;;;;;;;;;;;;;;

;; Define snet.face-landmarks.ImageRGB type
(: snet.face-landmarks.ImageRGB Type)

;; Define snet.face-landmarks.ImageRGB constuctor
(: snet.face-landmarks.MkImageRGB
   (->
    Bytes ; content
    snet.face-landmarks.ImageRGB))

;; Define snet.face-landmarks.ImageRGB access functions

;; Define snet.face-landmarks.ImageRGB.content
(: snet.face-landmarks.ImageRGB.content (-> snet.face-landmarks.ImageRGB Bytes))
(= (snet.face-landmarks.ImageRGB.content
    (snet.face-landmarks.MkImageRGB
     $content)) $content)

;;;;;;;;;;;;;;;;;
;; BoundingBox ;;
;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.BoundingBox type
(: snet.face-landmarks.BoundingBox Type)

;; Define snet.face-landmarks.BoundingBox constuctor
(: snet.face-landmarks.MkBoundingBox
   (->
    Int32 ; x
    Int32 ; y
    Int32 ; w
    Int32 ; h
    snet.face-landmarks.BoundingBox))

;; Define snet.face-landmarks.BoundingBox access functions

;; Define snet.face-landmarks.BoundingBox.x
(: snet.face-landmarks.BoundingBox.x (-> snet.face-landmarks.BoundingBox Int32))
(= (snet.face-landmarks.BoundingBox.x
    (snet.face-landmarks.MkBoundingBox
     $x
     $y
     $w
     $h)) $x)

;; Define snet.face-landmarks.BoundingBox.y
(: snet.face-landmarks.BoundingBox.y (-> snet.face-landmarks.BoundingBox Int32))
(= (snet.face-landmarks.BoundingBox.y
    (snet.face-landmarks.MkBoundingBox
     $x
     $y
     $w
     $h)) $y)

;; Define snet.face-landmarks.BoundingBox.w
(: snet.face-landmarks.BoundingBox.w (-> snet.face-landmarks.BoundingBox Int32))
(= (snet.face-landmarks.BoundingBox.w
    (snet.face-landmarks.MkBoundingBox
     $x
     $y
     $w
     $h)) $w)

;; Define snet.face-landmarks.BoundingBox.h
(: snet.face-landmarks.BoundingBox.h (-> snet.face-landmarks.BoundingBox Int32))
(= (snet.face-landmarks.BoundingBox.h
    (snet.face-landmarks.MkBoundingBox
     $x
     $y
     $w
     $h)) $h)

;;;;;;;;;;;;;
;; Point2D ;;
;;;;;;;;;;;;;

;; Define snet.face-landmarks.Point2D type
(: snet.face-landmarks.Point2D Type)

;; Define snet.face-landmarks.Point2D constuctor
(: snet.face-landmarks.MkPoint2D
   (->
    Int32 ; x
    Int32 ; y
    snet.face-landmarks.Point2D))

;; Define snet.face-landmarks.Point2D access functions

;; Define snet.face-landmarks.Point2D.x
(: snet.face-landmarks.Point2D.x (-> snet.face-landmarks.Point2D Int32))
(= (snet.face-landmarks.Point2D.x
    (snet.face-landmarks.MkPoint2D
     $x
     $y)) $x)

;; Define snet.face-landmarks.Point2D.y
(: snet.face-landmarks.Point2D.y (-> snet.face-landmarks.Point2D Int32))
(= (snet.face-landmarks.Point2D.y
    (snet.face-landmarks.MkPoint2D
     $x
     $y)) $y)

;;;;;;;;;;;;;;;;;;;;
;; FaceDetections ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.FaceDetections type
(: snet.face-landmarks.FaceDetections Type)

;; Define snet.face-landmarks.FaceDetections constuctor
(: snet.face-landmarks.MkFaceDetections
   (->
    snet.face-landmarks.BoundingBox ; face_bbox
    snet.face-landmarks.FaceDetections))

;; Define snet.face-landmarks.FaceDetections access functions

;; Define snet.face-landmarks.FaceDetections.face_bbox
(: snet.face-landmarks.FaceDetections.face_bbox (-> snet.face-landmarks.FaceDetections snet.face-landmarks.BoundingBox))
(= (snet.face-landmarks.FaceDetections.face_bbox
    (snet.face-landmarks.MkFaceDetections
     $face_bbox)) $face_bbox)

;;;;;;;;;;;;;;;;;;;
;; FaceLandmarks ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.FaceLandmarks type
(: snet.face-landmarks.FaceLandmarks Type)

;; Define snet.face-landmarks.FaceLandmarks constuctor
(: snet.face-landmarks.MkFaceLandmarks
   (->
    String ; landmark_model
    snet.face-landmarks.Point2D ; point
    snet.face-landmarks.FaceLandmarks))

;; Define snet.face-landmarks.FaceLandmarks access functions

;; Define snet.face-landmarks.FaceLandmarks.landmark_model
(: snet.face-landmarks.FaceLandmarks.landmark_model (-> snet.face-landmarks.FaceLandmarks String))
(= (snet.face-landmarks.FaceLandmarks.landmark_model
    (snet.face-landmarks.MkFaceLandmarks
     $landmark_model
     $point)) $landmark_model)

;; Define snet.face-landmarks.FaceLandmarks.point
(: snet.face-landmarks.FaceLandmarks.point (-> snet.face-landmarks.FaceLandmarks snet.face-landmarks.Point2D))
(= (snet.face-landmarks.FaceLandmarks.point
    (snet.face-landmarks.MkFaceLandmarks
     $landmark_model
     $point)) $point)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkDescriptions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.FaceLandmarkDescriptions type
(: snet.face-landmarks.FaceLandmarkDescriptions Type)

;; Define snet.face-landmarks.FaceLandmarkDescriptions constuctor
(: snet.face-landmarks.MkFaceLandmarkDescriptions
   (->
    String ; landmark_model
    String ; landmark_description
    snet.face-landmarks.Point2D ; landmark_avg
    snet.face-landmarks.FaceLandmarkDescriptions))

;; Define snet.face-landmarks.FaceLandmarkDescriptions access functions

;; Define snet.face-landmarks.FaceLandmarkDescriptions.landmark_model
(: snet.face-landmarks.FaceLandmarkDescriptions.landmark_model (-> snet.face-landmarks.FaceLandmarkDescriptions String))
(= (snet.face-landmarks.FaceLandmarkDescriptions.landmark_model
    (snet.face-landmarks.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_model)

;; Define snet.face-landmarks.FaceLandmarkDescriptions.landmark_description
(: snet.face-landmarks.FaceLandmarkDescriptions.landmark_description (-> snet.face-landmarks.FaceLandmarkDescriptions String))
(= (snet.face-landmarks.FaceLandmarkDescriptions.landmark_description
    (snet.face-landmarks.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_description)

;; Define snet.face-landmarks.FaceLandmarkDescriptions.landmark_avg
(: snet.face-landmarks.FaceLandmarkDescriptions.landmark_avg (-> snet.face-landmarks.FaceLandmarkDescriptions snet.face-landmarks.Point2D))
(= (snet.face-landmarks.FaceLandmarkDescriptions.landmark_avg
    (snet.face-landmarks.MkFaceLandmarkDescriptions
     $landmark_model
     $landmark_description
     $landmark_avg)) $landmark_avg)

;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkModels ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.FaceLandmarkModels type
(: snet.face-landmarks.FaceLandmarkModels Type)

;; Define snet.face-landmarks.FaceLandmarkModels constuctor
(: snet.face-landmarks.MkFaceLandmarkModels
   (->
    snet.face-landmarks.FaceLandmarkDescriptions ; model
    snet.face-landmarks.FaceLandmarkModels))

;; Define snet.face-landmarks.FaceLandmarkModels access functions

;; Define snet.face-landmarks.FaceLandmarkModels.model
(: snet.face-landmarks.FaceLandmarkModels.model (-> snet.face-landmarks.FaceLandmarkModels snet.face-landmarks.FaceLandmarkDescriptions))
(= (snet.face-landmarks.FaceLandmarkModels.model
    (snet.face-landmarks.MkFaceLandmarkModels
     $model)) $model)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: face_landmarks.proto
;; Protobuf syntax: proto3
;; Prefix: snet.face-landmarks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkHeader ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.FaceLandmarkHeader type
(: snet.face-landmarks.FaceLandmarkHeader Type)

;; Define snet.face-landmarks.FaceLandmarkHeader constuctor
(: snet.face-landmarks.MkFaceLandmarkHeader
   (->
    String ; landmark_model
    snet.face-landmarks.FaceDetections ; faces
    snet.face-landmarks.FaceLandmarkHeader))

;; Define snet.face-landmarks.FaceLandmarkHeader access functions

;; Define snet.face-landmarks.FaceLandmarkHeader.landmark_model
(: snet.face-landmarks.FaceLandmarkHeader.landmark_model (-> snet.face-landmarks.FaceLandmarkHeader String))
(= (snet.face-landmarks.FaceLandmarkHeader.landmark_model
    (snet.face-landmarks.MkFaceLandmarkHeader
     $landmark_model
     $faces)) $landmark_model)

;; Define snet.face-landmarks.FaceLandmarkHeader.faces
(: snet.face-landmarks.FaceLandmarkHeader.faces (-> snet.face-landmarks.FaceLandmarkHeader snet.face-landmarks.FaceDetections))
(= (snet.face-landmarks.FaceLandmarkHeader.faces
    (snet.face-landmarks.MkFaceLandmarkHeader
     $landmark_model
     $faces)) $faces)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.FaceLandmarkRequest type
(: snet.face-landmarks.FaceLandmarkRequest Type)

;; Define snet.face-landmarks.FaceLandmarkRequest constuctor
(: snet.face-landmarks.MkFaceLandmarkRequest
   (->
    snet.face-landmarks.FaceLandmarkHeader ; header
    snet.face-landmarks.ImageRGB ; image_chunk
    snet.face-landmarks.FaceLandmarkRequest))

;; Define snet.face-landmarks.FaceLandmarkRequest access functions

;; Define snet.face-landmarks.FaceLandmarkRequest.header
(: snet.face-landmarks.FaceLandmarkRequest.header (-> snet.face-landmarks.FaceLandmarkRequest snet.face-landmarks.FaceLandmarkHeader))
(= (snet.face-landmarks.FaceLandmarkRequest.header
    (snet.face-landmarks.MkFaceLandmarkRequest
     $header
     $image_chunk)) $header)

;; Define snet.face-landmarks.FaceLandmarkRequest.image_chunk
(: snet.face-landmarks.FaceLandmarkRequest.image_chunk (-> snet.face-landmarks.FaceLandmarkRequest snet.face-landmarks.ImageRGB))
(= (snet.face-landmarks.FaceLandmarkRequest.image_chunk
    (snet.face-landmarks.MkFaceLandmarkRequest
     $header
     $image_chunk)) $image_chunk)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FaceLandmarkResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.FaceLandmarkResponse type
(: snet.face-landmarks.FaceLandmarkResponse Type)

;; Define snet.face-landmarks.FaceLandmarkResponse constuctor
(: snet.face-landmarks.MkFaceLandmarkResponse
   (->
    snet.face-landmarks.FaceLandmarks ; landmarked_faces
    snet.face-landmarks.FaceLandmarkResponse))

;; Define snet.face-landmarks.FaceLandmarkResponse access functions

;; Define snet.face-landmarks.FaceLandmarkResponse.landmarked_faces
(: snet.face-landmarks.FaceLandmarkResponse.landmarked_faces (-> snet.face-landmarks.FaceLandmarkResponse snet.face-landmarks.FaceLandmarks))
(= (snet.face-landmarks.FaceLandmarkResponse.landmarked_faces
    (snet.face-landmarks.MkFaceLandmarkResponse
     $landmarked_faces)) $landmarked_faces)

;;;;;;;;;;;
;; Empty ;;
;;;;;;;;;;;

;; Define snet.face-landmarks.Empty type
(: snet.face-landmarks.Empty Type)

;; Define snet.face-landmarks.Empty constuctor
(: snet.face-landmarks.MkEmpty
   (->
    snet.face-landmarks.Empty))

;; Define snet.face-landmarks.Empty access functions

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; FaceLandmark ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.face-landmarks.GetLandmarks service method
(: snet.face-landmarks.GetLandmarks (-> snet.face-landmarks.FaceLandmarkRequest snet.face-landmarks.FaceLandmarkResponse))

;; Define snet.face-landmarks.GetLandmarkModels service method
(: snet.face-landmarks.GetLandmarkModels (-> snet.face-landmarks.Empty snet.face-landmarks.FaceLandmarkModels))



;; ServiceID definition of snet.emotion-recognition-service"
(: snet.emotion-recognition-service (ServiceID snet))

;; Service metadata of snet.emotion-recognition-service
(= (service snet.emotion-recognition-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Emotion Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmcdTYvTxEJrv18Ui1vo1wNDisw8BMoFRMQyM13rz1ok5B"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/emotion-recognition-service/users_guide/emotion-recognition-service.html"
           ; url content
           null
           ; description
           "<div>Want to identify a person's emotional state in a given image? Use this service to do just that, using facial recognition.</div>"
           ; short_description
           "Want to identify a person's emotional state in a given image? Use this service to do just that, using facial recognition.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "face-analysis" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: EmotionService.proto
;; Protobuf syntax: proto3
;; Prefix: snet.emotion-recognition-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; BoundingBox ;;
;;;;;;;;;;;;;;;;;

;; Define snet.emotion-recognition-service.BoundingBox type
(: snet.emotion-recognition-service.BoundingBox Type)

;; Define snet.emotion-recognition-service.BoundingBox constuctor
(: snet.emotion-recognition-service.MkBoundingBox
   (->
    Int32 ; x
    Int32 ; y
    Int32 ; w
    Int32 ; h
    snet.emotion-recognition-service.BoundingBox))

;; Define snet.emotion-recognition-service.BoundingBox access functions

;; Define snet.emotion-recognition-service.BoundingBox.x
(: snet.emotion-recognition-service.BoundingBox.x (-> snet.emotion-recognition-service.BoundingBox Int32))
(= (snet.emotion-recognition-service.BoundingBox.x
    (snet.emotion-recognition-service.MkBoundingBox
     $x
     $y
     $w
     $h)) $x)

;; Define snet.emotion-recognition-service.BoundingBox.y
(: snet.emotion-recognition-service.BoundingBox.y (-> snet.emotion-recognition-service.BoundingBox Int32))
(= (snet.emotion-recognition-service.BoundingBox.y
    (snet.emotion-recognition-service.MkBoundingBox
     $x
     $y
     $w
     $h)) $y)

;; Define snet.emotion-recognition-service.BoundingBox.w
(: snet.emotion-recognition-service.BoundingBox.w (-> snet.emotion-recognition-service.BoundingBox Int32))
(= (snet.emotion-recognition-service.BoundingBox.w
    (snet.emotion-recognition-service.MkBoundingBox
     $x
     $y
     $w
     $h)) $w)

;; Define snet.emotion-recognition-service.BoundingBox.h
(: snet.emotion-recognition-service.BoundingBox.h (-> snet.emotion-recognition-service.BoundingBox Int32))
(= (snet.emotion-recognition-service.BoundingBox.h
    (snet.emotion-recognition-service.MkBoundingBox
     $x
     $y
     $w
     $h)) $h)

;;;;;;;;;;
;; Face ;;
;;;;;;;;;;

;; Define snet.emotion-recognition-service.Face type
(: snet.emotion-recognition-service.Face Type)

;; Define snet.emotion-recognition-service.Face constuctor
(: snet.emotion-recognition-service.MkFace
   (->
    String ; emotion
    snet.emotion-recognition-service.BoundingBox ; bounding_box
    snet.emotion-recognition-service.Face))

;; Define snet.emotion-recognition-service.Face access functions

;; Define snet.emotion-recognition-service.Face.emotion
(: snet.emotion-recognition-service.Face.emotion (-> snet.emotion-recognition-service.Face String))
(= (snet.emotion-recognition-service.Face.emotion
    (snet.emotion-recognition-service.MkFace
     $emotion
     $bounding_box)) $emotion)

;; Define snet.emotion-recognition-service.Face.bounding_box
(: snet.emotion-recognition-service.Face.bounding_box (-> snet.emotion-recognition-service.Face snet.emotion-recognition-service.BoundingBox))
(= (snet.emotion-recognition-service.Face.bounding_box
    (snet.emotion-recognition-service.MkFace
     $emotion
     $bounding_box)) $bounding_box)

;;;;;;;;;;;;;;;;;;;;;;
;; RecognizeRequest ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.emotion-recognition-service.RecognizeRequest type
(: snet.emotion-recognition-service.RecognizeRequest Type)

;; Define snet.emotion-recognition-service.RecognizeRequest constuctor
(: snet.emotion-recognition-service.MkRecognizeRequest
   (->
    String ; image_type
    String ; image
    snet.emotion-recognition-service.RecognizeRequest))

;; Define snet.emotion-recognition-service.RecognizeRequest access functions

;; Define snet.emotion-recognition-service.RecognizeRequest.image_type
(: snet.emotion-recognition-service.RecognizeRequest.image_type (-> snet.emotion-recognition-service.RecognizeRequest String))
(= (snet.emotion-recognition-service.RecognizeRequest.image_type
    (snet.emotion-recognition-service.MkRecognizeRequest
     $image_type
     $image)) $image_type)

;; Define snet.emotion-recognition-service.RecognizeRequest.image
(: snet.emotion-recognition-service.RecognizeRequest.image (-> snet.emotion-recognition-service.RecognizeRequest String))
(= (snet.emotion-recognition-service.RecognizeRequest.image
    (snet.emotion-recognition-service.MkRecognizeRequest
     $image_type
     $image)) $image)

;;;;;;;;;;;;;;;;;;;;;;;
;; RecognizeResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.emotion-recognition-service.RecognizeResponse type
(: snet.emotion-recognition-service.RecognizeResponse Type)

;; Define snet.emotion-recognition-service.RecognizeResponse constuctor
(: snet.emotion-recognition-service.MkRecognizeResponse
   (->
    snet.emotion-recognition-service.Face ; faces
    snet.emotion-recognition-service.RecognizeResponse))

;; Define snet.emotion-recognition-service.RecognizeResponse access functions

;; Define snet.emotion-recognition-service.RecognizeResponse.faces
(: snet.emotion-recognition-service.RecognizeResponse.faces (-> snet.emotion-recognition-service.RecognizeResponse snet.emotion-recognition-service.Face))
(= (snet.emotion-recognition-service.RecognizeResponse.faces
    (snet.emotion-recognition-service.MkRecognizeResponse
     $faces)) $faces)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;
;; EmotionRecognition ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.emotion-recognition-service.classify service method
(: snet.emotion-recognition-service.classify (-> snet.emotion-recognition-service.RecognizeRequest snet.emotion-recognition-service.RecognizeResponse))



;; ServiceID definition of snet.image-retrieval-service"
(: snet.image-retrieval-service (ServiceID snet))

;; Service metadata of snet.image-retrieval-service
(= (service snet.image-retrieval-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Image Retrieval"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmNzuVJ2YeY4Ge7arcf1tbHDrcAYP5cUMbAEuvE4FhXtzy"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/image-retrieval-service/users_guide/image-retrieval-service.html"
           ; url content
           null
           ; description
           "<div>Upload an image and receive six of the closest matches found within the open Google image dataset containing ~9 million images annotated with labels and bounding boxes.</div>"
           ; short_description
           "Upload an image and receive six of the closest matches found within the open Google image dataset containing ~9 million images annotated with labels and bounding boxes.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "image" (Cons "retrieval" (Cons "similarity" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: image_retrival.proto
;; Protobuf syntax: proto3
;; Prefix: snet.image-retrieval-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; ImageFileIn ;;
;;;;;;;;;;;;;;;;;

;; Define snet.image-retrieval-service.ImageFileIn type
(: snet.image-retrieval-service.ImageFileIn Type)

;; Define snet.image-retrieval-service.ImageFileIn constuctor
(: snet.image-retrieval-service.MkImageFileIn
   (->
    String ; image
    String ; similarity
    snet.image-retrieval-service.ImageFileIn))

;; Define snet.image-retrieval-service.ImageFileIn access functions

;; Define snet.image-retrieval-service.ImageFileIn.image
(: snet.image-retrieval-service.ImageFileIn.image (-> snet.image-retrieval-service.ImageFileIn String))
(= (snet.image-retrieval-service.ImageFileIn.image
    (snet.image-retrieval-service.MkImageFileIn
     $image
     $similarity)) $image)

;; Define snet.image-retrieval-service.ImageFileIn.similarity
(: snet.image-retrieval-service.ImageFileIn.similarity (-> snet.image-retrieval-service.ImageFileIn String))
(= (snet.image-retrieval-service.ImageFileIn.similarity
    (snet.image-retrieval-service.MkImageFileIn
     $image
     $similarity)) $similarity)

;;;;;;;;;;;;;;;;;;
;; ImageFileOut ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.image-retrieval-service.ImageFileOut type
(: snet.image-retrieval-service.ImageFileOut Type)

;; Define snet.image-retrieval-service.ImageFileOut constuctor
(: snet.image-retrieval-service.MkImageFileOut
   (->
    String ; imageOut1
    String ; imageOut2
    String ; imageOut3
    String ; imageOut4
    String ; imageOut5
    snet.image-retrieval-service.ImageFileOut))

;; Define snet.image-retrieval-service.ImageFileOut access functions

;; Define snet.image-retrieval-service.ImageFileOut.imageOut1
(: snet.image-retrieval-service.ImageFileOut.imageOut1 (-> snet.image-retrieval-service.ImageFileOut String))
(= (snet.image-retrieval-service.ImageFileOut.imageOut1
    (snet.image-retrieval-service.MkImageFileOut
     $imageOut1
     $imageOut2
     $imageOut3
     $imageOut4
     $imageOut5)) $imageOut1)

;; Define snet.image-retrieval-service.ImageFileOut.imageOut2
(: snet.image-retrieval-service.ImageFileOut.imageOut2 (-> snet.image-retrieval-service.ImageFileOut String))
(= (snet.image-retrieval-service.ImageFileOut.imageOut2
    (snet.image-retrieval-service.MkImageFileOut
     $imageOut1
     $imageOut2
     $imageOut3
     $imageOut4
     $imageOut5)) $imageOut2)

;; Define snet.image-retrieval-service.ImageFileOut.imageOut3
(: snet.image-retrieval-service.ImageFileOut.imageOut3 (-> snet.image-retrieval-service.ImageFileOut String))
(= (snet.image-retrieval-service.ImageFileOut.imageOut3
    (snet.image-retrieval-service.MkImageFileOut
     $imageOut1
     $imageOut2
     $imageOut3
     $imageOut4
     $imageOut5)) $imageOut3)

;; Define snet.image-retrieval-service.ImageFileOut.imageOut4
(: snet.image-retrieval-service.ImageFileOut.imageOut4 (-> snet.image-retrieval-service.ImageFileOut String))
(= (snet.image-retrieval-service.ImageFileOut.imageOut4
    (snet.image-retrieval-service.MkImageFileOut
     $imageOut1
     $imageOut2
     $imageOut3
     $imageOut4
     $imageOut5)) $imageOut4)

;; Define snet.image-retrieval-service.ImageFileOut.imageOut5
(: snet.image-retrieval-service.ImageFileOut.imageOut5 (-> snet.image-retrieval-service.ImageFileOut String))
(= (snet.image-retrieval-service.ImageFileOut.imageOut5
    (snet.image-retrieval-service.MkImageFileOut
     $imageOut1
     $imageOut2
     $imageOut3
     $imageOut4
     $imageOut5)) $imageOut5)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; SimilarImage ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.image-retrieval-service.FindSimilar service method
(: snet.image-retrieval-service.FindSimilar (-> snet.image-retrieval-service.ImageFileIn snet.image-retrieval-service.ImageFileOut))



;; ServiceID definition of snet.named-entity-disambiguation"
(: snet.named-entity-disambiguation (ServiceID snet))

;; Service metadata of snet.named-entity-disambiguation
(= (service snet.named-entity-disambiguation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Entity Disambiguation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmd21xqgX8fkU4fD2bFMNG2Q86wAB4GmGBekQfLoiLtXYv"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/nlp-services-misc/users_guide/named-entity-disambiguation-service.html"
           ; url content
           null
           ; description
           "<div>Provide further clarity regarding entities named within a piece of text. In the sentence \"Paris is the capital of France” we would want to link \"Paris\" to the city, Paris.</div>"
           ; short_description
           "Provide further clarity regarding entities named within a piece of text. In the sentence \"Paris is the capital of France” we would want to link \"Paris\" to the city, Paris.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "english" (Cons "ned" (Cons "nlp" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: NamedEntityDisambiguation.proto
;; Protobuf syntax: proto3
;; Prefix: snet.named-entity-disambiguation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.named-entity-disambiguation.Input type
(: snet.named-entity-disambiguation.Input Type)

;; Define snet.named-entity-disambiguation.Input constuctor
(: snet.named-entity-disambiguation.MkInput
   (->
    String ; input
    snet.named-entity-disambiguation.Input))

;; Define snet.named-entity-disambiguation.Input access functions

;; Define snet.named-entity-disambiguation.Input.input
(: snet.named-entity-disambiguation.Input.input (-> snet.named-entity-disambiguation.Input String))
(= (snet.named-entity-disambiguation.Input.input
    (snet.named-entity-disambiguation.MkInput
     $input)) $input)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.named-entity-disambiguation.Output type
(: snet.named-entity-disambiguation.Output Type)

;; Define snet.named-entity-disambiguation.Output constuctor
(: snet.named-entity-disambiguation.MkOutput
   (->
    snet.named-entity-disambiguation.Disambiguation ; disambiguation
    snet.named-entity-disambiguation.Output))

;; Define snet.named-entity-disambiguation.Output access functions

;; Define snet.named-entity-disambiguation.Output.disambiguation
(: snet.named-entity-disambiguation.Output.disambiguation (-> snet.named-entity-disambiguation.Output snet.named-entity-disambiguation.Disambiguation))
(= (snet.named-entity-disambiguation.Output.disambiguation
    (snet.named-entity-disambiguation.MkOutput
     $disambiguation)) $disambiguation)

;;;;;;;;;;;;;;;;;;;;
;; Disambiguation ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.named-entity-disambiguation.Disambiguation type
(: snet.named-entity-disambiguation.Disambiguation Type)

;; Define snet.named-entity-disambiguation.Disambiguation constuctor
(: snet.named-entity-disambiguation.MkDisambiguation
   (->
    String ; named_entity
    String ; disambiguation_word
    String ; disambiguation_link
    snet.named-entity-disambiguation.Disambiguation))

;; Define snet.named-entity-disambiguation.Disambiguation access functions

;; Define snet.named-entity-disambiguation.Disambiguation.named_entity
(: snet.named-entity-disambiguation.Disambiguation.named_entity (-> snet.named-entity-disambiguation.Disambiguation String))
(= (snet.named-entity-disambiguation.Disambiguation.named_entity
    (snet.named-entity-disambiguation.MkDisambiguation
     $named_entity
     $disambiguation_word
     $disambiguation_link)) $named_entity)

;; Define snet.named-entity-disambiguation.Disambiguation.disambiguation_word
(: snet.named-entity-disambiguation.Disambiguation.disambiguation_word (-> snet.named-entity-disambiguation.Disambiguation String))
(= (snet.named-entity-disambiguation.Disambiguation.disambiguation_word
    (snet.named-entity-disambiguation.MkDisambiguation
     $named_entity
     $disambiguation_word
     $disambiguation_link)) $disambiguation_word)

;; Define snet.named-entity-disambiguation.Disambiguation.disambiguation_link
(: snet.named-entity-disambiguation.Disambiguation.disambiguation_link (-> snet.named-entity-disambiguation.Disambiguation String))
(= (snet.named-entity-disambiguation.Disambiguation.disambiguation_link
    (snet.named-entity-disambiguation.MkDisambiguation
     $named_entity
     $disambiguation_word
     $disambiguation_link)) $disambiguation_link)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; Disambiguate ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.named-entity-disambiguation.named_entity_disambiguation service method
(: snet.named-entity-disambiguation.named_entity_disambiguation (-> snet.named-entity-disambiguation.Input snet.named-entity-disambiguation.Output))



;; ServiceID definition of snet.s2vt-video-captioning"
(: snet.s2vt-video-captioning (ServiceID snet))

;; Service metadata of snet.s2vt-video-captioning
(= (service snet.s2vt-video-captioning)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Caption Videos"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmQAULV47ePWkg7zJKwSHgCyrBeoWy4mWHv1hosPz8d2pU"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/s2vt-video-captioning.html"
           ; url content
           null
           ; description
           "<div>Using the Sequence to Sequence Video to Text architecture based on LSTM recurrent neural networks, generate a textual summary for a provided video. <br></br>The service receives a video and uses it as an input for a VGG16 model that generates features of each frame. These frames are passed as input for a second model (S2VT_VGG16) that outputs a caption for all features.<br></br>The service makes predictions using computer vision and machine learning techniques, and outputs its best guess using a SubRip Subtitle format to describe an action on the specified time interval from a video (the service also indicates its confidence in the predictions).<br></br>The user must provide the following inputs in order to start the service and get a response:<br></br>Inputs:<br></br>url: A YouTube video URL.<br></br>start_time_sec: Start time position, in seconds.<br></br>stop_time_sec: Stop time position, in seconds.<br></br>The time interval (stop-start) must be <= 20 seconds.</div>"
           ; short_description
           "Using the Sequence to Sequence Video to Text architecture based on LSTM recurrent neural networks, generate a textual summary for a provided video.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "captioning" (Cons "video" (Cons "s2vt" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: video_cap.proto
;; Protobuf syntax: proto3
;; Prefix: snet.s2vt-video-captioning
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.s2vt-video-captioning.Input type
(: snet.s2vt-video-captioning.Input Type)

;; Define snet.s2vt-video-captioning.Input constuctor
(: snet.s2vt-video-captioning.MkInput
   (->
    String ; url
    String ; start_time_sec
    String ; stop_time_sec
    snet.s2vt-video-captioning.Input))

;; Define snet.s2vt-video-captioning.Input access functions

;; Define snet.s2vt-video-captioning.Input.url
(: snet.s2vt-video-captioning.Input.url (-> snet.s2vt-video-captioning.Input String))
(= (snet.s2vt-video-captioning.Input.url
    (snet.s2vt-video-captioning.MkInput
     $url
     $start_time_sec
     $stop_time_sec)) $url)

;; Define snet.s2vt-video-captioning.Input.start_time_sec
(: snet.s2vt-video-captioning.Input.start_time_sec (-> snet.s2vt-video-captioning.Input String))
(= (snet.s2vt-video-captioning.Input.start_time_sec
    (snet.s2vt-video-captioning.MkInput
     $url
     $start_time_sec
     $stop_time_sec)) $start_time_sec)

;; Define snet.s2vt-video-captioning.Input.stop_time_sec
(: snet.s2vt-video-captioning.Input.stop_time_sec (-> snet.s2vt-video-captioning.Input String))
(= (snet.s2vt-video-captioning.Input.stop_time_sec
    (snet.s2vt-video-captioning.MkInput
     $url
     $start_time_sec
     $stop_time_sec)) $stop_time_sec)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.s2vt-video-captioning.Output type
(: snet.s2vt-video-captioning.Output Type)

;; Define snet.s2vt-video-captioning.Output constuctor
(: snet.s2vt-video-captioning.MkOutput
   (->
    String ; value
    snet.s2vt-video-captioning.Output))

;; Define snet.s2vt-video-captioning.Output access functions

;; Define snet.s2vt-video-captioning.Output.value
(: snet.s2vt-video-captioning.Output.value (-> snet.s2vt-video-captioning.Output String))
(= (snet.s2vt-video-captioning.Output.value
    (snet.s2vt-video-captioning.MkOutput
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; VideoCaptioning ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define snet.s2vt-video-captioning.video_cap service method
(: snet.s2vt-video-captioning.video_cap (-> snet.s2vt-video-captioning.Input snet.s2vt-video-captioning.Output))



;; ServiceID definition of snet.style-transfer"
(: snet.style-transfer (ServiceID snet))

;; Service metadata of snet.style-transfer
(= (service snet.style-transfer)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Style Transfer"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmdZgCk4Tj4UkVoGrQt4YoxTGbakdnstVzs6qufV8E2vFb"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/style-transfer-service/blob/master/README.md"
           ; url content
           null
           ; description
           "<div>Provide two images and use this service to transfer the artistic-style of one image to the second image provided.<br></br>This service uses convolutional neural networks and is part of SingularityNET's third party services, originally implemented by xunhuang1995.</div>"
           ; short_description
           "Provide two images and use this service to transfer the artistic-style of one image to the second image provided.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "styleTransfer" (Cons "artistic" (Cons "image" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: style_transfer.proto
;; Protobuf syntax: proto3
;; Prefix: snet.style-transfer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TransferImageStyleRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.style-transfer.TransferImageStyleRequest type
(: snet.style-transfer.TransferImageStyleRequest Type)

;; Define snet.style-transfer.TransferImageStyleRequest constuctor
(: snet.style-transfer.MkTransferImageStyleRequest
   (->
    String ; content
    String ; style
    Int32 ; contentSize
    Int32 ; styleSize
    Bool ; preserveColor
    Float ; alpha
    Bool ; crop
    String ; saveExt
    snet.style-transfer.TransferImageStyleRequest))

;; Define snet.style-transfer.TransferImageStyleRequest access functions

;; Define snet.style-transfer.TransferImageStyleRequest.content
(: snet.style-transfer.TransferImageStyleRequest.content (-> snet.style-transfer.TransferImageStyleRequest String))
(= (snet.style-transfer.TransferImageStyleRequest.content
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $content)

;; Define snet.style-transfer.TransferImageStyleRequest.style
(: snet.style-transfer.TransferImageStyleRequest.style (-> snet.style-transfer.TransferImageStyleRequest String))
(= (snet.style-transfer.TransferImageStyleRequest.style
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $style)

;; Define snet.style-transfer.TransferImageStyleRequest.contentSize
(: snet.style-transfer.TransferImageStyleRequest.contentSize (-> snet.style-transfer.TransferImageStyleRequest Int32))
(= (snet.style-transfer.TransferImageStyleRequest.contentSize
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $contentSize)

;; Define snet.style-transfer.TransferImageStyleRequest.styleSize
(: snet.style-transfer.TransferImageStyleRequest.styleSize (-> snet.style-transfer.TransferImageStyleRequest Int32))
(= (snet.style-transfer.TransferImageStyleRequest.styleSize
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $styleSize)

;; Define snet.style-transfer.TransferImageStyleRequest.preserveColor
(: snet.style-transfer.TransferImageStyleRequest.preserveColor (-> snet.style-transfer.TransferImageStyleRequest Bool))
(= (snet.style-transfer.TransferImageStyleRequest.preserveColor
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $preserveColor)

;; Define snet.style-transfer.TransferImageStyleRequest.alpha
(: snet.style-transfer.TransferImageStyleRequest.alpha (-> snet.style-transfer.TransferImageStyleRequest Float))
(= (snet.style-transfer.TransferImageStyleRequest.alpha
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $alpha)

;; Define snet.style-transfer.TransferImageStyleRequest.crop
(: snet.style-transfer.TransferImageStyleRequest.crop (-> snet.style-transfer.TransferImageStyleRequest Bool))
(= (snet.style-transfer.TransferImageStyleRequest.crop
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $crop)

;; Define snet.style-transfer.TransferImageStyleRequest.saveExt
(: snet.style-transfer.TransferImageStyleRequest.saveExt (-> snet.style-transfer.TransferImageStyleRequest String))
(= (snet.style-transfer.TransferImageStyleRequest.saveExt
    (snet.style-transfer.MkTransferImageStyleRequest
     $content
     $style
     $contentSize
     $styleSize
     $preserveColor
     $alpha
     $crop
     $saveExt)) $saveExt)

;;;;;;;;;;;
;; Image ;;
;;;;;;;;;;;

;; Define snet.style-transfer.Image type
(: snet.style-transfer.Image Type)

;; Define snet.style-transfer.Image constuctor
(: snet.style-transfer.MkImage
   (->
    String ; data
    snet.style-transfer.Image))

;; Define snet.style-transfer.Image access functions

;; Define snet.style-transfer.Image.data
(: snet.style-transfer.Image.data (-> snet.style-transfer.Image String))
(= (snet.style-transfer.Image.data
    (snet.style-transfer.MkImage
     $data)) $data)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; StyleTransfer ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.style-transfer.transfer_image_style service method
(: snet.style-transfer.transfer_image_style (-> snet.style-transfer.TransferImageStyleRequest snet.style-transfer.Image))



;; ServiceID definition of snet.time-series-anomaly-discovery"
(: snet.time-series-anomaly-discovery (ServiceID snet))

;; Service metadata of snet.time-series-anomaly-discovery
(= (service snet.time-series-anomaly-discovery)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Time Series Anomaly"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmNbkxu9kwfC5paNbVAVJEvK5cRYYHTUVSJHYTJzctRDem"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/time-series-anomaly-discovery/blob/master/docs/usersguide.md"
           ; url content
           null
           ; description
           "<div>The deployed method performs a transformation on the received time series samples, reducing its size, and grouping similar regions into grammar rules clusters. Those clusters are used to build a grammar rules density curve that is used to detect anomalies in the original time series.<br></br>The user needs to specify a URL containing a valid time series CSV file. The service provides a simple user interface to receive this URL.</div>"
           ; short_description
           "Use this service to find, within a time-series, sub-intervals that have anomalous behavior.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "time-series" (Cons "compression" (Cons "discovery" (Cons "anomaly" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: timeSeriesAnomalyDetection.proto
;; Protobuf syntax: proto3
;; Protobuf package: timeSeriesAnomalyDetection
;; Prefix: snet.time-series-anomaly-discovery
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; InputParameters ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define snet.time-series-anomaly-discovery.InputParameters type
(: snet.time-series-anomaly-discovery.InputParameters Type)

;; Define snet.time-series-anomaly-discovery.InputParameters constuctor
(: snet.time-series-anomaly-discovery.MkInputParameters
   (->
    String ; timeseries
    String ; alphabet
    String ; slidingwindowsize
    String ; paasize
    String ; debugflag
    snet.time-series-anomaly-discovery.InputParameters))

;; Define snet.time-series-anomaly-discovery.InputParameters access functions

;; Define snet.time-series-anomaly-discovery.InputParameters.timeseries
(: snet.time-series-anomaly-discovery.InputParameters.timeseries (-> snet.time-series-anomaly-discovery.InputParameters String))
(= (snet.time-series-anomaly-discovery.InputParameters.timeseries
    (snet.time-series-anomaly-discovery.MkInputParameters
     $timeseries
     $alphabet
     $slidingwindowsize
     $paasize
     $debugflag)) $timeseries)

;; Define snet.time-series-anomaly-discovery.InputParameters.alphabet
(: snet.time-series-anomaly-discovery.InputParameters.alphabet (-> snet.time-series-anomaly-discovery.InputParameters String))
(= (snet.time-series-anomaly-discovery.InputParameters.alphabet
    (snet.time-series-anomaly-discovery.MkInputParameters
     $timeseries
     $alphabet
     $slidingwindowsize
     $paasize
     $debugflag)) $alphabet)

;; Define snet.time-series-anomaly-discovery.InputParameters.slidingwindowsize
(: snet.time-series-anomaly-discovery.InputParameters.slidingwindowsize (-> snet.time-series-anomaly-discovery.InputParameters String))
(= (snet.time-series-anomaly-discovery.InputParameters.slidingwindowsize
    (snet.time-series-anomaly-discovery.MkInputParameters
     $timeseries
     $alphabet
     $slidingwindowsize
     $paasize
     $debugflag)) $slidingwindowsize)

;; Define snet.time-series-anomaly-discovery.InputParameters.paasize
(: snet.time-series-anomaly-discovery.InputParameters.paasize (-> snet.time-series-anomaly-discovery.InputParameters String))
(= (snet.time-series-anomaly-discovery.InputParameters.paasize
    (snet.time-series-anomaly-discovery.MkInputParameters
     $timeseries
     $alphabet
     $slidingwindowsize
     $paasize
     $debugflag)) $paasize)

;; Define snet.time-series-anomaly-discovery.InputParameters.debugflag
(: snet.time-series-anomaly-discovery.InputParameters.debugflag (-> snet.time-series-anomaly-discovery.InputParameters String))
(= (snet.time-series-anomaly-discovery.InputParameters.debugflag
    (snet.time-series-anomaly-discovery.MkInputParameters
     $timeseries
     $alphabet
     $slidingwindowsize
     $paasize
     $debugflag)) $debugflag)

;;;;;;;;;;;;;;;;;;
;; OutputString ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.time-series-anomaly-discovery.OutputString type
(: snet.time-series-anomaly-discovery.OutputString Type)

;; Define snet.time-series-anomaly-discovery.OutputString constuctor
(: snet.time-series-anomaly-discovery.MkOutputString
   (->
    String ; timeseries
    String ; density
    String ; normalized
    String ; inverted
    snet.time-series-anomaly-discovery.OutputString))

;; Define snet.time-series-anomaly-discovery.OutputString access functions

;; Define snet.time-series-anomaly-discovery.OutputString.timeseries
(: snet.time-series-anomaly-discovery.OutputString.timeseries (-> snet.time-series-anomaly-discovery.OutputString String))
(= (snet.time-series-anomaly-discovery.OutputString.timeseries
    (snet.time-series-anomaly-discovery.MkOutputString
     $timeseries
     $density
     $normalized
     $inverted)) $timeseries)

;; Define snet.time-series-anomaly-discovery.OutputString.density
(: snet.time-series-anomaly-discovery.OutputString.density (-> snet.time-series-anomaly-discovery.OutputString String))
(= (snet.time-series-anomaly-discovery.OutputString.density
    (snet.time-series-anomaly-discovery.MkOutputString
     $timeseries
     $density
     $normalized
     $inverted)) $density)

;; Define snet.time-series-anomaly-discovery.OutputString.normalized
(: snet.time-series-anomaly-discovery.OutputString.normalized (-> snet.time-series-anomaly-discovery.OutputString String))
(= (snet.time-series-anomaly-discovery.OutputString.normalized
    (snet.time-series-anomaly-discovery.MkOutputString
     $timeseries
     $density
     $normalized
     $inverted)) $normalized)

;; Define snet.time-series-anomaly-discovery.OutputString.inverted
(: snet.time-series-anomaly-discovery.OutputString.inverted (-> snet.time-series-anomaly-discovery.OutputString String))
(= (snet.time-series-anomaly-discovery.OutputString.inverted
    (snet.time-series-anomaly-discovery.MkOutputString
     $timeseries
     $density
     $normalized
     $inverted)) $inverted)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; EfficientRuleDensityBasedAnomalyDetection ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.time-series-anomaly-discovery.detectAnomalies service method
(: snet.time-series-anomaly-discovery.detectAnomalies (-> snet.time-series-anomaly-discovery.InputParameters snet.time-series-anomaly-discovery.OutputString))



;; ServiceID definition of snet.translation"
(: snet.translation (ServiceID snet))

;; Service metadata of snet.translation
(= (service snet.translation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "German English Translation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUsR2wvvWuV684hG1kxT24gMjZXDPcQ6jVakn2RcJsEea"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/nlp-services"
           ; url content
           null
           ; description
           "<div>Translate a sentence or word from English to German, or vice versa. We use OpenNMT-py and Google's Transformer network.</div>"
           ; short_description
           "Translate a sentence or word from English to German, or vice versa. OpenNMT-py and Google’s Transformer network are used to carry out the translation.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "translation" (Cons "nlp" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: translate.proto
;; Protobuf syntax: proto3
;; Prefix: snet.translation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Request ;;
;;;;;;;;;;;;;

;; Define snet.translation.Request type
(: snet.translation.Request Type)

;; Define snet.translation.Request constuctor
(: snet.translation.MkRequest
   (->
    String ; text
    String ; source_language
    String ; target_language
    snet.translation.Request))

;; Define snet.translation.Request access functions

;; Define snet.translation.Request.text
(: snet.translation.Request.text (-> snet.translation.Request String))
(= (snet.translation.Request.text
    (snet.translation.MkRequest
     $text
     $source_language
     $target_language)) $text)

;; Define snet.translation.Request.source_language
(: snet.translation.Request.source_language (-> snet.translation.Request String))
(= (snet.translation.Request.source_language
    (snet.translation.MkRequest
     $text
     $source_language
     $target_language)) $source_language)

;; Define snet.translation.Request.target_language
(: snet.translation.Request.target_language (-> snet.translation.Request String))
(= (snet.translation.Request.target_language
    (snet.translation.MkRequest
     $text
     $source_language
     $target_language)) $target_language)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define snet.translation.Result type
(: snet.translation.Result Type)

;; Define snet.translation.Result constuctor
(: snet.translation.MkResult
   (->
    String ; translation
    snet.translation.Result))

;; Define snet.translation.Result access functions

;; Define snet.translation.Result.translation
(: snet.translation.Result.translation (-> snet.translation.Result String))
(= (snet.translation.Result.translation
    (snet.translation.MkResult
     $translation)) $translation)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; Translation ;;
;;;;;;;;;;;;;;;;;

;; Define snet.translation.translate service method
(: snet.translation.translate (-> snet.translation.Request snet.translation.Result))



;; ServiceID definition of snet.real-time-voice-cloning"
(: snet.real-time-voice-cloning (ServiceID snet))

;; Service metadata of snet.real-time-voice-cloning
(= (service snet.real-time-voice-cloning)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Real Time Voice Cloning"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmXtDTddxDFg5wWHmHhMTtPwBz5UVkRJetBVGMMu6VhNoH"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/real-time-voice-cloning.html"
           ; url content
           null
           ; description
           "<div>This service uses Real-Time-Voice-Cloning to clone a voice from 5 seconds audio to generate arbitrary speech in real-time.<br></br>The service receives an audio sample and a sentence in plain english text. It uses them as inputs for a pre-trained voice cloning models.</div>"
           ; short_description
           "This service uses Real-Time-Voice-Cloning to clone a voice from 5 seconds audio to generate arbitrary speech in real-time.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "cloning" (Cons "voice" (Cons "audio" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: voice_cloning.proto
;; Protobuf syntax: proto3
;; Prefix: snet.real-time-voice-cloning
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.real-time-voice-cloning.Input type
(: snet.real-time-voice-cloning.Input Type)

;; Define snet.real-time-voice-cloning.Input constuctor
(: snet.real-time-voice-cloning.MkInput
   (->
    String ; audio_url
    Bytes ; audio
    String ; sentence
    snet.real-time-voice-cloning.Input))

;; Define snet.real-time-voice-cloning.Input access functions

;; Define snet.real-time-voice-cloning.Input.audio_url
(: snet.real-time-voice-cloning.Input.audio_url (-> snet.real-time-voice-cloning.Input String))
(= (snet.real-time-voice-cloning.Input.audio_url
    (snet.real-time-voice-cloning.MkInput
     $audio_url
     $audio
     $sentence)) $audio_url)

;; Define snet.real-time-voice-cloning.Input.audio
(: snet.real-time-voice-cloning.Input.audio (-> snet.real-time-voice-cloning.Input Bytes))
(= (snet.real-time-voice-cloning.Input.audio
    (snet.real-time-voice-cloning.MkInput
     $audio_url
     $audio
     $sentence)) $audio)

;; Define snet.real-time-voice-cloning.Input.sentence
(: snet.real-time-voice-cloning.Input.sentence (-> snet.real-time-voice-cloning.Input String))
(= (snet.real-time-voice-cloning.Input.sentence
    (snet.real-time-voice-cloning.MkInput
     $audio_url
     $audio
     $sentence)) $sentence)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.real-time-voice-cloning.Output type
(: snet.real-time-voice-cloning.Output Type)

;; Define snet.real-time-voice-cloning.Output constuctor
(: snet.real-time-voice-cloning.MkOutput
   (->
    Bytes ; audio
    snet.real-time-voice-cloning.Output))

;; Define snet.real-time-voice-cloning.Output access functions

;; Define snet.real-time-voice-cloning.Output.audio
(: snet.real-time-voice-cloning.Output.audio (-> snet.real-time-voice-cloning.Output Bytes))
(= (snet.real-time-voice-cloning.Output.audio
    (snet.real-time-voice-cloning.MkOutput
     $audio)) $audio)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RealTimeVoiceCloning ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.real-time-voice-cloning.clone service method
(: snet.real-time-voice-cloning.clone (-> snet.real-time-voice-cloning.Input snet.real-time-voice-cloning.Output))



;; ServiceID definition of snet.fbprophet-forecast"
(: snet.fbprophet-forecast (ServiceID snet))

;; Service metadata of snet.fbprophet-forecast
(= (service snet.fbprophet-forecast)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "FB Prophet Forecast"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUhmNRPfxjJiT22bGBz6BPaRQKbzbF5z4mFCMQcBYXSAA"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/time-series-analysis/users_guide/generic/fbprophet-forecast.html"
           ; url content
           null
           ; description
           "<div>This service uses Prophet and Statsmodel to forecast and analyze points of a given time series.</div>"
           ; short_description
           "This service uses Prophet and Statsmodel to forecast and analyze points of a given time series.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "forecast" (Cons "series" (Cons "prophet" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: fbprophet_forecast.proto
;; Protobuf syntax: proto3
;; Protobuf package: series_decomposition
;; Prefix: snet.fbprophet-forecast
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.fbprophet-forecast.Input type
(: snet.fbprophet-forecast.Input Type)

;; Define snet.fbprophet-forecast.Input constuctor
(: snet.fbprophet-forecast.MkInput
   (->
    String ; url
    String ; ds
    Float ; y
    Int32 ; period
    Int32 ; points
    snet.fbprophet-forecast.Input))

;; Define snet.fbprophet-forecast.Input access functions

;; Define snet.fbprophet-forecast.Input.url
(: snet.fbprophet-forecast.Input.url (-> snet.fbprophet-forecast.Input String))
(= (snet.fbprophet-forecast.Input.url
    (snet.fbprophet-forecast.MkInput
     $url
     $ds
     $y
     $period
     $points)) $url)

;; Define snet.fbprophet-forecast.Input.ds
(: snet.fbprophet-forecast.Input.ds (-> snet.fbprophet-forecast.Input String))
(= (snet.fbprophet-forecast.Input.ds
    (snet.fbprophet-forecast.MkInput
     $url
     $ds
     $y
     $period
     $points)) $ds)

;; Define snet.fbprophet-forecast.Input.y
(: snet.fbprophet-forecast.Input.y (-> snet.fbprophet-forecast.Input Float))
(= (snet.fbprophet-forecast.Input.y
    (snet.fbprophet-forecast.MkInput
     $url
     $ds
     $y
     $period
     $points)) $y)

;; Define snet.fbprophet-forecast.Input.period
(: snet.fbprophet-forecast.Input.period (-> snet.fbprophet-forecast.Input Int32))
(= (snet.fbprophet-forecast.Input.period
    (snet.fbprophet-forecast.MkInput
     $url
     $ds
     $y
     $period
     $points)) $period)

;; Define snet.fbprophet-forecast.Input.points
(: snet.fbprophet-forecast.Input.points (-> snet.fbprophet-forecast.Input Int32))
(= (snet.fbprophet-forecast.Input.points
    (snet.fbprophet-forecast.MkInput
     $url
     $ds
     $y
     $period
     $points)) $points)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.fbprophet-forecast.Output type
(: snet.fbprophet-forecast.Output Type)

;; Define snet.fbprophet-forecast.Output constuctor
(: snet.fbprophet-forecast.MkOutput
   (->
    Float ; observed
    Float ; trend
    Float ; seasonal
    Float ; forecast
    String ; forecast_ds
    Float ; forecast_lower
    Float ; forecast_upper
    snet.fbprophet-forecast.Output))

;; Define snet.fbprophet-forecast.Output access functions

;; Define snet.fbprophet-forecast.Output.observed
(: snet.fbprophet-forecast.Output.observed (-> snet.fbprophet-forecast.Output Float))
(= (snet.fbprophet-forecast.Output.observed
    (snet.fbprophet-forecast.MkOutput
     $observed
     $trend
     $seasonal
     $forecast
     $forecast_ds
     $forecast_lower
     $forecast_upper)) $observed)

;; Define snet.fbprophet-forecast.Output.trend
(: snet.fbprophet-forecast.Output.trend (-> snet.fbprophet-forecast.Output Float))
(= (snet.fbprophet-forecast.Output.trend
    (snet.fbprophet-forecast.MkOutput
     $observed
     $trend
     $seasonal
     $forecast
     $forecast_ds
     $forecast_lower
     $forecast_upper)) $trend)

;; Define snet.fbprophet-forecast.Output.seasonal
(: snet.fbprophet-forecast.Output.seasonal (-> snet.fbprophet-forecast.Output Float))
(= (snet.fbprophet-forecast.Output.seasonal
    (snet.fbprophet-forecast.MkOutput
     $observed
     $trend
     $seasonal
     $forecast
     $forecast_ds
     $forecast_lower
     $forecast_upper)) $seasonal)

;; Define snet.fbprophet-forecast.Output.forecast
(: snet.fbprophet-forecast.Output.forecast (-> snet.fbprophet-forecast.Output Float))
(= (snet.fbprophet-forecast.Output.forecast
    (snet.fbprophet-forecast.MkOutput
     $observed
     $trend
     $seasonal
     $forecast
     $forecast_ds
     $forecast_lower
     $forecast_upper)) $forecast)

;; Define snet.fbprophet-forecast.Output.forecast_ds
(: snet.fbprophet-forecast.Output.forecast_ds (-> snet.fbprophet-forecast.Output String))
(= (snet.fbprophet-forecast.Output.forecast_ds
    (snet.fbprophet-forecast.MkOutput
     $observed
     $trend
     $seasonal
     $forecast
     $forecast_ds
     $forecast_lower
     $forecast_upper)) $forecast_ds)

;; Define snet.fbprophet-forecast.Output.forecast_lower
(: snet.fbprophet-forecast.Output.forecast_lower (-> snet.fbprophet-forecast.Output Float))
(= (snet.fbprophet-forecast.Output.forecast_lower
    (snet.fbprophet-forecast.MkOutput
     $observed
     $trend
     $seasonal
     $forecast
     $forecast_ds
     $forecast_lower
     $forecast_upper)) $forecast_lower)

;; Define snet.fbprophet-forecast.Output.forecast_upper
(: snet.fbprophet-forecast.Output.forecast_upper (-> snet.fbprophet-forecast.Output Float))
(= (snet.fbprophet-forecast.Output.forecast_upper
    (snet.fbprophet-forecast.MkOutput
     $observed
     $trend
     $seasonal
     $forecast
     $forecast_ds
     $forecast_lower
     $forecast_upper)) $forecast_upper)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; Forecast ;;
;;;;;;;;;;;;;;

;; Define snet.fbprophet-forecast.forecast service method
(: snet.fbprophet-forecast.forecast (-> snet.fbprophet-forecast.Input snet.fbprophet-forecast.Output))



;; ServiceID definition of snet.holistic-edge-detection-service"
(: snet.holistic-edge-detection-service (ServiceID snet))

;; Service metadata of snet.holistic-edge-detection-service
(= (service snet.holistic-edge-detection-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Edge Detection"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmbag6g4DdcbDYgevsvJaxukPjfiGrVSGRBXhAW1bUQSNy"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/holistic-edge-detection-service/users_guide/holistic-edge-detection-service.html"
           ; url content
           null
           ; description
           "<div>The holistically-nested edge detection (HED) algorithm automatically learns rich hierarchical representations that are important in order to approach the human ability to resolve the challenging ambiguity in edge and object boundary detection.</div>"
           ; short_description
           "Use this service to identify edges and object boundaries of objects within the provided image.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "cv" (Cons "dnn" (Cons "image" (Cons "segmentation" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: edgedetect.proto
;; Protobuf syntax: proto3
;; Prefix: snet.holistic-edge-detection-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; ImageFile ;;
;;;;;;;;;;;;;;;

;; Define snet.holistic-edge-detection-service.ImageFile type
(: snet.holistic-edge-detection-service.ImageFile Type)

;; Define snet.holistic-edge-detection-service.ImageFile constuctor
(: snet.holistic-edge-detection-service.MkImageFile
   (->
    String ; image
    String ; image_type
    snet.holistic-edge-detection-service.ImageFile))

;; Define snet.holistic-edge-detection-service.ImageFile access functions

;; Define snet.holistic-edge-detection-service.ImageFile.image
(: snet.holistic-edge-detection-service.ImageFile.image (-> snet.holistic-edge-detection-service.ImageFile String))
(= (snet.holistic-edge-detection-service.ImageFile.image
    (snet.holistic-edge-detection-service.MkImageFile
     $image
     $image_type)) $image)

;; Define snet.holistic-edge-detection-service.ImageFile.image_type
(: snet.holistic-edge-detection-service.ImageFile.image_type (-> snet.holistic-edge-detection-service.ImageFile String))
(= (snet.holistic-edge-detection-service.ImageFile.image_type
    (snet.holistic-edge-detection-service.MkImageFile
     $image
     $image_type)) $image_type)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Edgedetect ;;
;;;;;;;;;;;;;;;;

;; Define snet.holistic-edge-detection-service.DetectEdge service method
(: snet.holistic-edge-detection-service.DetectEdge (-> snet.holistic-edge-detection-service.ImageFile snet.holistic-edge-detection-service.ImageFile))



;; ServiceID definition of snet.gene-annotation-service"
(: snet.gene-annotation-service (ServiceID snet))

;; Service metadata of snet.gene-annotation-service
(= (service snet.gene-annotation-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Gene Annotation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmYsP5w3cMQezJXGRnt6JoTpiiUtnw2i8p62CXHAh4kw8R"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://mozi-ai.github.io/annotation-service/"
           ; url content
           null
           ; description
           "Accepts list of human [HGNC](https://www.genenames.org/tools/search/#!/genes) gene symbols, finds annotations from example databases and displays the results as a browser-based interactive graph visualization."
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "atomese" (Cons "reactome" (Cons "gene-ontology" (Cons "human-gene-annotation" (Cons "bioinformatics" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: annotation.proto
;; Protobuf syntax: proto3
;; Prefix: snet.gene-annotation-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Filter ;;
;;;;;;;;;;;;

;; Define snet.gene-annotation-service.Filter type
(: snet.gene-annotation-service.Filter Type)

;; Define snet.gene-annotation-service.Filter constuctor
(: snet.gene-annotation-service.MkFilter
   (->
    String ; filter
    String ; value
    snet.gene-annotation-service.Filter))

;; Define snet.gene-annotation-service.Filter access functions

;; Define snet.gene-annotation-service.Filter.filter
(: snet.gene-annotation-service.Filter.filter (-> snet.gene-annotation-service.Filter String))
(= (snet.gene-annotation-service.Filter.filter
    (snet.gene-annotation-service.MkFilter
     $filter
     $value)) $filter)

;; Define snet.gene-annotation-service.Filter.value
(: snet.gene-annotation-service.Filter.value (-> snet.gene-annotation-service.Filter String))
(= (snet.gene-annotation-service.Filter.value
    (snet.gene-annotation-service.MkFilter
     $filter
     $value)) $value)

;;;;;;;;;;;;;;;;
;; Annotation ;;
;;;;;;;;;;;;;;;;

;; Define snet.gene-annotation-service.Annotation type
(: snet.gene-annotation-service.Annotation Type)

;; Define snet.gene-annotation-service.Annotation constuctor
(: snet.gene-annotation-service.MkAnnotation
   (->
    String ; functionName
    snet.gene-annotation-service.Filter ; filters
    snet.gene-annotation-service.Annotation))

;; Define snet.gene-annotation-service.Annotation access functions

;; Define snet.gene-annotation-service.Annotation.functionName
(: snet.gene-annotation-service.Annotation.functionName (-> snet.gene-annotation-service.Annotation String))
(= (snet.gene-annotation-service.Annotation.functionName
    (snet.gene-annotation-service.MkAnnotation
     $functionName
     $filters)) $functionName)

;; Define snet.gene-annotation-service.Annotation.filters
(: snet.gene-annotation-service.Annotation.filters (-> snet.gene-annotation-service.Annotation snet.gene-annotation-service.Filter))
(= (snet.gene-annotation-service.Annotation.filters
    (snet.gene-annotation-service.MkAnnotation
     $functionName
     $filters)) $filters)

;;;;;;;;;;
;; Gene ;;
;;;;;;;;;;

;; Define snet.gene-annotation-service.Gene type
(: snet.gene-annotation-service.Gene Type)

;; Define snet.gene-annotation-service.Gene constuctor
(: snet.gene-annotation-service.MkGene
   (->
    String ; geneName
    snet.gene-annotation-service.Gene))

;; Define snet.gene-annotation-service.Gene access functions

;; Define snet.gene-annotation-service.Gene.geneName
(: snet.gene-annotation-service.Gene.geneName (-> snet.gene-annotation-service.Gene String))
(= (snet.gene-annotation-service.Gene.geneName
    (snet.gene-annotation-service.MkGene
     $geneName)) $geneName)

;;;;;;;;;;;;;;;;;;;;;;;
;; AnnotationRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.gene-annotation-service.AnnotationRequest type
(: snet.gene-annotation-service.AnnotationRequest Type)

;; Define snet.gene-annotation-service.AnnotationRequest constuctor
(: snet.gene-annotation-service.MkAnnotationRequest
   (->
    snet.gene-annotation-service.Annotation ; annotations
    snet.gene-annotation-service.Gene ; genes
    snet.gene-annotation-service.AnnotationRequest))

;; Define snet.gene-annotation-service.AnnotationRequest access functions

;; Define snet.gene-annotation-service.AnnotationRequest.annotations
(: snet.gene-annotation-service.AnnotationRequest.annotations (-> snet.gene-annotation-service.AnnotationRequest snet.gene-annotation-service.Annotation))
(= (snet.gene-annotation-service.AnnotationRequest.annotations
    (snet.gene-annotation-service.MkAnnotationRequest
     $annotations
     $genes)) $annotations)

;; Define snet.gene-annotation-service.AnnotationRequest.genes
(: snet.gene-annotation-service.AnnotationRequest.genes (-> snet.gene-annotation-service.AnnotationRequest snet.gene-annotation-service.Gene))
(= (snet.gene-annotation-service.AnnotationRequest.genes
    (snet.gene-annotation-service.MkAnnotationRequest
     $annotations
     $genes)) $genes)

;;;;;;;;;;;;;;;;;;;;;;;;
;; AnnotationResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.gene-annotation-service.AnnotationResponse type
(: snet.gene-annotation-service.AnnotationResponse Type)

;; Define snet.gene-annotation-service.AnnotationResponse constuctor
(: snet.gene-annotation-service.MkAnnotationResponse
   (->
    String ; result
    snet.gene-annotation-service.AnnotationResponse))

;; Define snet.gene-annotation-service.AnnotationResponse access functions

;; Define snet.gene-annotation-service.AnnotationResponse.result
(: snet.gene-annotation-service.AnnotationResponse.result (-> snet.gene-annotation-service.AnnotationResponse String))
(= (snet.gene-annotation-service.AnnotationResponse.result
    (snet.gene-annotation-service.MkAnnotationResponse
     $result)) $result)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; Annotate ;;
;;;;;;;;;;;;;;

;; Define snet.gene-annotation-service.Annotate service method
(: snet.gene-annotation-service.Annotate (-> snet.gene-annotation-service.AnnotationRequest snet.gene-annotation-service.AnnotationResponse))



;; ServiceID definition of snet.demo_service"
(: snet.demo_service (ServiceID snet))

;; Service metadata of snet.demo_service
(= (service snet.demo_service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "demo_service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeyrQkEyba8dd4rc3jrLd5pEwsxHutfH2RvsSaeSMqTtQ"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://dev.singularitynet.io/docs/ai-developers/"
           ; url content
           null
           ; description
           "demo_service"
           ; short_description
           "demo_service")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "demo" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: snet.demo_service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define snet.demo_service.Numbers type
(: snet.demo_service.Numbers Type)

;; Define snet.demo_service.Numbers constuctor
(: snet.demo_service.MkNumbers
   (->
    Float ; a
    Float ; b
    snet.demo_service.Numbers))

;; Define snet.demo_service.Numbers access functions

;; Define snet.demo_service.Numbers.a
(: snet.demo_service.Numbers.a (-> snet.demo_service.Numbers Float))
(= (snet.demo_service.Numbers.a
    (snet.demo_service.MkNumbers
     $a
     $b)) $a)

;; Define snet.demo_service.Numbers.b
(: snet.demo_service.Numbers.b (-> snet.demo_service.Numbers Float))
(= (snet.demo_service.Numbers.b
    (snet.demo_service.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define snet.demo_service.Result type
(: snet.demo_service.Result Type)

;; Define snet.demo_service.Result constuctor
(: snet.demo_service.MkResult
   (->
    Float ; value
    snet.demo_service.Result))

;; Define snet.demo_service.Result access functions

;; Define snet.demo_service.Result.value
(: snet.demo_service.Result.value (-> snet.demo_service.Result Float))
(= (snet.demo_service.Result.value
    (snet.demo_service.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define snet.demo_service.add service method
(: snet.demo_service.add (-> snet.demo_service.Numbers snet.demo_service.Result))

;; Define snet.demo_service.sub service method
(: snet.demo_service.sub (-> snet.demo_service.Numbers snet.demo_service.Result))

;; Define snet.demo_service.mul service method
(: snet.demo_service.mul (-> snet.demo_service.Numbers snet.demo_service.Result))

;; Define snet.demo_service.div service method
(: snet.demo_service.div (-> snet.demo_service.Numbers snet.demo_service.Result))



;; ServiceID definition of snet.minecraftizing-service"
(: snet.minecraftizing-service (ServiceID snet))

;; Service metadata of snet.minecraftizing-service
(= (service snet.minecraftizing-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Minecraftizing service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmZXqFVtDqXGwpmCM9uir8SWSW2f32wud9nQKEDmo6UTLk"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/semantic-vision/blob/master/services/MinecraftService/README_main_usage.md"
           ; url content
           null
           ; description
           "<div>Service transforms input image to minecraft-styled image</div>"
           ; short_description
           "Service transforms input image to minecraft-styled image")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "neural-networks" (Cons "style-transfer" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: MinecraftizingService.proto
;; Protobuf syntax: proto3
;; Protobuf package: MinecraftizingService
;; Prefix: snet.minecraftizing-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; minecraftRequest ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.minecraftizing-service.minecraftRequest type
(: snet.minecraftizing-service.minecraftRequest Type)

;; Define snet.minecraftizing-service.minecraftRequest constuctor
(: snet.minecraftizing-service.MkminecraftRequest
   (->
    String ; network_name
    String ; dataset
    Bytes ; input_image
    snet.minecraftizing-service.minecraftRequest))

;; Define snet.minecraftizing-service.minecraftRequest access functions

;; Define snet.minecraftizing-service.minecraftRequest.network_name
(: snet.minecraftizing-service.minecraftRequest.network_name (-> snet.minecraftizing-service.minecraftRequest String))
(= (snet.minecraftizing-service.minecraftRequest.network_name
    (snet.minecraftizing-service.MkminecraftRequest
     $network_name
     $dataset
     $input_image)) $network_name)

;; Define snet.minecraftizing-service.minecraftRequest.dataset
(: snet.minecraftizing-service.minecraftRequest.dataset (-> snet.minecraftizing-service.minecraftRequest String))
(= (snet.minecraftizing-service.minecraftRequest.dataset
    (snet.minecraftizing-service.MkminecraftRequest
     $network_name
     $dataset
     $input_image)) $dataset)

;; Define snet.minecraftizing-service.minecraftRequest.input_image
(: snet.minecraftizing-service.minecraftRequest.input_image (-> snet.minecraftizing-service.minecraftRequest Bytes))
(= (snet.minecraftizing-service.minecraftRequest.input_image
    (snet.minecraftizing-service.MkminecraftRequest
     $network_name
     $dataset
     $input_image)) $input_image)

;;;;;;;;;;;;;;;;;;;;;;;
;; minecraftResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.minecraftizing-service.minecraftResponse type
(: snet.minecraftizing-service.minecraftResponse Type)

;; Define snet.minecraftizing-service.minecraftResponse constuctor
(: snet.minecraftizing-service.MkminecraftResponse
   (->
    String ; output
    String ; status
    String ; d_type
    Int32 ; height
    Int32 ; width
    Int32 ; n_channels
    snet.minecraftizing-service.minecraftResponse))

;; Define snet.minecraftizing-service.minecraftResponse access functions

;; Define snet.minecraftizing-service.minecraftResponse.output
(: snet.minecraftizing-service.minecraftResponse.output (-> snet.minecraftizing-service.minecraftResponse String))
(= (snet.minecraftizing-service.minecraftResponse.output
    (snet.minecraftizing-service.MkminecraftResponse
     $output
     $status
     $d_type
     $height
     $width
     $n_channels)) $output)

;; Define snet.minecraftizing-service.minecraftResponse.status
(: snet.minecraftizing-service.minecraftResponse.status (-> snet.minecraftizing-service.minecraftResponse String))
(= (snet.minecraftizing-service.minecraftResponse.status
    (snet.minecraftizing-service.MkminecraftResponse
     $output
     $status
     $d_type
     $height
     $width
     $n_channels)) $status)

;; Define snet.minecraftizing-service.minecraftResponse.d_type
(: snet.minecraftizing-service.minecraftResponse.d_type (-> snet.minecraftizing-service.minecraftResponse String))
(= (snet.minecraftizing-service.minecraftResponse.d_type
    (snet.minecraftizing-service.MkminecraftResponse
     $output
     $status
     $d_type
     $height
     $width
     $n_channels)) $d_type)

;; Define snet.minecraftizing-service.minecraftResponse.height
(: snet.minecraftizing-service.minecraftResponse.height (-> snet.minecraftizing-service.minecraftResponse Int32))
(= (snet.minecraftizing-service.minecraftResponse.height
    (snet.minecraftizing-service.MkminecraftResponse
     $output
     $status
     $d_type
     $height
     $width
     $n_channels)) $height)

;; Define snet.minecraftizing-service.minecraftResponse.width
(: snet.minecraftizing-service.minecraftResponse.width (-> snet.minecraftizing-service.minecraftResponse Int32))
(= (snet.minecraftizing-service.minecraftResponse.width
    (snet.minecraftizing-service.MkminecraftResponse
     $output
     $status
     $d_type
     $height
     $width
     $n_channels)) $width)

;; Define snet.minecraftizing-service.minecraftResponse.n_channels
(: snet.minecraftizing-service.minecraftResponse.n_channels (-> snet.minecraftizing-service.minecraftResponse Int32))
(= (snet.minecraftizing-service.minecraftResponse.n_channels
    (snet.minecraftizing-service.MkminecraftResponse
     $output
     $status
     $d_type
     $height
     $width
     $n_channels)) $n_channels)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MinecraftizingService ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.minecraftizing-service.getMinecraftiziedImage service method
(: snet.minecraftizing-service.getMinecraftiziedImage (-> snet.minecraftizing-service.minecraftRequest snet.minecraftizing-service.minecraftResponse))



;; ServiceID definition of snet.deoldify-colorizer"
(: snet.deoldify-colorizer (ServiceID snet))

;; Service metadata of snet.deoldify-colorizer
(= (service snet.deoldify-colorizer)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "DeOldify Photos"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmdzWZRZUPHJ6hEXeDCR1PDQ8BuCrLhC2TjJCa8e4APL3A"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/dnn-model-services/users_guide/deoldify-colorizer.html"
           ; url content
           null
           ; description
           "<div>A Deep Learning based project for colorizing and restoring old images!</div>"
           ; short_description
           "A Deep Learning based project for colorizing and restoring old images!")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "old" (Cons "color" (Cons "image" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: colorization.proto
;; Protobuf syntax: proto3
;; Prefix: snet.deoldify-colorizer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.deoldify-colorizer.Input type
(: snet.deoldify-colorizer.Input Type)

;; Define snet.deoldify-colorizer.Input constuctor
(: snet.deoldify-colorizer.MkInput
   (->
    String ; img_input
    Int32 ; render_factor
    snet.deoldify-colorizer.Input))

;; Define snet.deoldify-colorizer.Input access functions

;; Define snet.deoldify-colorizer.Input.img_input
(: snet.deoldify-colorizer.Input.img_input (-> snet.deoldify-colorizer.Input String))
(= (snet.deoldify-colorizer.Input.img_input
    (snet.deoldify-colorizer.MkInput
     $img_input
     $render_factor)) $img_input)

;; Define snet.deoldify-colorizer.Input.render_factor
(: snet.deoldify-colorizer.Input.render_factor (-> snet.deoldify-colorizer.Input Int32))
(= (snet.deoldify-colorizer.Input.render_factor
    (snet.deoldify-colorizer.MkInput
     $img_input
     $render_factor)) $render_factor)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.deoldify-colorizer.Output type
(: snet.deoldify-colorizer.Output Type)

;; Define snet.deoldify-colorizer.Output constuctor
(: snet.deoldify-colorizer.MkOutput
   (->
    String ; img_colorized
    snet.deoldify-colorizer.Output))

;; Define snet.deoldify-colorizer.Output access functions

;; Define snet.deoldify-colorizer.Output.img_colorized
(: snet.deoldify-colorizer.Output.img_colorized (-> snet.deoldify-colorizer.Output String))
(= (snet.deoldify-colorizer.Output.img_colorized
    (snet.deoldify-colorizer.MkOutput
     $img_colorized)) $img_colorized)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; Colorization ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.deoldify-colorizer.colorize service method
(: snet.deoldify-colorizer.colorize (-> snet.deoldify-colorizer.Input snet.deoldify-colorizer.Output))



;; ServiceID definition of snet.language-detection"
(: snet.language-detection (ServiceID snet))

;; Service metadata of snet.language-detection
(= (service snet.language-detection)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Language Detection"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmRS4JXkNN7FwmE6V2otfzjbxE3uKHEKP68DD5ftEwFxEf"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/nlp-services-misc/users_guide/language-detection-service.html"
           ; url content
           null
           ; description
           "<div>Provide a piece of foregin text and identify what language the text stems from.</div>"
           ; short_description
           "Provide a piece of foreign text and identify what language the text stems from.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "language" (Cons "english" (Cons "nlp" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: LanguageDetection.proto
;; Protobuf syntax: proto3
;; Prefix: snet.language-detection
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.language-detection.Input type
(: snet.language-detection.Input Type)

;; Define snet.language-detection.Input constuctor
(: snet.language-detection.MkInput
   (->
    String ; input
    snet.language-detection.Input))

;; Define snet.language-detection.Input access functions

;; Define snet.language-detection.Input.input
(: snet.language-detection.Input.input (-> snet.language-detection.Input String))
(= (snet.language-detection.Input.input
    (snet.language-detection.MkInput
     $input)) $input)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.language-detection.Output type
(: snet.language-detection.Output Type)

;; Define snet.language-detection.Output constuctor
(: snet.language-detection.MkOutput
   (->
    snet.language-detection.Language ; language
    snet.language-detection.Output))

;; Define snet.language-detection.Output access functions

;; Define snet.language-detection.Output.language
(: snet.language-detection.Output.language (-> snet.language-detection.Output snet.language-detection.Language))
(= (snet.language-detection.Output.language
    (snet.language-detection.MkOutput
     $language)) $language)

;;;;;;;;;;;;;;
;; Language ;;
;;;;;;;;;;;;;;

;; Define snet.language-detection.Language type
(: snet.language-detection.Language Type)

;; Define snet.language-detection.Language constuctor
(: snet.language-detection.MkLanguage
   (->
    String ; sentence
    snet.language-detection.Prediction ; prediction
    snet.language-detection.Language))

;; Define snet.language-detection.Language access functions

;; Define snet.language-detection.Language.sentence
(: snet.language-detection.Language.sentence (-> snet.language-detection.Language String))
(= (snet.language-detection.Language.sentence
    (snet.language-detection.MkLanguage
     $sentence
     $prediction)) $sentence)

;; Define snet.language-detection.Language.prediction
(: snet.language-detection.Language.prediction (-> snet.language-detection.Language snet.language-detection.Prediction))
(= (snet.language-detection.Language.prediction
    (snet.language-detection.MkLanguage
     $sentence
     $prediction)) $prediction)

;;;;;;;;;;;;;;;;
;; Prediction ;;
;;;;;;;;;;;;;;;;

;; Define snet.language-detection.Prediction type
(: snet.language-detection.Prediction Type)

;; Define snet.language-detection.Prediction constuctor
(: snet.language-detection.MkPrediction
   (->
    String ; language
    Float ; confidence
    snet.language-detection.Prediction))

;; Define snet.language-detection.Prediction access functions

;; Define snet.language-detection.Prediction.language
(: snet.language-detection.Prediction.language (-> snet.language-detection.Prediction String))
(= (snet.language-detection.Prediction.language
    (snet.language-detection.MkPrediction
     $language
     $confidence)) $language)

;; Define snet.language-detection.Prediction.confidence
(: snet.language-detection.Prediction.confidence (-> snet.language-detection.Prediction Float))
(= (snet.language-detection.Prediction.confidence
    (snet.language-detection.MkPrediction
     $language
     $confidence)) $confidence)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; LanguageDetect ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.language-detection.infer service method
(: snet.language-detection.infer (-> snet.language-detection.Input snet.language-detection.Output))



;; ServiceID definition of snet.semantic-segmentation"
(: snet.semantic-segmentation (ServiceID snet))

;; Service metadata of snet.semantic-segmentation
(= (service snet.semantic-segmentation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Image Segmentation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmahsCTdY9nKH8teUPxN6cGq5S3Pz8Sg2WwnLyqYuoZ7WM"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/semantic-segmentation"
           ; url content
           null
           ; description
           "<div>Image segmentation is the process of partitioning a digital image into multiple segments. The goal of segmentation is to simplify and/or change the representation of an image into something that is more meaningful and easier to analyze.<br></br>Use this service to associate each pixel of a provided image with a class label such as identifying cars, bicycles and people. Useful for applications such as autonomous driving, manufacturing robotics, medical imaging and video surveillance. <br></br>Simply upload an image you want to analyse and hit Invoke, the image will then be processed and the results displayed. </div>"
           ; short_description
           "Use this service to analyse each element of an image and provide them with a class label. Useful for applications such as autonomous driving, medical imaging, and much more.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "semantic-segmentation" (Cons "segmentation" (Cons "computer-vision" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: segmentation.proto
;; Protobuf syntax: proto3
;; Prefix: snet.semantic-segmentation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Image ;;
;;;;;;;;;;;

;; Define snet.semantic-segmentation.Image type
(: snet.semantic-segmentation.Image Type)

;; Define snet.semantic-segmentation.Image constuctor
(: snet.semantic-segmentation.MkImage
   (->
    String ; mimetype
    Bytes ; content
    snet.semantic-segmentation.Image))

;; Define snet.semantic-segmentation.Image access functions

;; Define snet.semantic-segmentation.Image.mimetype
(: snet.semantic-segmentation.Image.mimetype (-> snet.semantic-segmentation.Image String))
(= (snet.semantic-segmentation.Image.mimetype
    (snet.semantic-segmentation.MkImage
     $mimetype
     $content)) $mimetype)

;; Define snet.semantic-segmentation.Image.content
(: snet.semantic-segmentation.Image.content (-> snet.semantic-segmentation.Image Bytes))
(= (snet.semantic-segmentation.Image.content
    (snet.semantic-segmentation.MkImage
     $mimetype
     $content)) $content)

;;;;;;;;;;;;;
;; Request ;;
;;;;;;;;;;;;;

;; Define snet.semantic-segmentation.Request type
(: snet.semantic-segmentation.Request Type)

;; Define snet.semantic-segmentation.Request constuctor
(: snet.semantic-segmentation.MkRequest
   (->
    snet.semantic-segmentation.Image ; img
    Bool ; visualise
    snet.semantic-segmentation.Request))

;; Define snet.semantic-segmentation.Request access functions

;; Define snet.semantic-segmentation.Request.img
(: snet.semantic-segmentation.Request.img (-> snet.semantic-segmentation.Request snet.semantic-segmentation.Image))
(= (snet.semantic-segmentation.Request.img
    (snet.semantic-segmentation.MkRequest
     $img
     $visualise)) $img)

;; Define snet.semantic-segmentation.Request.visualise
(: snet.semantic-segmentation.Request.visualise (-> snet.semantic-segmentation.Request Bool))
(= (snet.semantic-segmentation.Request.visualise
    (snet.semantic-segmentation.MkRequest
     $img
     $visualise)) $visualise)

;;;;;;;;;;;;;;;;;;;;;;
;; RegionOfInterest ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.semantic-segmentation.RegionOfInterest type
(: snet.semantic-segmentation.RegionOfInterest Type)

;; Define snet.semantic-segmentation.RegionOfInterest constuctor
(: snet.semantic-segmentation.MkRegionOfInterest
   (->
    UInt32 ; x
    UInt32 ; y
    UInt32 ; w
    UInt32 ; h
    snet.semantic-segmentation.RegionOfInterest))

;; Define snet.semantic-segmentation.RegionOfInterest access functions

;; Define snet.semantic-segmentation.RegionOfInterest.x
(: snet.semantic-segmentation.RegionOfInterest.x (-> snet.semantic-segmentation.RegionOfInterest UInt32))
(= (snet.semantic-segmentation.RegionOfInterest.x
    (snet.semantic-segmentation.MkRegionOfInterest
     $x
     $y
     $w
     $h)) $x)

;; Define snet.semantic-segmentation.RegionOfInterest.y
(: snet.semantic-segmentation.RegionOfInterest.y (-> snet.semantic-segmentation.RegionOfInterest UInt32))
(= (snet.semantic-segmentation.RegionOfInterest.y
    (snet.semantic-segmentation.MkRegionOfInterest
     $x
     $y
     $w
     $h)) $y)

;; Define snet.semantic-segmentation.RegionOfInterest.w
(: snet.semantic-segmentation.RegionOfInterest.w (-> snet.semantic-segmentation.RegionOfInterest UInt32))
(= (snet.semantic-segmentation.RegionOfInterest.w
    (snet.semantic-segmentation.MkRegionOfInterest
     $x
     $y
     $w
     $h)) $w)

;; Define snet.semantic-segmentation.RegionOfInterest.h
(: snet.semantic-segmentation.RegionOfInterest.h (-> snet.semantic-segmentation.RegionOfInterest UInt32))
(= (snet.semantic-segmentation.RegionOfInterest.h
    (snet.semantic-segmentation.MkRegionOfInterest
     $x
     $y
     $w
     $h)) $h)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define snet.semantic-segmentation.Result type
(: snet.semantic-segmentation.Result Type)

;; Define snet.semantic-segmentation.Result constuctor
(: snet.semantic-segmentation.MkResult
   (->
    snet.semantic-segmentation.Image ; segmentation_img
    snet.semantic-segmentation.RegionOfInterest ; rois
    Float ; scores
    UInt32 ; class_ids
    String ; class_names
    snet.semantic-segmentation.Image ; debug_img
    snet.semantic-segmentation.Result))

;; Define snet.semantic-segmentation.Result access functions

;; Define snet.semantic-segmentation.Result.segmentation_img
(: snet.semantic-segmentation.Result.segmentation_img (-> snet.semantic-segmentation.Result snet.semantic-segmentation.Image))
(= (snet.semantic-segmentation.Result.segmentation_img
    (snet.semantic-segmentation.MkResult
     $segmentation_img
     $rois
     $scores
     $class_ids
     $class_names
     $debug_img)) $segmentation_img)

;; Define snet.semantic-segmentation.Result.rois
(: snet.semantic-segmentation.Result.rois (-> snet.semantic-segmentation.Result snet.semantic-segmentation.RegionOfInterest))
(= (snet.semantic-segmentation.Result.rois
    (snet.semantic-segmentation.MkResult
     $segmentation_img
     $rois
     $scores
     $class_ids
     $class_names
     $debug_img)) $rois)

;; Define snet.semantic-segmentation.Result.scores
(: snet.semantic-segmentation.Result.scores (-> snet.semantic-segmentation.Result Float))
(= (snet.semantic-segmentation.Result.scores
    (snet.semantic-segmentation.MkResult
     $segmentation_img
     $rois
     $scores
     $class_ids
     $class_names
     $debug_img)) $scores)

;; Define snet.semantic-segmentation.Result.class_ids
(: snet.semantic-segmentation.Result.class_ids (-> snet.semantic-segmentation.Result UInt32))
(= (snet.semantic-segmentation.Result.class_ids
    (snet.semantic-segmentation.MkResult
     $segmentation_img
     $rois
     $scores
     $class_ids
     $class_names
     $debug_img)) $class_ids)

;; Define snet.semantic-segmentation.Result.class_names
(: snet.semantic-segmentation.Result.class_names (-> snet.semantic-segmentation.Result String))
(= (snet.semantic-segmentation.Result.class_names
    (snet.semantic-segmentation.MkResult
     $segmentation_img
     $rois
     $scores
     $class_ids
     $class_names
     $debug_img)) $class_names)

;; Define snet.semantic-segmentation.Result.debug_img
(: snet.semantic-segmentation.Result.debug_img (-> snet.semantic-segmentation.Result snet.semantic-segmentation.Image))
(= (snet.semantic-segmentation.Result.debug_img
    (snet.semantic-segmentation.MkResult
     $segmentation_img
     $rois
     $scores
     $class_ids
     $class_names
     $debug_img)) $debug_img)

;;;;;;;;;;;;;;;;;
;; MetaRequest ;;
;;;;;;;;;;;;;;;;;

;; Define snet.semantic-segmentation.MetaRequest type
(: snet.semantic-segmentation.MetaRequest Type)

;; Define snet.semantic-segmentation.MetaRequest constuctor
(: snet.semantic-segmentation.MkMetaRequest
   (->
    snet.semantic-segmentation.MetaRequest))

;; Define snet.semantic-segmentation.MetaRequest access functions

;;;;;;;;;;;;;;;;
;; MetaResult ;;
;;;;;;;;;;;;;;;;

;; Define snet.semantic-segmentation.MetaResult type
(: snet.semantic-segmentation.MetaResult Type)

;; Define snet.semantic-segmentation.MetaResult constuctor
(: snet.semantic-segmentation.MkMetaResult
   (->
    String ; known_classes
    snet.semantic-segmentation.MetaResult))

;; Define snet.semantic-segmentation.MetaResult access functions

;; Define snet.semantic-segmentation.MetaResult.known_classes
(: snet.semantic-segmentation.MetaResult.known_classes (-> snet.semantic-segmentation.MetaResult String))
(= (snet.semantic-segmentation.MetaResult.known_classes
    (snet.semantic-segmentation.MkMetaResult
     $known_classes)) $known_classes)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SemanticSegmentation ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.semantic-segmentation.segment service method
(: snet.semantic-segmentation.segment (-> snet.semantic-segmentation.Request snet.semantic-segmentation.Result))

;; Define snet.semantic-segmentation.meta service method
(: snet.semantic-segmentation.meta (-> snet.semantic-segmentation.MetaRequest snet.semantic-segmentation.MetaResult))



;; ServiceID definition of snet.places365-scene-recognition"
(: snet.places365-scene-recognition (ServiceID snet))

;; Service metadata of snet.places365-scene-recognition
(= (service snet.places365-scene-recognition)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Scene Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmXoM56TyvyxDCFfAXGv8e7tSZgb1r1suMgd3PsxZNjNz8"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/dnn-model-services/blob/master/Services/gRPC/places365-scene-recognition/README.md"
           ; url content
           null
           ; description
           "<div>Identify if an image was taken indoors or outside, at any of 365 different locations, recognize any of 102 different scene attributes, and/or highlight high-relevance regions.</div>"
           ; short_description
           "Identify if an image was taken indoors or outside, at any of 365 different locations, recognize any of 102 different scene attributes, and/or highlight high-relevance regions.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "scene" (Cons "image" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: scene_recognition.proto
;; Protobuf syntax: proto3
;; Prefix: snet.places365-scene-recognition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SceneRecognitionRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.places365-scene-recognition.SceneRecognitionRequest type
(: snet.places365-scene-recognition.SceneRecognitionRequest Type)

;; Define snet.places365-scene-recognition.SceneRecognitionRequest constuctor
(: snet.places365-scene-recognition.MkSceneRecognitionRequest
   (->
    String ; input_image
    String ; predict
    snet.places365-scene-recognition.SceneRecognitionRequest))

;; Define snet.places365-scene-recognition.SceneRecognitionRequest access functions

;; Define snet.places365-scene-recognition.SceneRecognitionRequest.input_image
(: snet.places365-scene-recognition.SceneRecognitionRequest.input_image (-> snet.places365-scene-recognition.SceneRecognitionRequest String))
(= (snet.places365-scene-recognition.SceneRecognitionRequest.input_image
    (snet.places365-scene-recognition.MkSceneRecognitionRequest
     $input_image
     $predict)) $input_image)

;; Define snet.places365-scene-recognition.SceneRecognitionRequest.predict
(: snet.places365-scene-recognition.SceneRecognitionRequest.predict (-> snet.places365-scene-recognition.SceneRecognitionRequest String))
(= (snet.places365-scene-recognition.SceneRecognitionRequest.predict
    (snet.places365-scene-recognition.MkSceneRecognitionRequest
     $input_image
     $predict)) $predict)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SceneRecognitionResult ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.places365-scene-recognition.SceneRecognitionResult type
(: snet.places365-scene-recognition.SceneRecognitionResult Type)

;; Define snet.places365-scene-recognition.SceneRecognitionResult constuctor
(: snet.places365-scene-recognition.MkSceneRecognitionResult
   (->
    String ; data
    snet.places365-scene-recognition.SceneRecognitionResult))

;; Define snet.places365-scene-recognition.SceneRecognitionResult access functions

;; Define snet.places365-scene-recognition.SceneRecognitionResult.data
(: snet.places365-scene-recognition.SceneRecognitionResult.data (-> snet.places365-scene-recognition.SceneRecognitionResult String))
(= (snet.places365-scene-recognition.SceneRecognitionResult.data
    (snet.places365-scene-recognition.MkSceneRecognitionResult
     $data)) $data)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; SceneRecognition ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.places365-scene-recognition.recognize_scene service method
(: snet.places365-scene-recognition.recognize_scene (-> snet.places365-scene-recognition.SceneRecognitionRequest snet.places365-scene-recognition.SceneRecognitionResult))



;; ServiceID definition of snet.coreference-resolution-service"
(: snet.coreference-resolution-service (ServiceID snet))

;; Service metadata of snet.coreference-resolution-service
(= (service snet.coreference-resolution-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Coreference Resolution"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmQu1WRBEA9jooFHhhuTMGeH4eswWPzBkLTMRig1y1UqKv"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/nlp-services-misc/users_guide/coreference-resolution-service.html"
           ; url content
           null
           ; description
           "<div>Identify and tie together all expressions within a piece of text that point toward a specific entity within the text,for example, \"I voted for Elon Musk because he was most aligned with my values\", the expression \"my\" belongs to the entity \"I\" and the expression \"he\" belongs to \"Elon Musk\". The service is able to point expressions to the relevant entities within a text sample.</div>"
           ; short_description
           "Identify and tie together all expressions within a piece of text that point toward a specific entity within the text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "english" (Cons "coreference-resolution" (Cons "allennlp" (Cons "nlp" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: CoreferenceResolutionService.proto
;; Protobuf syntax: proto3
;; Prefix: snet.coreference-resolution-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; InputSentence ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.coreference-resolution-service.InputSentence type
(: snet.coreference-resolution-service.InputSentence Type)

;; Define snet.coreference-resolution-service.InputSentence constuctor
(: snet.coreference-resolution-service.MkInputSentence
   (->
    String ; sentence
    snet.coreference-resolution-service.InputSentence))

;; Define snet.coreference-resolution-service.InputSentence access functions

;; Define snet.coreference-resolution-service.InputSentence.sentence
(: snet.coreference-resolution-service.InputSentence.sentence (-> snet.coreference-resolution-service.InputSentence String))
(= (snet.coreference-resolution-service.InputSentence.sentence
    (snet.coreference-resolution-service.MkInputSentence
     $sentence)) $sentence)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; ReferenceResolution ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.coreference-resolution-service.ReferenceResolution type
(: snet.coreference-resolution-service.ReferenceResolution Type)

;; Define snet.coreference-resolution-service.ReferenceResolution constuctor
(: snet.coreference-resolution-service.MkReferenceResolution
   (->
    snet.coreference-resolution-service.References ; references
    snet.coreference-resolution-service.Words ; words
    snet.coreference-resolution-service.ReferenceResolution))

;; Define snet.coreference-resolution-service.ReferenceResolution access functions

;; Define snet.coreference-resolution-service.ReferenceResolution.references
(: snet.coreference-resolution-service.ReferenceResolution.references (-> snet.coreference-resolution-service.ReferenceResolution snet.coreference-resolution-service.References))
(= (snet.coreference-resolution-service.ReferenceResolution.references
    (snet.coreference-resolution-service.MkReferenceResolution
     $references
     $words)) $references)

;; Define snet.coreference-resolution-service.ReferenceResolution.words
(: snet.coreference-resolution-service.ReferenceResolution.words (-> snet.coreference-resolution-service.ReferenceResolution snet.coreference-resolution-service.Words))
(= (snet.coreference-resolution-service.ReferenceResolution.words
    (snet.coreference-resolution-service.MkReferenceResolution
     $references
     $words)) $words)

;;;;;;;;;;;;;;;;
;; References ;;
;;;;;;;;;;;;;;;;

;; Define snet.coreference-resolution-service.References type
(: snet.coreference-resolution-service.References Type)

;; Define snet.coreference-resolution-service.References constuctor
(: snet.coreference-resolution-service.MkReferences
   (->
    snet.coreference-resolution-service.Indexes ; key
    snet.coreference-resolution-service.Indexes ; mappings
    snet.coreference-resolution-service.References))

;; Define snet.coreference-resolution-service.References access functions

;; Define snet.coreference-resolution-service.References.key
(: snet.coreference-resolution-service.References.key (-> snet.coreference-resolution-service.References snet.coreference-resolution-service.Indexes))
(= (snet.coreference-resolution-service.References.key
    (snet.coreference-resolution-service.MkReferences
     $key
     $mappings)) $key)

;; Define snet.coreference-resolution-service.References.mappings
(: snet.coreference-resolution-service.References.mappings (-> snet.coreference-resolution-service.References snet.coreference-resolution-service.Indexes))
(= (snet.coreference-resolution-service.References.mappings
    (snet.coreference-resolution-service.MkReferences
     $key
     $mappings)) $mappings)

;;;;;;;;;;;;;
;; Indexes ;;
;;;;;;;;;;;;;

;; Define snet.coreference-resolution-service.Indexes type
(: snet.coreference-resolution-service.Indexes Type)

;; Define snet.coreference-resolution-service.Indexes constuctor
(: snet.coreference-resolution-service.MkIndexes
   (->
    Int32 ; firstIndex
    Int32 ; secondIndex
    snet.coreference-resolution-service.Indexes))

;; Define snet.coreference-resolution-service.Indexes access functions

;; Define snet.coreference-resolution-service.Indexes.firstIndex
(: snet.coreference-resolution-service.Indexes.firstIndex (-> snet.coreference-resolution-service.Indexes Int32))
(= (snet.coreference-resolution-service.Indexes.firstIndex
    (snet.coreference-resolution-service.MkIndexes
     $firstIndex
     $secondIndex)) $firstIndex)

;; Define snet.coreference-resolution-service.Indexes.secondIndex
(: snet.coreference-resolution-service.Indexes.secondIndex (-> snet.coreference-resolution-service.Indexes Int32))
(= (snet.coreference-resolution-service.Indexes.secondIndex
    (snet.coreference-resolution-service.MkIndexes
     $firstIndex
     $secondIndex)) $secondIndex)

;;;;;;;;;;;
;; Words ;;
;;;;;;;;;;;

;; Define snet.coreference-resolution-service.Words type
(: snet.coreference-resolution-service.Words Type)

;; Define snet.coreference-resolution-service.Words constuctor
(: snet.coreference-resolution-service.MkWords
   (->
    String ; word
    snet.coreference-resolution-service.Words))

;; Define snet.coreference-resolution-service.Words access functions

;; Define snet.coreference-resolution-service.Words.word
(: snet.coreference-resolution-service.Words.word (-> snet.coreference-resolution-service.Words String))
(= (snet.coreference-resolution-service.Words.word
    (snet.coreference-resolution-service.MkWords
     $word)) $word)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; ResolveReference ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.coreference-resolution-service.resolution service method
(: snet.coreference-resolution-service.resolution (-> snet.coreference-resolution-service.InputSentence snet.coreference-resolution-service.ReferenceResolution))



;; ServiceID definition of snet.match-service"
(: snet.match-service (ServiceID snet))

;; Service metadata of snet.match-service
(= (service snet.match-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Image Matching Service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmQ5KEkqrTT3cmPtkJ8y7LNHAqKoxUGsNjA4XtwCXufYvR"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/semantic-vision"
           ; url content
           null
           ; description
           "<div>This is an image matching service. Image retrieval is a task, in which the user is getting images closest to the given one. The user has to specify a detector name, a descriptor name and parameters, specify a number of images to retrieve, a number of clusters (for training), and send a database and a query image.</div>"
           ; short_description
           "This is an image matching service. Image retrieval is a task, in which the user is getting images closest to the given one.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "transformations" (Cons "detector" (Cons "keypoint" (Cons "features" (Cons "visual" (Cons "matching" (Cons "image" Nil)))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: MatchingAPI.proto
;; Protobuf syntax: proto3
;; Protobuf package: MatchingApi
;; Prefix: snet.match-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; keyPoint ;;
;;;;;;;;;;;;;;

;; Define snet.match-service.keyPoint type
(: snet.match-service.keyPoint Type)

;; Define snet.match-service.keyPoint constuctor
(: snet.match-service.MkkeyPoint
   (->
    Float ; size
    Float ; angle
    Float ; x
    Float ; y
    Float ; response
    Int32 ; octave
    Int32 ; class_id
    snet.match-service.keyPoint))

;; Define snet.match-service.keyPoint access functions

;; Define snet.match-service.keyPoint.size
(: snet.match-service.keyPoint.size (-> snet.match-service.keyPoint Float))
(= (snet.match-service.keyPoint.size
    (snet.match-service.MkkeyPoint
     $size
     $angle
     $x
     $y
     $response
     $octave
     $class_id)) $size)

;; Define snet.match-service.keyPoint.angle
(: snet.match-service.keyPoint.angle (-> snet.match-service.keyPoint Float))
(= (snet.match-service.keyPoint.angle
    (snet.match-service.MkkeyPoint
     $size
     $angle
     $x
     $y
     $response
     $octave
     $class_id)) $angle)

;; Define snet.match-service.keyPoint.x
(: snet.match-service.keyPoint.x (-> snet.match-service.keyPoint Float))
(= (snet.match-service.keyPoint.x
    (snet.match-service.MkkeyPoint
     $size
     $angle
     $x
     $y
     $response
     $octave
     $class_id)) $x)

;; Define snet.match-service.keyPoint.y
(: snet.match-service.keyPoint.y (-> snet.match-service.keyPoint Float))
(= (snet.match-service.keyPoint.y
    (snet.match-service.MkkeyPoint
     $size
     $angle
     $x
     $y
     $response
     $octave
     $class_id)) $y)

;; Define snet.match-service.keyPoint.response
(: snet.match-service.keyPoint.response (-> snet.match-service.keyPoint Float))
(= (snet.match-service.keyPoint.response
    (snet.match-service.MkkeyPoint
     $size
     $angle
     $x
     $y
     $response
     $octave
     $class_id)) $response)

;; Define snet.match-service.keyPoint.octave
(: snet.match-service.keyPoint.octave (-> snet.match-service.keyPoint Int32))
(= (snet.match-service.keyPoint.octave
    (snet.match-service.MkkeyPoint
     $size
     $angle
     $x
     $y
     $response
     $octave
     $class_id)) $octave)

;; Define snet.match-service.keyPoint.class_id
(: snet.match-service.keyPoint.class_id (-> snet.match-service.keyPoint Int32))
(= (snet.match-service.keyPoint.class_id
    (snet.match-service.MkkeyPoint
     $size
     $angle
     $x
     $y
     $response
     $octave
     $class_id)) $class_id)

;;;;;;;;;;;;;;;;;;;;;
;; keypointRequest ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.keypointRequest type
(: snet.match-service.keypointRequest Type)

;; Define snet.match-service.keypointRequest constuctor
(: snet.match-service.MkkeypointRequest
   (->
    Bytes ; image
    String ; detector_name
    String ; parameters
    snet.match-service.keypointRequest))

;; Define snet.match-service.keypointRequest access functions

;; Define snet.match-service.keypointRequest.image
(: snet.match-service.keypointRequest.image (-> snet.match-service.keypointRequest Bytes))
(= (snet.match-service.keypointRequest.image
    (snet.match-service.MkkeypointRequest
     $image
     $detector_name
     $parameters)) $image)

;; Define snet.match-service.keypointRequest.detector_name
(: snet.match-service.keypointRequest.detector_name (-> snet.match-service.keypointRequest String))
(= (snet.match-service.keypointRequest.detector_name
    (snet.match-service.MkkeypointRequest
     $image
     $detector_name
     $parameters)) $detector_name)

;; Define snet.match-service.keypointRequest.parameters
(: snet.match-service.keypointRequest.parameters (-> snet.match-service.keypointRequest String))
(= (snet.match-service.keypointRequest.parameters
    (snet.match-service.MkkeypointRequest
     $image
     $detector_name
     $parameters)) $parameters)

;;;;;;;;;;;;;;;;;;;;;;
;; keypointResponse ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.keypointResponse type
(: snet.match-service.keypointResponse Type)

;; Define snet.match-service.keypointResponse constuctor
(: snet.match-service.MkkeypointResponse
   (->
    snet.match-service.keyPoint ; keypoints
    String ; status
    snet.match-service.keypointResponse))

;; Define snet.match-service.keypointResponse access functions

;; Define snet.match-service.keypointResponse.keypoints
(: snet.match-service.keypointResponse.keypoints (-> snet.match-service.keypointResponse snet.match-service.keyPoint))
(= (snet.match-service.keypointResponse.keypoints
    (snet.match-service.MkkeypointResponse
     $keypoints
     $status)) $keypoints)

;; Define snet.match-service.keypointResponse.status
(: snet.match-service.keypointResponse.status (-> snet.match-service.keypointResponse String))
(= (snet.match-service.keypointResponse.status
    (snet.match-service.MkkeypointResponse
     $keypoints
     $status)) $status)

;;;;;;;;;;;;;;;;;;;
;; oneDescriptor ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.oneDescriptor type
(: snet.match-service.oneDescriptor Type)

;; Define snet.match-service.oneDescriptor constuctor
(: snet.match-service.MkoneDescriptor
   (->
    Float ; onedescF
    Int32 ; onedescU
    snet.match-service.oneDescriptor))

;; Define snet.match-service.oneDescriptor access functions

;; Define snet.match-service.oneDescriptor.onedescF
(: snet.match-service.oneDescriptor.onedescF (-> snet.match-service.oneDescriptor Float))
(= (snet.match-service.oneDescriptor.onedescF
    (snet.match-service.MkoneDescriptor
     $onedescF
     $onedescU)) $onedescF)

;; Define snet.match-service.oneDescriptor.onedescU
(: snet.match-service.oneDescriptor.onedescU (-> snet.match-service.oneDescriptor Int32))
(= (snet.match-service.oneDescriptor.onedescU
    (snet.match-service.MkoneDescriptor
     $onedescF
     $onedescU)) $onedescU)

;;;;;;;;;;;;;;;;;;;;;;;
;; descriptorRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.descriptorRequest type
(: snet.match-service.descriptorRequest Type)

;; Define snet.match-service.descriptorRequest constuctor
(: snet.match-service.MkdescriptorRequest
   (->
    Bytes ; image
    String ; descriptor_name
    String ; desc_parameters
    String ; detector_name
    String ; det_parameters
    snet.match-service.descriptorRequest))

;; Define snet.match-service.descriptorRequest access functions

;; Define snet.match-service.descriptorRequest.image
(: snet.match-service.descriptorRequest.image (-> snet.match-service.descriptorRequest Bytes))
(= (snet.match-service.descriptorRequest.image
    (snet.match-service.MkdescriptorRequest
     $image
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $image)

;; Define snet.match-service.descriptorRequest.descriptor_name
(: snet.match-service.descriptorRequest.descriptor_name (-> snet.match-service.descriptorRequest String))
(= (snet.match-service.descriptorRequest.descriptor_name
    (snet.match-service.MkdescriptorRequest
     $image
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $descriptor_name)

;; Define snet.match-service.descriptorRequest.desc_parameters
(: snet.match-service.descriptorRequest.desc_parameters (-> snet.match-service.descriptorRequest String))
(= (snet.match-service.descriptorRequest.desc_parameters
    (snet.match-service.MkdescriptorRequest
     $image
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $desc_parameters)

;; Define snet.match-service.descriptorRequest.detector_name
(: snet.match-service.descriptorRequest.detector_name (-> snet.match-service.descriptorRequest String))
(= (snet.match-service.descriptorRequest.detector_name
    (snet.match-service.MkdescriptorRequest
     $image
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $detector_name)

;; Define snet.match-service.descriptorRequest.det_parameters
(: snet.match-service.descriptorRequest.det_parameters (-> snet.match-service.descriptorRequest String))
(= (snet.match-service.descriptorRequest.det_parameters
    (snet.match-service.MkdescriptorRequest
     $image
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $det_parameters)

;;;;;;;;;;;;;;;;;;;;;;;;
;; descriptorResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.descriptorResponse type
(: snet.match-service.descriptorResponse Type)

;; Define snet.match-service.descriptorResponse constuctor
(: snet.match-service.MkdescriptorResponse
   (->
    snet.match-service.oneDescriptor ; features
    snet.match-service.keyPoint ; keypoints
    String ; status
    snet.match-service.descriptorResponse))

;; Define snet.match-service.descriptorResponse access functions

;; Define snet.match-service.descriptorResponse.features
(: snet.match-service.descriptorResponse.features (-> snet.match-service.descriptorResponse snet.match-service.oneDescriptor))
(= (snet.match-service.descriptorResponse.features
    (snet.match-service.MkdescriptorResponse
     $features
     $keypoints
     $status)) $features)

;; Define snet.match-service.descriptorResponse.keypoints
(: snet.match-service.descriptorResponse.keypoints (-> snet.match-service.descriptorResponse snet.match-service.keyPoint))
(= (snet.match-service.descriptorResponse.keypoints
    (snet.match-service.MkdescriptorResponse
     $features
     $keypoints
     $status)) $keypoints)

;; Define snet.match-service.descriptorResponse.status
(: snet.match-service.descriptorResponse.status (-> snet.match-service.descriptorResponse String))
(= (snet.match-service.descriptorResponse.status
    (snet.match-service.MkdescriptorResponse
     $features
     $keypoints
     $status)) $status)

;;;;;;;;;;;;;;;;;;;;;
;; matchingRequest ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.matchingRequest type
(: snet.match-service.matchingRequest Type)

;; Define snet.match-service.matchingRequest constuctor
(: snet.match-service.MkmatchingRequest
   (->
    snet.match-service.oneDescriptor ; features_first
    snet.match-service.oneDescriptor ; features_second
    snet.match-service.matchingRequest))

;; Define snet.match-service.matchingRequest access functions

;; Define snet.match-service.matchingRequest.features_first
(: snet.match-service.matchingRequest.features_first (-> snet.match-service.matchingRequest snet.match-service.oneDescriptor))
(= (snet.match-service.matchingRequest.features_first
    (snet.match-service.MkmatchingRequest
     $features_first
     $features_second)) $features_first)

;; Define snet.match-service.matchingRequest.features_second
(: snet.match-service.matchingRequest.features_second (-> snet.match-service.matchingRequest snet.match-service.oneDescriptor))
(= (snet.match-service.matchingRequest.features_second
    (snet.match-service.MkmatchingRequest
     $features_first
     $features_second)) $features_second)

;;;;;;;;;;;;;;;;;;
;; matchedPoint ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.matchedPoint type
(: snet.match-service.matchedPoint Type)

;; Define snet.match-service.matchedPoint constuctor
(: snet.match-service.MkmatchedPoint
   (->
    Int32 ; queryIdx
    Int32 ; trainIdx
    Int32 ; imgIdx
    Float ; distance
    snet.match-service.matchedPoint))

;; Define snet.match-service.matchedPoint access functions

;; Define snet.match-service.matchedPoint.queryIdx
(: snet.match-service.matchedPoint.queryIdx (-> snet.match-service.matchedPoint Int32))
(= (snet.match-service.matchedPoint.queryIdx
    (snet.match-service.MkmatchedPoint
     $queryIdx
     $trainIdx
     $imgIdx
     $distance)) $queryIdx)

;; Define snet.match-service.matchedPoint.trainIdx
(: snet.match-service.matchedPoint.trainIdx (-> snet.match-service.matchedPoint Int32))
(= (snet.match-service.matchedPoint.trainIdx
    (snet.match-service.MkmatchedPoint
     $queryIdx
     $trainIdx
     $imgIdx
     $distance)) $trainIdx)

;; Define snet.match-service.matchedPoint.imgIdx
(: snet.match-service.matchedPoint.imgIdx (-> snet.match-service.matchedPoint Int32))
(= (snet.match-service.matchedPoint.imgIdx
    (snet.match-service.MkmatchedPoint
     $queryIdx
     $trainIdx
     $imgIdx
     $distance)) $imgIdx)

;; Define snet.match-service.matchedPoint.distance
(: snet.match-service.matchedPoint.distance (-> snet.match-service.matchedPoint Float))
(= (snet.match-service.matchedPoint.distance
    (snet.match-service.MkmatchedPoint
     $queryIdx
     $trainIdx
     $imgIdx
     $distance)) $distance)

;;;;;;;;;;;;;;;;;;;;;;
;; matchingResponse ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.matchingResponse type
(: snet.match-service.matchingResponse Type)

;; Define snet.match-service.matchingResponse constuctor
(: snet.match-service.MkmatchingResponse
   (->
    snet.match-service.matchedPoint ; all_matches
    String ; status
    snet.match-service.matchingResponse))

;; Define snet.match-service.matchingResponse access functions

;; Define snet.match-service.matchingResponse.all_matches
(: snet.match-service.matchingResponse.all_matches (-> snet.match-service.matchingResponse snet.match-service.matchedPoint))
(= (snet.match-service.matchingResponse.all_matches
    (snet.match-service.MkmatchingResponse
     $all_matches
     $status)) $all_matches)

;; Define snet.match-service.matchingResponse.status
(: snet.match-service.matchingResponse.status (-> snet.match-service.matchingResponse String))
(= (snet.match-service.matchingResponse.status
    (snet.match-service.MkmatchingResponse
     $all_matches
     $status)) $status)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; descriptorByKpsRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.descriptorByKpsRequest type
(: snet.match-service.descriptorByKpsRequest Type)

;; Define snet.match-service.descriptorByKpsRequest constuctor
(: snet.match-service.MkdescriptorByKpsRequest
   (->
    Bytes ; image
    String ; descriptor_name
    String ; desc_parameters
    snet.match-service.keyPoint ; keypoints
    snet.match-service.descriptorByKpsRequest))

;; Define snet.match-service.descriptorByKpsRequest access functions

;; Define snet.match-service.descriptorByKpsRequest.image
(: snet.match-service.descriptorByKpsRequest.image (-> snet.match-service.descriptorByKpsRequest Bytes))
(= (snet.match-service.descriptorByKpsRequest.image
    (snet.match-service.MkdescriptorByKpsRequest
     $image
     $descriptor_name
     $desc_parameters
     $keypoints)) $image)

;; Define snet.match-service.descriptorByKpsRequest.descriptor_name
(: snet.match-service.descriptorByKpsRequest.descriptor_name (-> snet.match-service.descriptorByKpsRequest String))
(= (snet.match-service.descriptorByKpsRequest.descriptor_name
    (snet.match-service.MkdescriptorByKpsRequest
     $image
     $descriptor_name
     $desc_parameters
     $keypoints)) $descriptor_name)

;; Define snet.match-service.descriptorByKpsRequest.desc_parameters
(: snet.match-service.descriptorByKpsRequest.desc_parameters (-> snet.match-service.descriptorByKpsRequest String))
(= (snet.match-service.descriptorByKpsRequest.desc_parameters
    (snet.match-service.MkdescriptorByKpsRequest
     $image
     $descriptor_name
     $desc_parameters
     $keypoints)) $desc_parameters)

;; Define snet.match-service.descriptorByKpsRequest.keypoints
(: snet.match-service.descriptorByKpsRequest.keypoints (-> snet.match-service.descriptorByKpsRequest snet.match-service.keyPoint))
(= (snet.match-service.descriptorByKpsRequest.keypoints
    (snet.match-service.MkdescriptorByKpsRequest
     $image
     $descriptor_name
     $desc_parameters
     $keypoints)) $keypoints)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; matchingByImageRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.matchingByImageRequest type
(: snet.match-service.matchingByImageRequest Type)

;; Define snet.match-service.matchingByImageRequest constuctor
(: snet.match-service.MkmatchingByImageRequest
   (->
    Bytes ; image_first
    Bytes ; image_second
    String ; descriptor_name
    String ; desc_parameters
    String ; detector_name
    String ; det_parameters
    snet.match-service.matchingByImageRequest))

;; Define snet.match-service.matchingByImageRequest access functions

;; Define snet.match-service.matchingByImageRequest.image_first
(: snet.match-service.matchingByImageRequest.image_first (-> snet.match-service.matchingByImageRequest Bytes))
(= (snet.match-service.matchingByImageRequest.image_first
    (snet.match-service.MkmatchingByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $image_first)

;; Define snet.match-service.matchingByImageRequest.image_second
(: snet.match-service.matchingByImageRequest.image_second (-> snet.match-service.matchingByImageRequest Bytes))
(= (snet.match-service.matchingByImageRequest.image_second
    (snet.match-service.MkmatchingByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $image_second)

;; Define snet.match-service.matchingByImageRequest.descriptor_name
(: snet.match-service.matchingByImageRequest.descriptor_name (-> snet.match-service.matchingByImageRequest String))
(= (snet.match-service.matchingByImageRequest.descriptor_name
    (snet.match-service.MkmatchingByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $descriptor_name)

;; Define snet.match-service.matchingByImageRequest.desc_parameters
(: snet.match-service.matchingByImageRequest.desc_parameters (-> snet.match-service.matchingByImageRequest String))
(= (snet.match-service.matchingByImageRequest.desc_parameters
    (snet.match-service.MkmatchingByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $desc_parameters)

;; Define snet.match-service.matchingByImageRequest.detector_name
(: snet.match-service.matchingByImageRequest.detector_name (-> snet.match-service.matchingByImageRequest String))
(= (snet.match-service.matchingByImageRequest.detector_name
    (snet.match-service.MkmatchingByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $detector_name)

;; Define snet.match-service.matchingByImageRequest.det_parameters
(: snet.match-service.matchingByImageRequest.det_parameters (-> snet.match-service.matchingByImageRequest String))
(= (snet.match-service.matchingByImageRequest.det_parameters
    (snet.match-service.MkmatchingByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters)) $det_parameters)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; matchingByImageResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.matchingByImageResponse type
(: snet.match-service.matchingByImageResponse Type)

;; Define snet.match-service.matchingByImageResponse constuctor
(: snet.match-service.MkmatchingByImageResponse
   (->
    snet.match-service.matchedPoint ; all_matches
    String ; status
    snet.match-service.keyPoint ; keypoints_first
    snet.match-service.keyPoint ; keypoints_second
    snet.match-service.matchingByImageResponse))

;; Define snet.match-service.matchingByImageResponse access functions

;; Define snet.match-service.matchingByImageResponse.all_matches
(: snet.match-service.matchingByImageResponse.all_matches (-> snet.match-service.matchingByImageResponse snet.match-service.matchedPoint))
(= (snet.match-service.matchingByImageResponse.all_matches
    (snet.match-service.MkmatchingByImageResponse
     $all_matches
     $status
     $keypoints_first
     $keypoints_second)) $all_matches)

;; Define snet.match-service.matchingByImageResponse.status
(: snet.match-service.matchingByImageResponse.status (-> snet.match-service.matchingByImageResponse String))
(= (snet.match-service.matchingByImageResponse.status
    (snet.match-service.MkmatchingByImageResponse
     $all_matches
     $status
     $keypoints_first
     $keypoints_second)) $status)

;; Define snet.match-service.matchingByImageResponse.keypoints_first
(: snet.match-service.matchingByImageResponse.keypoints_first (-> snet.match-service.matchingByImageResponse snet.match-service.keyPoint))
(= (snet.match-service.matchingByImageResponse.keypoints_first
    (snet.match-service.MkmatchingByImageResponse
     $all_matches
     $status
     $keypoints_first
     $keypoints_second)) $keypoints_first)

;; Define snet.match-service.matchingByImageResponse.keypoints_second
(: snet.match-service.matchingByImageResponse.keypoints_second (-> snet.match-service.matchingByImageResponse snet.match-service.keyPoint))
(= (snet.match-service.matchingByImageResponse.keypoints_second
    (snet.match-service.MkmatchingByImageResponse
     $all_matches
     $status
     $keypoints_first
     $keypoints_second)) $keypoints_second)

;;;;;;;;;;;;;;;;;;;;;;
;; transformRequest ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.transformRequest type
(: snet.match-service.transformRequest Type)

;; Define snet.match-service.transformRequest constuctor
(: snet.match-service.MktransformRequest
   (->
    snet.match-service.matchedPoint ; all_matches
    String ; transform_type
    snet.match-service.keyPoint ; keypoints_first
    snet.match-service.keyPoint ; keypoints_second
    String ; transform_input_parameters
    snet.match-service.transformRequest))

;; Define snet.match-service.transformRequest access functions

;; Define snet.match-service.transformRequest.all_matches
(: snet.match-service.transformRequest.all_matches (-> snet.match-service.transformRequest snet.match-service.matchedPoint))
(= (snet.match-service.transformRequest.all_matches
    (snet.match-service.MktransformRequest
     $all_matches
     $transform_type
     $keypoints_first
     $keypoints_second
     $transform_input_parameters)) $all_matches)

;; Define snet.match-service.transformRequest.transform_type
(: snet.match-service.transformRequest.transform_type (-> snet.match-service.transformRequest String))
(= (snet.match-service.transformRequest.transform_type
    (snet.match-service.MktransformRequest
     $all_matches
     $transform_type
     $keypoints_first
     $keypoints_second
     $transform_input_parameters)) $transform_type)

;; Define snet.match-service.transformRequest.keypoints_first
(: snet.match-service.transformRequest.keypoints_first (-> snet.match-service.transformRequest snet.match-service.keyPoint))
(= (snet.match-service.transformRequest.keypoints_first
    (snet.match-service.MktransformRequest
     $all_matches
     $transform_type
     $keypoints_first
     $keypoints_second
     $transform_input_parameters)) $keypoints_first)

;; Define snet.match-service.transformRequest.keypoints_second
(: snet.match-service.transformRequest.keypoints_second (-> snet.match-service.transformRequest snet.match-service.keyPoint))
(= (snet.match-service.transformRequest.keypoints_second
    (snet.match-service.MktransformRequest
     $all_matches
     $transform_type
     $keypoints_first
     $keypoints_second
     $transform_input_parameters)) $keypoints_second)

;; Define snet.match-service.transformRequest.transform_input_parameters
(: snet.match-service.transformRequest.transform_input_parameters (-> snet.match-service.transformRequest String))
(= (snet.match-service.transformRequest.transform_input_parameters
    (snet.match-service.MktransformRequest
     $all_matches
     $transform_type
     $keypoints_first
     $keypoints_second
     $transform_input_parameters)) $transform_input_parameters)

;;;;;;;;;;;;;;;;;;;;;;;
;; transformResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.transformResponse type
(: snet.match-service.transformResponse Type)

;; Define snet.match-service.transformResponse constuctor
(: snet.match-service.MktransformResponse
   (->
    String ; status
    Double ; transform_parameters
    snet.match-service.transformResponse))

;; Define snet.match-service.transformResponse access functions

;; Define snet.match-service.transformResponse.status
(: snet.match-service.transformResponse.status (-> snet.match-service.transformResponse String))
(= (snet.match-service.transformResponse.status
    (snet.match-service.MktransformResponse
     $status
     $transform_parameters)) $status)

;; Define snet.match-service.transformResponse.transform_parameters
(: snet.match-service.transformResponse.transform_parameters (-> snet.match-service.transformResponse Double))
(= (snet.match-service.transformResponse.transform_parameters
    (snet.match-service.MktransformResponse
     $status
     $transform_parameters)) $transform_parameters)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transformByImageRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.transformByImageRequest type
(: snet.match-service.transformByImageRequest Type)

;; Define snet.match-service.transformByImageRequest constuctor
(: snet.match-service.MktransformByImageRequest
   (->
    Bytes ; image_first
    Bytes ; image_second
    String ; descriptor_name
    String ; desc_parameters
    String ; detector_name
    String ; det_parameters
    String ; transform_type
    String ; transform_input_parameters
    snet.match-service.transformByImageRequest))

;; Define snet.match-service.transformByImageRequest access functions

;; Define snet.match-service.transformByImageRequest.image_first
(: snet.match-service.transformByImageRequest.image_first (-> snet.match-service.transformByImageRequest Bytes))
(= (snet.match-service.transformByImageRequest.image_first
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $image_first)

;; Define snet.match-service.transformByImageRequest.image_second
(: snet.match-service.transformByImageRequest.image_second (-> snet.match-service.transformByImageRequest Bytes))
(= (snet.match-service.transformByImageRequest.image_second
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $image_second)

;; Define snet.match-service.transformByImageRequest.descriptor_name
(: snet.match-service.transformByImageRequest.descriptor_name (-> snet.match-service.transformByImageRequest String))
(= (snet.match-service.transformByImageRequest.descriptor_name
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $descriptor_name)

;; Define snet.match-service.transformByImageRequest.desc_parameters
(: snet.match-service.transformByImageRequest.desc_parameters (-> snet.match-service.transformByImageRequest String))
(= (snet.match-service.transformByImageRequest.desc_parameters
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $desc_parameters)

;; Define snet.match-service.transformByImageRequest.detector_name
(: snet.match-service.transformByImageRequest.detector_name (-> snet.match-service.transformByImageRequest String))
(= (snet.match-service.transformByImageRequest.detector_name
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $detector_name)

;; Define snet.match-service.transformByImageRequest.det_parameters
(: snet.match-service.transformByImageRequest.det_parameters (-> snet.match-service.transformByImageRequest String))
(= (snet.match-service.transformByImageRequest.det_parameters
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $det_parameters)

;; Define snet.match-service.transformByImageRequest.transform_type
(: snet.match-service.transformByImageRequest.transform_type (-> snet.match-service.transformByImageRequest String))
(= (snet.match-service.transformByImageRequest.transform_type
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $transform_type)

;; Define snet.match-service.transformByImageRequest.transform_input_parameters
(: snet.match-service.transformByImageRequest.transform_input_parameters (-> snet.match-service.transformByImageRequest String))
(= (snet.match-service.transformByImageRequest.transform_input_parameters
    (snet.match-service.MktransformByImageRequest
     $image_first
     $image_second
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $transform_type
     $transform_input_parameters)) $transform_input_parameters)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; imageRetrievalRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.imageRetrievalRequest type
(: snet.match-service.imageRetrievalRequest Type)

;; Define snet.match-service.imageRetrievalRequest constuctor
(: snet.match-service.MkimageRetrievalRequest
   (->
    Bytes ; input_image
    Bytes ; image_base
    String ; descriptor_name
    String ; desc_parameters
    String ; detector_name
    String ; det_parameters
    Int32 ; numOfImagesToRetrieve
    Int32 ; numOfClusters
    snet.match-service.imageRetrievalRequest))

;; Define snet.match-service.imageRetrievalRequest access functions

;; Define snet.match-service.imageRetrievalRequest.input_image
(: snet.match-service.imageRetrievalRequest.input_image (-> snet.match-service.imageRetrievalRequest Bytes))
(= (snet.match-service.imageRetrievalRequest.input_image
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $input_image)

;; Define snet.match-service.imageRetrievalRequest.image_base
(: snet.match-service.imageRetrievalRequest.image_base (-> snet.match-service.imageRetrievalRequest Bytes))
(= (snet.match-service.imageRetrievalRequest.image_base
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $image_base)

;; Define snet.match-service.imageRetrievalRequest.descriptor_name
(: snet.match-service.imageRetrievalRequest.descriptor_name (-> snet.match-service.imageRetrievalRequest String))
(= (snet.match-service.imageRetrievalRequest.descriptor_name
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $descriptor_name)

;; Define snet.match-service.imageRetrievalRequest.desc_parameters
(: snet.match-service.imageRetrievalRequest.desc_parameters (-> snet.match-service.imageRetrievalRequest String))
(= (snet.match-service.imageRetrievalRequest.desc_parameters
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $desc_parameters)

;; Define snet.match-service.imageRetrievalRequest.detector_name
(: snet.match-service.imageRetrievalRequest.detector_name (-> snet.match-service.imageRetrievalRequest String))
(= (snet.match-service.imageRetrievalRequest.detector_name
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $detector_name)

;; Define snet.match-service.imageRetrievalRequest.det_parameters
(: snet.match-service.imageRetrievalRequest.det_parameters (-> snet.match-service.imageRetrievalRequest String))
(= (snet.match-service.imageRetrievalRequest.det_parameters
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $det_parameters)

;; Define snet.match-service.imageRetrievalRequest.numOfImagesToRetrieve
(: snet.match-service.imageRetrievalRequest.numOfImagesToRetrieve (-> snet.match-service.imageRetrievalRequest Int32))
(= (snet.match-service.imageRetrievalRequest.numOfImagesToRetrieve
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $numOfImagesToRetrieve)

;; Define snet.match-service.imageRetrievalRequest.numOfClusters
(: snet.match-service.imageRetrievalRequest.numOfClusters (-> snet.match-service.imageRetrievalRequest Int32))
(= (snet.match-service.imageRetrievalRequest.numOfClusters
    (snet.match-service.MkimageRetrievalRequest
     $input_image
     $image_base
     $descriptor_name
     $desc_parameters
     $detector_name
     $det_parameters
     $numOfImagesToRetrieve
     $numOfClusters)) $numOfClusters)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; imageRetrievalResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.match-service.imageRetrievalResponse type
(: snet.match-service.imageRetrievalResponse Type)

;; Define snet.match-service.imageRetrievalResponse constuctor
(: snet.match-service.MkimageRetrievalResponse
   (->
    Bytes ; images
    Float ; distances
    String ; status
    snet.match-service.imageRetrievalResponse))

;; Define snet.match-service.imageRetrievalResponse access functions

;; Define snet.match-service.imageRetrievalResponse.images
(: snet.match-service.imageRetrievalResponse.images (-> snet.match-service.imageRetrievalResponse Bytes))
(= (snet.match-service.imageRetrievalResponse.images
    (snet.match-service.MkimageRetrievalResponse
     $images
     $distances
     $status)) $images)

;; Define snet.match-service.imageRetrievalResponse.distances
(: snet.match-service.imageRetrievalResponse.distances (-> snet.match-service.imageRetrievalResponse Float))
(= (snet.match-service.imageRetrievalResponse.distances
    (snet.match-service.MkimageRetrievalResponse
     $images
     $distances
     $status)) $distances)

;; Define snet.match-service.imageRetrievalResponse.status
(: snet.match-service.imageRetrievalResponse.status (-> snet.match-service.imageRetrievalResponse String))
(= (snet.match-service.imageRetrievalResponse.status
    (snet.match-service.MkimageRetrievalResponse
     $images
     $distances
     $status)) $status)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; MatchApi ;;
;;;;;;;;;;;;;;

;; Define snet.match-service.getKP service method
(: snet.match-service.getKP (-> snet.match-service.keypointRequest snet.match-service.keypointResponse))

;; Define snet.match-service.getDescByImage service method
(: snet.match-service.getDescByImage (-> snet.match-service.descriptorRequest snet.match-service.descriptorResponse))

;; Define snet.match-service.getDescByKps service method
(: snet.match-service.getDescByKps (-> snet.match-service.descriptorByKpsRequest snet.match-service.descriptorResponse))

;; Define snet.match-service.getMatch service method
(: snet.match-service.getMatch (-> snet.match-service.matchingRequest snet.match-service.matchingResponse))

;; Define snet.match-service.getMatchByImage service method
(: snet.match-service.getMatchByImage (-> snet.match-service.matchingByImageRequest snet.match-service.matchingByImageResponse))

;; Define snet.match-service.getTransformParameters service method
(: snet.match-service.getTransformParameters (-> snet.match-service.transformRequest snet.match-service.transformResponse))

;; Define snet.match-service.getTransformParametersByImage service method
(: snet.match-service.getTransformParametersByImage (-> snet.match-service.transformByImageRequest snet.match-service.transformResponse))

;; Define snet.match-service.getClosestImages service method
(: snet.match-service.getClosestImages (-> snet.match-service.imageRetrievalRequest snet.match-service.imageRetrievalResponse))



;; ServiceID definition of snet.network-analytics-bipartite"
(: snet.network-analytics-bipartite (ServiceID snet))

;; Service metadata of snet.network-analytics-bipartite
(= (service snet.network-analytics-bipartite)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Bipartite graph analytics"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmWNK2u8CrxbkyEszBnfdhhxESUsCwKcNHGLDtuLxzpdZb"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/network-analytics-services"
           ; url content
           null
           ; description
           "<div>Network analytical service for bipartite graphs, enabling smarter, data-driven operational and business decisions, with methods for bipartite graph construction and projection.</div>"
           ; short_description
           "Network analytical service for bipartite graphs, enabling smarter, data-driven operational and business decisions, with methods for bipartite graph construction and projection.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "graph" (Cons "bipartite" (Cons "analytics" (Cons "network" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: network_analytics_bipartite.proto
;; Protobuf syntax: proto3
;; Prefix: snet.network-analytics-bipartite
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;
;; Edge ;;
;;;;;;;;;;

;; Define snet.network-analytics-bipartite.Edge type
(: snet.network-analytics-bipartite.Edge Type)

;; Define snet.network-analytics-bipartite.Edge constuctor
(: snet.network-analytics-bipartite.MkEdge
   (->
    String ; edge
    snet.network-analytics-bipartite.Edge))

;; Define snet.network-analytics-bipartite.Edge access functions

;; Define snet.network-analytics-bipartite.Edge.edge
(: snet.network-analytics-bipartite.Edge.edge (-> snet.network-analytics-bipartite.Edge String))
(= (snet.network-analytics-bipartite.Edge.edge
    (snet.network-analytics-bipartite.MkEdge
     $edge)) $edge)

;;;;;;;;;;;
;; Graph ;;
;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.Graph type
(: snet.network-analytics-bipartite.Graph Type)

;; Define snet.network-analytics-bipartite.Graph constuctor
(: snet.network-analytics-bipartite.MkGraph
   (->
    String ; nodes
    snet.network-analytics-bipartite.Edge ; edges
    Double ; weights
    snet.network-analytics-bipartite.Graph))

;; Define snet.network-analytics-bipartite.Graph access functions

;; Define snet.network-analytics-bipartite.Graph.nodes
(: snet.network-analytics-bipartite.Graph.nodes (-> snet.network-analytics-bipartite.Graph String))
(= (snet.network-analytics-bipartite.Graph.nodes
    (snet.network-analytics-bipartite.MkGraph
     $nodes
     $edges
     $weights)) $nodes)

;; Define snet.network-analytics-bipartite.Graph.edges
(: snet.network-analytics-bipartite.Graph.edges (-> snet.network-analytics-bipartite.Graph snet.network-analytics-bipartite.Edge))
(= (snet.network-analytics-bipartite.Graph.edges
    (snet.network-analytics-bipartite.MkGraph
     $nodes
     $edges
     $weights)) $edges)

;; Define snet.network-analytics-bipartite.Graph.weights
(: snet.network-analytics-bipartite.Graph.weights (-> snet.network-analytics-bipartite.Graph Double))
(= (snet.network-analytics-bipartite.Graph.weights
    (snet.network-analytics-bipartite.MkGraph
     $nodes
     $edges
     $weights)) $weights)

;;;;;;;;;;;;;;;;;;;;
;; BipartiteNodes ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.BipartiteNodes type
(: snet.network-analytics-bipartite.BipartiteNodes Type)

;; Define snet.network-analytics-bipartite.BipartiteNodes constuctor
(: snet.network-analytics-bipartite.MkBipartiteNodes
   (->
    String ; bipartite_0
    String ; bipartite_1
    snet.network-analytics-bipartite.BipartiteNodes))

;; Define snet.network-analytics-bipartite.BipartiteNodes access functions

;; Define snet.network-analytics-bipartite.BipartiteNodes.bipartite_0
(: snet.network-analytics-bipartite.BipartiteNodes.bipartite_0 (-> snet.network-analytics-bipartite.BipartiteNodes String))
(= (snet.network-analytics-bipartite.BipartiteNodes.bipartite_0
    (snet.network-analytics-bipartite.MkBipartiteNodes
     $bipartite_0
     $bipartite_1)) $bipartite_0)

;; Define snet.network-analytics-bipartite.BipartiteNodes.bipartite_1
(: snet.network-analytics-bipartite.BipartiteNodes.bipartite_1 (-> snet.network-analytics-bipartite.BipartiteNodes String))
(= (snet.network-analytics-bipartite.BipartiteNodes.bipartite_1
    (snet.network-analytics-bipartite.MkBipartiteNodes
     $bipartite_0
     $bipartite_1)) $bipartite_1)

;;;;;;;;;;;;;;;;;;;;
;; BipartiteGraph ;;
;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.BipartiteGraph type
(: snet.network-analytics-bipartite.BipartiteGraph Type)

;; Define snet.network-analytics-bipartite.BipartiteGraph constuctor
(: snet.network-analytics-bipartite.MkBipartiteGraph
   (->
    String ; bipartite_0
    String ; bipartite_1
    snet.network-analytics-bipartite.Edge ; edges
    Double ; weights
    snet.network-analytics-bipartite.BipartiteGraph))

;; Define snet.network-analytics-bipartite.BipartiteGraph access functions

;; Define snet.network-analytics-bipartite.BipartiteGraph.bipartite_0
(: snet.network-analytics-bipartite.BipartiteGraph.bipartite_0 (-> snet.network-analytics-bipartite.BipartiteGraph String))
(= (snet.network-analytics-bipartite.BipartiteGraph.bipartite_0
    (snet.network-analytics-bipartite.MkBipartiteGraph
     $bipartite_0
     $bipartite_1
     $edges
     $weights)) $bipartite_0)

;; Define snet.network-analytics-bipartite.BipartiteGraph.bipartite_1
(: snet.network-analytics-bipartite.BipartiteGraph.bipartite_1 (-> snet.network-analytics-bipartite.BipartiteGraph String))
(= (snet.network-analytics-bipartite.BipartiteGraph.bipartite_1
    (snet.network-analytics-bipartite.MkBipartiteGraph
     $bipartite_0
     $bipartite_1
     $edges
     $weights)) $bipartite_1)

;; Define snet.network-analytics-bipartite.BipartiteGraph.edges
(: snet.network-analytics-bipartite.BipartiteGraph.edges (-> snet.network-analytics-bipartite.BipartiteGraph snet.network-analytics-bipartite.Edge))
(= (snet.network-analytics-bipartite.BipartiteGraph.edges
    (snet.network-analytics-bipartite.MkBipartiteGraph
     $bipartite_0
     $bipartite_1
     $edges
     $weights)) $edges)

;; Define snet.network-analytics-bipartite.BipartiteGraph.weights
(: snet.network-analytics-bipartite.BipartiteGraph.weights (-> snet.network-analytics-bipartite.BipartiteGraph Double))
(= (snet.network-analytics-bipartite.BipartiteGraph.weights
    (snet.network-analytics-bipartite.MkBipartiteGraph
     $bipartite_0
     $bipartite_1
     $edges
     $weights)) $weights)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BipartiteGraphRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.BipartiteGraphRequest type
(: snet.network-analytics-bipartite.BipartiteGraphRequest Type)

;; Define snet.network-analytics-bipartite.BipartiteGraphRequest constuctor
(: snet.network-analytics-bipartite.MkBipartiteGraphRequest
   (->
    snet.network-analytics-bipartite.BipartiteNodes ; nodes
    snet.network-analytics-bipartite.Edge ; edges
    snet.network-analytics-bipartite.BipartiteGraphRequest))

;; Define snet.network-analytics-bipartite.BipartiteGraphRequest access functions

;; Define snet.network-analytics-bipartite.BipartiteGraphRequest.nodes
(: snet.network-analytics-bipartite.BipartiteGraphRequest.nodes (-> snet.network-analytics-bipartite.BipartiteGraphRequest snet.network-analytics-bipartite.BipartiteNodes))
(= (snet.network-analytics-bipartite.BipartiteGraphRequest.nodes
    (snet.network-analytics-bipartite.MkBipartiteGraphRequest
     $nodes
     $edges)) $nodes)

;; Define snet.network-analytics-bipartite.BipartiteGraphRequest.edges
(: snet.network-analytics-bipartite.BipartiteGraphRequest.edges (-> snet.network-analytics-bipartite.BipartiteGraphRequest snet.network-analytics-bipartite.Edge))
(= (snet.network-analytics-bipartite.BipartiteGraphRequest.edges
    (snet.network-analytics-bipartite.MkBipartiteGraphRequest
     $nodes
     $edges)) $edges)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BipartiteGraphResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.BipartiteGraphResponse type
(: snet.network-analytics-bipartite.BipartiteGraphResponse Type)

;; Define snet.network-analytics-bipartite.BipartiteGraphResponse constuctor
(: snet.network-analytics-bipartite.MkBipartiteGraphResponse
   (->
    Bool ; status
    String ; message
    snet.network-analytics-bipartite.BipartiteGraph ; output
    snet.network-analytics-bipartite.BipartiteGraphResponse))

;; Define snet.network-analytics-bipartite.BipartiteGraphResponse access functions

;; Define snet.network-analytics-bipartite.BipartiteGraphResponse.status
(: snet.network-analytics-bipartite.BipartiteGraphResponse.status (-> snet.network-analytics-bipartite.BipartiteGraphResponse Bool))
(= (snet.network-analytics-bipartite.BipartiteGraphResponse.status
    (snet.network-analytics-bipartite.MkBipartiteGraphResponse
     $status
     $message
     $output)) $status)

;; Define snet.network-analytics-bipartite.BipartiteGraphResponse.message
(: snet.network-analytics-bipartite.BipartiteGraphResponse.message (-> snet.network-analytics-bipartite.BipartiteGraphResponse String))
(= (snet.network-analytics-bipartite.BipartiteGraphResponse.message
    (snet.network-analytics-bipartite.MkBipartiteGraphResponse
     $status
     $message
     $output)) $message)

;; Define snet.network-analytics-bipartite.BipartiteGraphResponse.output
(: snet.network-analytics-bipartite.BipartiteGraphResponse.output (-> snet.network-analytics-bipartite.BipartiteGraphResponse snet.network-analytics-bipartite.BipartiteGraph))
(= (snet.network-analytics-bipartite.BipartiteGraphResponse.output
    (snet.network-analytics-bipartite.MkBipartiteGraphResponse
     $status
     $message
     $output)) $output)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ProjecetedGraphRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.ProjecetedGraphRequest type
(: snet.network-analytics-bipartite.ProjecetedGraphRequest Type)

;; Define snet.network-analytics-bipartite.ProjecetedGraphRequest constuctor
(: snet.network-analytics-bipartite.MkProjecetedGraphRequest
   (->
    snet.network-analytics-bipartite.BipartiteGraph ; graph
    String ; nodes
    String ; weight
    snet.network-analytics-bipartite.ProjecetedGraphRequest))

;; Define snet.network-analytics-bipartite.ProjecetedGraphRequest access functions

;; Define snet.network-analytics-bipartite.ProjecetedGraphRequest.graph
(: snet.network-analytics-bipartite.ProjecetedGraphRequest.graph (-> snet.network-analytics-bipartite.ProjecetedGraphRequest snet.network-analytics-bipartite.BipartiteGraph))
(= (snet.network-analytics-bipartite.ProjecetedGraphRequest.graph
    (snet.network-analytics-bipartite.MkProjecetedGraphRequest
     $graph
     $nodes
     $weight)) $graph)

;; Define snet.network-analytics-bipartite.ProjecetedGraphRequest.nodes
(: snet.network-analytics-bipartite.ProjecetedGraphRequest.nodes (-> snet.network-analytics-bipartite.ProjecetedGraphRequest String))
(= (snet.network-analytics-bipartite.ProjecetedGraphRequest.nodes
    (snet.network-analytics-bipartite.MkProjecetedGraphRequest
     $graph
     $nodes
     $weight)) $nodes)

;; Define snet.network-analytics-bipartite.ProjecetedGraphRequest.weight
(: snet.network-analytics-bipartite.ProjecetedGraphRequest.weight (-> snet.network-analytics-bipartite.ProjecetedGraphRequest String))
(= (snet.network-analytics-bipartite.ProjecetedGraphRequest.weight
    (snet.network-analytics-bipartite.MkProjecetedGraphRequest
     $graph
     $nodes
     $weight)) $weight)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ProjecetedGraphResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.ProjecetedGraphResponse type
(: snet.network-analytics-bipartite.ProjecetedGraphResponse Type)

;; Define snet.network-analytics-bipartite.ProjecetedGraphResponse constuctor
(: snet.network-analytics-bipartite.MkProjecetedGraphResponse
   (->
    Bool ; status
    String ; message
    snet.network-analytics-bipartite.Graph ; output
    snet.network-analytics-bipartite.ProjecetedGraphResponse))

;; Define snet.network-analytics-bipartite.ProjecetedGraphResponse access functions

;; Define snet.network-analytics-bipartite.ProjecetedGraphResponse.status
(: snet.network-analytics-bipartite.ProjecetedGraphResponse.status (-> snet.network-analytics-bipartite.ProjecetedGraphResponse Bool))
(= (snet.network-analytics-bipartite.ProjecetedGraphResponse.status
    (snet.network-analytics-bipartite.MkProjecetedGraphResponse
     $status
     $message
     $output)) $status)

;; Define snet.network-analytics-bipartite.ProjecetedGraphResponse.message
(: snet.network-analytics-bipartite.ProjecetedGraphResponse.message (-> snet.network-analytics-bipartite.ProjecetedGraphResponse String))
(= (snet.network-analytics-bipartite.ProjecetedGraphResponse.message
    (snet.network-analytics-bipartite.MkProjecetedGraphResponse
     $status
     $message
     $output)) $message)

;; Define snet.network-analytics-bipartite.ProjecetedGraphResponse.output
(: snet.network-analytics-bipartite.ProjecetedGraphResponse.output (-> snet.network-analytics-bipartite.ProjecetedGraphResponse snet.network-analytics-bipartite.Graph))
(= (snet.network-analytics-bipartite.ProjecetedGraphResponse.output
    (snet.network-analytics-bipartite.MkProjecetedGraphResponse
     $status
     $message
     $output)) $output)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NetworkAnalyticsBipartite ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-bipartite.BipartiteGraph service method
(: snet.network-analytics-bipartite.BipartiteGraph (-> snet.network-analytics-bipartite.BipartiteGraphRequest snet.network-analytics-bipartite.BipartiteGraphResponse))

;; Define snet.network-analytics-bipartite.ProjectedGraph service method
(: snet.network-analytics-bipartite.ProjectedGraph (-> snet.network-analytics-bipartite.ProjecetedGraphRequest snet.network-analytics-bipartite.ProjecetedGraphResponse))



;; ServiceID definition of snet.network-analytics-robustness"
(: snet.network-analytics-robustness (ServiceID snet))

;; Service metadata of snet.network-analytics-robustness
(= (service snet.network-analytics-robustness)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Network Robustness"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeJ9s7uzkMxMSiSAa3fNeHbyYiAnunDxN91F15ABg3CsM"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/network-analytics-services"
           ; url content
           null
           ; description
           "<div>Network analytical service computes various network robustness measures, enabling smarter data-driven operational and business decisions.</div>"
           ; short_description
           "Network analytical service computing various network robustness measures, enabling smarter, data-driven operational and business decisions.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "robustness" (Cons "analytics" (Cons "network" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: network_analytics_robustness.proto
;; Protobuf syntax: proto3
;; Prefix: snet.network-analytics-robustness
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;
;; Edge ;;
;;;;;;;;;;

;; Define snet.network-analytics-robustness.Edge type
(: snet.network-analytics-robustness.Edge Type)

;; Define snet.network-analytics-robustness.Edge constuctor
(: snet.network-analytics-robustness.MkEdge
   (->
    String ; edge
    snet.network-analytics-robustness.Edge))

;; Define snet.network-analytics-robustness.Edge access functions

;; Define snet.network-analytics-robustness.Edge.edge
(: snet.network-analytics-robustness.Edge.edge (-> snet.network-analytics-robustness.Edge String))
(= (snet.network-analytics-robustness.Edge.edge
    (snet.network-analytics-robustness.MkEdge
     $edge)) $edge)

;;;;;;;;;;;
;; Graph ;;
;;;;;;;;;;;

;; Define snet.network-analytics-robustness.Graph type
(: snet.network-analytics-robustness.Graph Type)

;; Define snet.network-analytics-robustness.Graph constuctor
(: snet.network-analytics-robustness.MkGraph
   (->
    String ; nodes
    snet.network-analytics-robustness.Edge ; edges
    Double ; weights
    snet.network-analytics-robustness.Graph))

;; Define snet.network-analytics-robustness.Graph access functions

;; Define snet.network-analytics-robustness.Graph.nodes
(: snet.network-analytics-robustness.Graph.nodes (-> snet.network-analytics-robustness.Graph String))
(= (snet.network-analytics-robustness.Graph.nodes
    (snet.network-analytics-robustness.MkGraph
     $nodes
     $edges
     $weights)) $nodes)

;; Define snet.network-analytics-robustness.Graph.edges
(: snet.network-analytics-robustness.Graph.edges (-> snet.network-analytics-robustness.Graph snet.network-analytics-robustness.Edge))
(= (snet.network-analytics-robustness.Graph.edges
    (snet.network-analytics-robustness.MkGraph
     $nodes
     $edges
     $weights)) $edges)

;; Define snet.network-analytics-robustness.Graph.weights
(: snet.network-analytics-robustness.Graph.weights (-> snet.network-analytics-robustness.Graph Double))
(= (snet.network-analytics-robustness.Graph.weights
    (snet.network-analytics-robustness.MkGraph
     $nodes
     $edges
     $weights)) $weights)

;;;;;;;;;;;;;;;;;;;;;;
;; node_betweenness ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-robustness.node_betweenness type
(: snet.network-analytics-robustness.node_betweenness Type)

;; Define snet.network-analytics-robustness.node_betweenness constuctor
(: snet.network-analytics-robustness.Mknode_betweenness
   (->
    String ; node
    Double ; node_centrality_value
    snet.network-analytics-robustness.node_betweenness))

;; Define snet.network-analytics-robustness.node_betweenness access functions

;; Define snet.network-analytics-robustness.node_betweenness.node
(: snet.network-analytics-robustness.node_betweenness.node (-> snet.network-analytics-robustness.node_betweenness String))
(= (snet.network-analytics-robustness.node_betweenness.node
    (snet.network-analytics-robustness.Mknode_betweenness
     $node
     $node_centrality_value)) $node)

;; Define snet.network-analytics-robustness.node_betweenness.node_centrality_value
(: snet.network-analytics-robustness.node_betweenness.node_centrality_value (-> snet.network-analytics-robustness.node_betweenness Double))
(= (snet.network-analytics-robustness.node_betweenness.node_centrality_value
    (snet.network-analytics-robustness.Mknode_betweenness
     $node
     $node_centrality_value)) $node_centrality_value)

;;;;;;;;;;;;;;;;;;;;;;
;; edge_betweenness ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-robustness.edge_betweenness type
(: snet.network-analytics-robustness.edge_betweenness Type)

;; Define snet.network-analytics-robustness.edge_betweenness constuctor
(: snet.network-analytics-robustness.Mkedge_betweenness
   (->
    snet.network-analytics-robustness.Edge ; edge
    Double ; edge_centrality_value
    snet.network-analytics-robustness.edge_betweenness))

;; Define snet.network-analytics-robustness.edge_betweenness access functions

;; Define snet.network-analytics-robustness.edge_betweenness.edge
(: snet.network-analytics-robustness.edge_betweenness.edge (-> snet.network-analytics-robustness.edge_betweenness snet.network-analytics-robustness.Edge))
(= (snet.network-analytics-robustness.edge_betweenness.edge
    (snet.network-analytics-robustness.Mkedge_betweenness
     $edge
     $edge_centrality_value)) $edge)

;; Define snet.network-analytics-robustness.edge_betweenness.edge_centrality_value
(: snet.network-analytics-robustness.edge_betweenness.edge_centrality_value (-> snet.network-analytics-robustness.edge_betweenness Double))
(= (snet.network-analytics-robustness.edge_betweenness.edge_centrality_value
    (snet.network-analytics-robustness.Mkedge_betweenness
     $edge
     $edge_centrality_value)) $edge_centrality_value)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MinNodesToRemoveRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-robustness.MinNodesToRemoveRequest type
(: snet.network-analytics-robustness.MinNodesToRemoveRequest Type)

;; Define snet.network-analytics-robustness.MinNodesToRemoveRequest constuctor
(: snet.network-analytics-robustness.MkMinNodesToRemoveRequest
   (->
    snet.network-analytics-robustness.Graph ; graph
    String ; source_node
    String ; target_node
    snet.network-analytics-robustness.MinNodesToRemoveRequest))

;; Define snet.network-analytics-robustness.MinNodesToRemoveRequest access functions

;; Define snet.network-analytics-robustness.MinNodesToRemoveRequest.graph
(: snet.network-analytics-robustness.MinNodesToRemoveRequest.graph (-> snet.network-analytics-robustness.MinNodesToRemoveRequest snet.network-analytics-robustness.Graph))
(= (snet.network-analytics-robustness.MinNodesToRemoveRequest.graph
    (snet.network-analytics-robustness.MkMinNodesToRemoveRequest
     $graph
     $source_node
     $target_node)) $graph)

;; Define snet.network-analytics-robustness.MinNodesToRemoveRequest.source_node
(: snet.network-analytics-robustness.MinNodesToRemoveRequest.source_node (-> snet.network-analytics-robustness.MinNodesToRemoveRequest String))
(= (snet.network-analytics-robustness.MinNodesToRemoveRequest.source_node
    (snet.network-analytics-robustness.MkMinNodesToRemoveRequest
     $graph
     $source_node
     $target_node)) $source_node)

;; Define snet.network-analytics-robustness.MinNodesToRemoveRequest.target_node
(: snet.network-analytics-robustness.MinNodesToRemoveRequest.target_node (-> snet.network-analytics-robustness.MinNodesToRemoveRequest String))
(= (snet.network-analytics-robustness.MinNodesToRemoveRequest.target_node
    (snet.network-analytics-robustness.MkMinNodesToRemoveRequest
     $graph
     $source_node
     $target_node)) $target_node)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MinNodesToRemoveResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-robustness.MinNodesToRemoveResponse type
(: snet.network-analytics-robustness.MinNodesToRemoveResponse Type)

;; Define snet.network-analytics-robustness.MinNodesToRemoveResponse constuctor
(: snet.network-analytics-robustness.MkMinNodesToRemoveResponse
   (->
    Bool ; status
    String ; message
    String ; nodes_output
    snet.network-analytics-robustness.Edge ; edges_output
    snet.network-analytics-robustness.MinNodesToRemoveResponse))

;; Define snet.network-analytics-robustness.MinNodesToRemoveResponse access functions

;; Define snet.network-analytics-robustness.MinNodesToRemoveResponse.status
(: snet.network-analytics-robustness.MinNodesToRemoveResponse.status (-> snet.network-analytics-robustness.MinNodesToRemoveResponse Bool))
(= (snet.network-analytics-robustness.MinNodesToRemoveResponse.status
    (snet.network-analytics-robustness.MkMinNodesToRemoveResponse
     $status
     $message
     $nodes_output
     $edges_output)) $status)

;; Define snet.network-analytics-robustness.MinNodesToRemoveResponse.message
(: snet.network-analytics-robustness.MinNodesToRemoveResponse.message (-> snet.network-analytics-robustness.MinNodesToRemoveResponse String))
(= (snet.network-analytics-robustness.MinNodesToRemoveResponse.message
    (snet.network-analytics-robustness.MkMinNodesToRemoveResponse
     $status
     $message
     $nodes_output
     $edges_output)) $message)

;; Define snet.network-analytics-robustness.MinNodesToRemoveResponse.nodes_output
(: snet.network-analytics-robustness.MinNodesToRemoveResponse.nodes_output (-> snet.network-analytics-robustness.MinNodesToRemoveResponse String))
(= (snet.network-analytics-robustness.MinNodesToRemoveResponse.nodes_output
    (snet.network-analytics-robustness.MkMinNodesToRemoveResponse
     $status
     $message
     $nodes_output
     $edges_output)) $nodes_output)

;; Define snet.network-analytics-robustness.MinNodesToRemoveResponse.edges_output
(: snet.network-analytics-robustness.MinNodesToRemoveResponse.edges_output (-> snet.network-analytics-robustness.MinNodesToRemoveResponse snet.network-analytics-robustness.Edge))
(= (snet.network-analytics-robustness.MinNodesToRemoveResponse.edges_output
    (snet.network-analytics-robustness.MkMinNodesToRemoveResponse
     $status
     $message
     $nodes_output
     $edges_output)) $edges_output)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MostImportantNodesEdgesSubsetRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest type
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest Type)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest constuctor
(: snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
   (->
    snet.network-analytics-robustness.Graph ; graph
    String ; source_nodes
    String ; target_nodes
    Int32 ; Type
    Bool ; normalized
    Bool ; directed
    Bool ; weight
    snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest))

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest access functions

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.graph
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.graph (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest snet.network-analytics-robustness.Graph))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.graph
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
     $graph
     $source_nodes
     $target_nodes
     $Type
     $normalized
     $directed
     $weight)) $graph)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.source_nodes
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.source_nodes (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest String))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.source_nodes
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
     $graph
     $source_nodes
     $target_nodes
     $Type
     $normalized
     $directed
     $weight)) $source_nodes)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.target_nodes
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.target_nodes (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest String))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.target_nodes
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
     $graph
     $source_nodes
     $target_nodes
     $Type
     $normalized
     $directed
     $weight)) $target_nodes)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.Type
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.Type (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest Int32))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.Type
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
     $graph
     $source_nodes
     $target_nodes
     $Type
     $normalized
     $directed
     $weight)) $Type)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.normalized
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.normalized (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest Bool))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.normalized
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
     $graph
     $source_nodes
     $target_nodes
     $Type
     $normalized
     $directed
     $weight)) $normalized)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.directed
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.directed (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest Bool))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.directed
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
     $graph
     $source_nodes
     $target_nodes
     $Type
     $normalized
     $directed
     $weight)) $directed)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.weight
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.weight (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest Bool))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest.weight
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetRequest
     $graph
     $source_nodes
     $target_nodes
     $Type
     $normalized
     $directed
     $weight)) $weight)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MostImportantNodesEdgesSubsetResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse type
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse Type)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse constuctor
(: snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetResponse
   (->
    Bool ; status
    String ; message
    snet.network-analytics-robustness.node_betweenness ; node_betweenness_centrality
    snet.network-analytics-robustness.edge_betweenness ; edge_betweenness_centrality
    snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse))

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse access functions

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.status
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.status (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse Bool))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.status
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetResponse
     $status
     $message
     $node_betweenness_centrality
     $edge_betweenness_centrality)) $status)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.message
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.message (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse String))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.message
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetResponse
     $status
     $message
     $node_betweenness_centrality
     $edge_betweenness_centrality)) $message)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.node_betweenness_centrality
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.node_betweenness_centrality (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse snet.network-analytics-robustness.node_betweenness))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.node_betweenness_centrality
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetResponse
     $status
     $message
     $node_betweenness_centrality
     $edge_betweenness_centrality)) $node_betweenness_centrality)

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.edge_betweenness_centrality
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.edge_betweenness_centrality (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse snet.network-analytics-robustness.edge_betweenness))
(= (snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse.edge_betweenness_centrality
    (snet.network-analytics-robustness.MkMostImportantNodesEdgesSubsetResponse
     $status
     $message
     $node_betweenness_centrality
     $edge_betweenness_centrality)) $edge_betweenness_centrality)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NetworkAnalyticsRobustness ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.network-analytics-robustness.MinNodesToRemove service method
(: snet.network-analytics-robustness.MinNodesToRemove (-> snet.network-analytics-robustness.MinNodesToRemoveRequest snet.network-analytics-robustness.MinNodesToRemoveResponse))

;; Define snet.network-analytics-robustness.MostImportantNodesEdgesSubset service method
(: snet.network-analytics-robustness.MostImportantNodesEdgesSubset (-> snet.network-analytics-robustness.MostImportantNodesEdgesSubsetRequest snet.network-analytics-robustness.MostImportantNodesEdgesSubsetResponse))



;; ServiceID definition of snet.news-summary"
(: snet.news-summary (ServiceID snet))

;; Service metadata of snet.news-summary
(= (service snet.news-summary)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Text Summaries"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeZZmFFZHgnw9DXdnn6XtB7DEzoDqQ43sZvhBniBnLies"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/nlp-services"
           ; url content
           null
           ; description
           "<div>Input an article and receive a brief textual summary of the article. Currently only trained on news articles.</div>"
           ; short_description
           "Input an article and receive a brief textual summary of the article. Currently only trained on news articles.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "summarization" (Cons "nlp" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: summary.proto
;; Protobuf syntax: proto3
;; Prefix: snet.news-summary
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Request ;;
;;;;;;;;;;;;;

;; Define snet.news-summary.Request type
(: snet.news-summary.Request Type)

;; Define snet.news-summary.Request constuctor
(: snet.news-summary.MkRequest
   (->
    String ; article_content
    snet.news-summary.Request))

;; Define snet.news-summary.Request access functions

;; Define snet.news-summary.Request.article_content
(: snet.news-summary.Request.article_content (-> snet.news-summary.Request String))
(= (snet.news-summary.Request.article_content
    (snet.news-summary.MkRequest
     $article_content)) $article_content)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define snet.news-summary.Result type
(: snet.news-summary.Result Type)

;; Define snet.news-summary.Result constuctor
(: snet.news-summary.MkResult
   (->
    String ; article_summary
    snet.news-summary.Result))

;; Define snet.news-summary.Result access functions

;; Define snet.news-summary.Result.article_summary
(: snet.news-summary.Result.article_summary (-> snet.news-summary.Result String))
(= (snet.news-summary.Result.article_summary
    (snet.news-summary.MkResult
     $article_summary)) $article_summary)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; TextSummary ;;
;;;;;;;;;;;;;;;;;

;; Define snet.news-summary.summary service method
(: snet.news-summary.summary (-> snet.news-summary.Request snet.news-summary.Result))



;; ServiceID definition of snet.opencog-miner"
(: snet.opencog-miner (ServiceID snet))

;; Service metadata of snet.opencog-miner
(= (service snet.opencog-miner)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "OpenCog Pattern Miner"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmV4n5kV5kiob2eAE5Ea3bJo1WX4aiZ8qZws7L9qfJE8CE"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/opencog-services"
           ; url content
           null
           ; description
           "<div>The pattern miner finds frequent and “surprising” subhypergraph patterns in the OpenCog AtomSpace. Examples of varying complexity levels can be found at https://github.com/singnet/miner/tree/master/examples/miner. You will need to examine the *.scm file in each example to understand how to input the knowledge base and desired pattern using Atomese. This information will need to be saved as a scheme file and then run using the guile interpreter.<br></br>The definitions of “Surprisingness” are detailed at https://wiki.opencog.org/w/Measuring_Surprisingness, and additional examples and much more complete information about the pattern miner is at https://wiki.opencog.org/w/Pattern_miner. </div>"
           ; short_description
           "The pattern miner finds frequent and “surprising” subhypergraph patterns in the OpenCog AtomSpace.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "pattern-miner" (Cons "opencog" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: opencog.proto
;; Protobuf syntax: proto3
;; Protobuf package: opencog_services
;; Prefix: snet.opencog-miner
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Command ;;
;;;;;;;;;;;;;

;; Define snet.opencog-miner.Command type
(: snet.opencog-miner.Command Type)

;; Define snet.opencog-miner.Command constuctor
(: snet.opencog-miner.MkCommand
   (->
    String ; input
    snet.opencog-miner.Command))

;; Define snet.opencog-miner.Command access functions

;; Define snet.opencog-miner.Command.input
(: snet.opencog-miner.Command.input (-> snet.opencog-miner.Command String))
(= (snet.opencog-miner.Command.input
    (snet.opencog-miner.MkCommand
     $input)) $input)

;;;;;;;;;;;;;;;;;;;
;; CommandOutput ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.opencog-miner.CommandOutput type
(: snet.opencog-miner.CommandOutput Type)

;; Define snet.opencog-miner.CommandOutput constuctor
(: snet.opencog-miner.MkCommandOutput
   (->
    String ; output
    snet.opencog-miner.CommandOutput))

;; Define snet.opencog-miner.CommandOutput access functions

;; Define snet.opencog-miner.CommandOutput.output
(: snet.opencog-miner.CommandOutput.output (-> snet.opencog-miner.CommandOutput String))
(= (snet.opencog-miner.CommandOutput.output
    (snet.opencog-miner.MkCommandOutput
     $output)) $output)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; OpencogServices ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define snet.opencog-miner.Execute service method
(: snet.opencog-miner.Execute (-> snet.opencog-miner.Command snet.opencog-miner.CommandOutput))

;; Define snet.opencog-miner.AsynchronousTask service method
(: snet.opencog-miner.AsynchronousTask (-> snet.opencog-miner.Command snet.opencog-miner.CommandOutput))



;; ServiceID definition of snet.opencog-vqa"
(: snet.opencog-vqa (ServiceID snet))

;; Service metadata of snet.opencog-vqa
(= (service snet.opencog-vqa)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       " iAnswer"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmSd62WiM2YyMgGSF4fqsQhhYFRVLUKdnWn9JDsqmQKGWb"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/semantic-vision/tree/master/services/vqa-service"
           ; url content
           null
           ; description
           "<div>Have a question? Ask your question in the form of image, or text and receive an answer.</div>"
           ; short_description
           "Have a question? Ask your question in the form of image, or text and receive an answer.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "vqa" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Prefix: snet.opencog-vqa
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; VqaRequest ;;
;;;;;;;;;;;;;;;;

;; Define snet.opencog-vqa.VqaRequest type
(: snet.opencog-vqa.VqaRequest Type)

;; Define snet.opencog-vqa.VqaRequest constuctor
(: snet.opencog-vqa.MkVqaRequest
   (->
    String ; question
    Bool ; use_pm
    Bytes ; image_data
    snet.opencog-vqa.VqaRequest))

;; Define snet.opencog-vqa.VqaRequest access functions

;; Define snet.opencog-vqa.VqaRequest.question
(: snet.opencog-vqa.VqaRequest.question (-> snet.opencog-vqa.VqaRequest String))
(= (snet.opencog-vqa.VqaRequest.question
    (snet.opencog-vqa.MkVqaRequest
     $question
     $use_pm
     $image_data)) $question)

;; Define snet.opencog-vqa.VqaRequest.use_pm
(: snet.opencog-vqa.VqaRequest.use_pm (-> snet.opencog-vqa.VqaRequest Bool))
(= (snet.opencog-vqa.VqaRequest.use_pm
    (snet.opencog-vqa.MkVqaRequest
     $question
     $use_pm
     $image_data)) $use_pm)

;; Define snet.opencog-vqa.VqaRequest.image_data
(: snet.opencog-vqa.VqaRequest.image_data (-> snet.opencog-vqa.VqaRequest Bytes))
(= (snet.opencog-vqa.VqaRequest.image_data
    (snet.opencog-vqa.MkVqaRequest
     $question
     $use_pm
     $image_data)) $image_data)

;;;;;;;;;;;;;;;;;
;; VqaResponse ;;
;;;;;;;;;;;;;;;;;

;; Define snet.opencog-vqa.VqaResponse type
(: snet.opencog-vqa.VqaResponse Type)

;; Define snet.opencog-vqa.VqaResponse constuctor
(: snet.opencog-vqa.MkVqaResponse
   (->
    String ; answer
    Bool ; ok
    String ; error_message
    snet.opencog-vqa.VqaResponse))

;; Define snet.opencog-vqa.VqaResponse access functions

;; Define snet.opencog-vqa.VqaResponse.answer
(: snet.opencog-vqa.VqaResponse.answer (-> snet.opencog-vqa.VqaResponse String))
(= (snet.opencog-vqa.VqaResponse.answer
    (snet.opencog-vqa.MkVqaResponse
     $answer
     $ok
     $error_message)) $answer)

;; Define snet.opencog-vqa.VqaResponse.ok
(: snet.opencog-vqa.VqaResponse.ok (-> snet.opencog-vqa.VqaResponse Bool))
(= (snet.opencog-vqa.VqaResponse.ok
    (snet.opencog-vqa.MkVqaResponse
     $answer
     $ok
     $error_message)) $ok)

;; Define snet.opencog-vqa.VqaResponse.error_message
(: snet.opencog-vqa.VqaResponse.error_message (-> snet.opencog-vqa.VqaResponse String))
(= (snet.opencog-vqa.VqaResponse.error_message
    (snet.opencog-vqa.MkVqaResponse
     $answer
     $ok
     $error_message)) $error_message)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; VqaService ;;
;;;;;;;;;;;;;;;;

;; Define snet.opencog-vqa.answer service method
(: snet.opencog-vqa.answer (-> snet.opencog-vqa.VqaRequest snet.opencog-vqa.VqaResponse))



;; ServiceID definition of snet.opennmt-romance-translator"
(: snet.opennmt-romance-translator (ServiceID snet))

;; Service metadata of snet.opennmt-romance-translator
(= (service snet.opennmt-romance-translator)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "OpenNMT Language Translation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmTsUbiQo3wKjPbkyfdsZe93UUXDEqA3Fc2L2YNQ1fgrJ2"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://singnet.github.io/nlp-services/users_guide/opennmt-romance-translator.html"
           ; url content
           null
           ; description
           "<div>Input a sentence in French (FR), Italian (IT), Portuguese (PT), Romanian (RO), or Spanish (ES) and translate the sentence into any other of these languages.<br></br>Using the multi-way OpenNMT Model, isolated for every language pair, the service gets the input text’s sentences, breaks them into tokens and then feeds the target model. The model output translated tokens that are put together to become the output of service (translated sentences).</div>"
           ; short_description
           "Input a sentence in French (FR), Italian (IT), Portuguese (PT), Romanian (RO), or Spanish (ES), and translate the sentence into any other of these languages.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "translator" (Cons "Romance" (Cons "opennmt" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: romance_translator.proto
;; Protobuf syntax: proto3
;; Prefix: snet.opennmt-romance-translator
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.opennmt-romance-translator.Input type
(: snet.opennmt-romance-translator.Input Type)

;; Define snet.opennmt-romance-translator.Input constuctor
(: snet.opennmt-romance-translator.MkInput
   (->
    String ; source_lang
    String ; target_lang
    String ; sentences_url
    snet.opennmt-romance-translator.Input))

;; Define snet.opennmt-romance-translator.Input access functions

;; Define snet.opennmt-romance-translator.Input.source_lang
(: snet.opennmt-romance-translator.Input.source_lang (-> snet.opennmt-romance-translator.Input String))
(= (snet.opennmt-romance-translator.Input.source_lang
    (snet.opennmt-romance-translator.MkInput
     $source_lang
     $target_lang
     $sentences_url)) $source_lang)

;; Define snet.opennmt-romance-translator.Input.target_lang
(: snet.opennmt-romance-translator.Input.target_lang (-> snet.opennmt-romance-translator.Input String))
(= (snet.opennmt-romance-translator.Input.target_lang
    (snet.opennmt-romance-translator.MkInput
     $source_lang
     $target_lang
     $sentences_url)) $target_lang)

;; Define snet.opennmt-romance-translator.Input.sentences_url
(: snet.opennmt-romance-translator.Input.sentences_url (-> snet.opennmt-romance-translator.Input String))
(= (snet.opennmt-romance-translator.Input.sentences_url
    (snet.opennmt-romance-translator.MkInput
     $source_lang
     $target_lang
     $sentences_url)) $sentences_url)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.opennmt-romance-translator.Output type
(: snet.opennmt-romance-translator.Output Type)

;; Define snet.opennmt-romance-translator.Output constuctor
(: snet.opennmt-romance-translator.MkOutput
   (->
    String ; translation
    snet.opennmt-romance-translator.Output))

;; Define snet.opennmt-romance-translator.Output access functions

;; Define snet.opennmt-romance-translator.Output.translation
(: snet.opennmt-romance-translator.Output.translation (-> snet.opennmt-romance-translator.Output String))
(= (snet.opennmt-romance-translator.Output.translation
    (snet.opennmt-romance-translator.MkOutput
     $translation)) $translation)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; RomanceTranslator ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.opennmt-romance-translator.translate service method
(: snet.opennmt-romance-translator.translate (-> snet.opennmt-romance-translator.Input snet.opennmt-romance-translator.Output))



;; ServiceID definition of snet.sentiment-analysis"
(: snet.sentiment-analysis (ServiceID snet))

;; Service metadata of snet.sentiment-analysis
(= (service snet.sentiment-analysis)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "AI Opinion"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmPLgevqV4e9C9Wc8HzRizi1JAPALggJHTtyGRZeB6mFDX"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/singnet/nlp-services/tree/master/sentiment-analysis"
           ; url content
           null
           ; description
           "<div>The service processes input sentences and returns the analyzed sentence with weights measuring positive (pos), neutral (neu), negative (neg), and combined (compound) sentiment values for each sentence. This allows a user to actively monitor text online to identify and extract subjective information from text, allowing for a greater understanding of sentiment as it relates to brands, products, or services.<br></br>The user must provide the following inputs: value: text sentence.</div>"
           ; short_description
           "Extract subjective information from textual inputs, allowing you to understand the social sentiment of your brand, product or service while monitoring online conversations.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "analysis" (Cons "sentiment" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: sentiment_analysis_rpc.proto
;; Protobuf syntax: proto3
;; Prefix: snet.sentiment-analysis
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; InputMessage ;;
;;;;;;;;;;;;;;;;;;

;; Define snet.sentiment-analysis.InputMessage type
(: snet.sentiment-analysis.InputMessage Type)

;; Define snet.sentiment-analysis.InputMessage constuctor
(: snet.sentiment-analysis.MkInputMessage
   (->
    String ; value
    snet.sentiment-analysis.InputMessage))

;; Define snet.sentiment-analysis.InputMessage access functions

;; Define snet.sentiment-analysis.InputMessage.value
(: snet.sentiment-analysis.InputMessage.value (-> snet.sentiment-analysis.InputMessage String))
(= (snet.sentiment-analysis.InputMessage.value
    (snet.sentiment-analysis.MkInputMessage
     $value)) $value)

;;;;;;;;;;;;;;;;;;;
;; OutputMessage ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.sentiment-analysis.OutputMessage type
(: snet.sentiment-analysis.OutputMessage Type)

;; Define snet.sentiment-analysis.OutputMessage constuctor
(: snet.sentiment-analysis.MkOutputMessage
   (->
    String ; value
    snet.sentiment-analysis.OutputMessage))

;; Define snet.sentiment-analysis.OutputMessage access functions

;; Define snet.sentiment-analysis.OutputMessage.value
(: snet.sentiment-analysis.OutputMessage.value (-> snet.sentiment-analysis.OutputMessage String))
(= (snet.sentiment-analysis.OutputMessage.value
    (snet.sentiment-analysis.MkOutputMessage
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; SentimentAnalysis ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define snet.sentiment-analysis.Analyze service method
(: snet.sentiment-analysis.Analyze (-> snet.sentiment-analysis.InputMessage snet.sentiment-analysis.OutputMessage))




;; OrganizationID definition of dhivakhartestorg
(: dhivakhartestorg OrganizationID)

;; Organization metadata of dhivakhartestorg
(= (organization dhivakhartestorg)
   ; Organization
   (MkOrganization
       ; org_name
       "dhivakhartestorg"
       ; org_id
       "dhivakhartestorg"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "Long description"
           ; short_description
           "short description")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of dhivakhartestorg


;; ServiceID definition of dhivakhartestorg.dhivakhartestservice"
(: dhivakhartestorg.dhivakhartestservice (ServiceID dhivakhartestorg))

;; Service metadata of dhivakhartestorg.dhivakhartestservice
(= (service dhivakhartestorg.dhivakhartestservice)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "dhivakhartestservice"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmS9yCFGwJbjKL86agFMHzo1Mo8PiVMUGjBDeZchpuFaYq"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "service long description"
           ; short_description
           "service short description")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "tag5" (Cons "tag4" (Cons "tag3" (Cons "tag2" (Cons "tag1" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: dhivakhartestorg.dhivakhartestservice
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define dhivakhartestorg.dhivakhartestservice.Numbers type
(: dhivakhartestorg.dhivakhartestservice.Numbers Type)

;; Define dhivakhartestorg.dhivakhartestservice.Numbers constuctor
(: dhivakhartestorg.dhivakhartestservice.MkNumbers
   (->
    Float ; a
    Float ; b
    dhivakhartestorg.dhivakhartestservice.Numbers))

;; Define dhivakhartestorg.dhivakhartestservice.Numbers access functions

;; Define dhivakhartestorg.dhivakhartestservice.Numbers.a
(: dhivakhartestorg.dhivakhartestservice.Numbers.a (-> dhivakhartestorg.dhivakhartestservice.Numbers Float))
(= (dhivakhartestorg.dhivakhartestservice.Numbers.a
    (dhivakhartestorg.dhivakhartestservice.MkNumbers
     $a
     $b)) $a)

;; Define dhivakhartestorg.dhivakhartestservice.Numbers.b
(: dhivakhartestorg.dhivakhartestservice.Numbers.b (-> dhivakhartestorg.dhivakhartestservice.Numbers Float))
(= (dhivakhartestorg.dhivakhartestservice.Numbers.b
    (dhivakhartestorg.dhivakhartestservice.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define dhivakhartestorg.dhivakhartestservice.Result type
(: dhivakhartestorg.dhivakhartestservice.Result Type)

;; Define dhivakhartestorg.dhivakhartestservice.Result constuctor
(: dhivakhartestorg.dhivakhartestservice.MkResult
   (->
    Float ; value
    dhivakhartestorg.dhivakhartestservice.Result))

;; Define dhivakhartestorg.dhivakhartestservice.Result access functions

;; Define dhivakhartestorg.dhivakhartestservice.Result.value
(: dhivakhartestorg.dhivakhartestservice.Result.value (-> dhivakhartestorg.dhivakhartestservice.Result Float))
(= (dhivakhartestorg.dhivakhartestservice.Result.value
    (dhivakhartestorg.dhivakhartestservice.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define dhivakhartestorg.dhivakhartestservice.add service method
(: dhivakhartestorg.dhivakhartestservice.add (-> dhivakhartestorg.dhivakhartestservice.Numbers dhivakhartestorg.dhivakhartestservice.Result))

;; Define dhivakhartestorg.dhivakhartestservice.sub service method
(: dhivakhartestorg.dhivakhartestservice.sub (-> dhivakhartestorg.dhivakhartestservice.Numbers dhivakhartestorg.dhivakhartestservice.Result))

;; Define dhivakhartestorg.dhivakhartestservice.mul service method
(: dhivakhartestorg.dhivakhartestservice.mul (-> dhivakhartestorg.dhivakhartestservice.Numbers dhivakhartestorg.dhivakhartestservice.Result))

;; Define dhivakhartestorg.dhivakhartestservice.div service method
(: dhivakhartestorg.dhivakhartestservice.div (-> dhivakhartestorg.dhivakhartestservice.Numbers dhivakhartestorg.dhivakhartestservice.Result))




;; OrganizationID definition of vivek_test
(: vivek_test OrganizationID)

;; Organization metadata of vivek_test
(= (organization vivek_test)
   ; Organization
   (MkOrganization
       ; org_name
       "Test"
       ; org_id
       "vivek_test"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "www.google.com"
           ; url content
           null
           ; description
           "long"
           ; short_description
           "short")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of vivek_test



;; OrganizationID definition of mozi
(: mozi OrganizationID)

;; Organization metadata of mozi
(= (organization mozi)
   ; Organization
   (MkOrganization
       ; org_name
       "mozi.ai"
       ; org_id
       "mozi"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://mozi.ai"
           ; url content
           null
           ; description
           "To realize the full potential of our growing body of medical knowledge, we have built a suite of intuitive bioinformatic tools powered by machine learning for scientists to explore the mechanics of disease more efficiently without the need to learn complex bioinformatic tools; facilitating the next generation of therapeutics faster with less resources"
           ; short_description
           "Deciphering the Mechanics of Disease with smarter tools")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of mozi


;; ServiceID definition of mozi.gene-annotation-service"
(: mozi.gene-annotation-service (ServiceID mozi))

;; Service metadata of mozi.gene-annotation-service
(= (service mozi.gene-annotation-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Gene Annotation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmYsP5w3cMQezJXGRnt6JoTpiiUtnw2i8p62CXHAh4kw8R"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://mozi-ai.github.io/annotation-service/"
           ; url content
           null
           ; description
           "Accepts list of human [HGNC](https://www.genenames.org/tools/search/#!/genes) gene symbols, finds annotations from example databases and displays the results as a browser-based interactive graph visualization."
           ; short_description
           "Accepts list of human HGNC gene symbols and displays the results as a browser-based interactive graph.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "atomese" (Cons "reactome" (Cons "gene-ontology" (Cons "human-gene-annotation" (Cons "bioinformatics" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: annotation.proto
;; Protobuf syntax: proto3
;; Prefix: mozi.gene-annotation-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Filter ;;
;;;;;;;;;;;;

;; Define mozi.gene-annotation-service.Filter type
(: mozi.gene-annotation-service.Filter Type)

;; Define mozi.gene-annotation-service.Filter constuctor
(: mozi.gene-annotation-service.MkFilter
   (->
    String ; filter
    String ; value
    mozi.gene-annotation-service.Filter))

;; Define mozi.gene-annotation-service.Filter access functions

;; Define mozi.gene-annotation-service.Filter.filter
(: mozi.gene-annotation-service.Filter.filter (-> mozi.gene-annotation-service.Filter String))
(= (mozi.gene-annotation-service.Filter.filter
    (mozi.gene-annotation-service.MkFilter
     $filter
     $value)) $filter)

;; Define mozi.gene-annotation-service.Filter.value
(: mozi.gene-annotation-service.Filter.value (-> mozi.gene-annotation-service.Filter String))
(= (mozi.gene-annotation-service.Filter.value
    (mozi.gene-annotation-service.MkFilter
     $filter
     $value)) $value)

;;;;;;;;;;;;;;;;
;; Annotation ;;
;;;;;;;;;;;;;;;;

;; Define mozi.gene-annotation-service.Annotation type
(: mozi.gene-annotation-service.Annotation Type)

;; Define mozi.gene-annotation-service.Annotation constuctor
(: mozi.gene-annotation-service.MkAnnotation
   (->
    String ; functionName
    mozi.gene-annotation-service.Filter ; filters
    mozi.gene-annotation-service.Annotation))

;; Define mozi.gene-annotation-service.Annotation access functions

;; Define mozi.gene-annotation-service.Annotation.functionName
(: mozi.gene-annotation-service.Annotation.functionName (-> mozi.gene-annotation-service.Annotation String))
(= (mozi.gene-annotation-service.Annotation.functionName
    (mozi.gene-annotation-service.MkAnnotation
     $functionName
     $filters)) $functionName)

;; Define mozi.gene-annotation-service.Annotation.filters
(: mozi.gene-annotation-service.Annotation.filters (-> mozi.gene-annotation-service.Annotation mozi.gene-annotation-service.Filter))
(= (mozi.gene-annotation-service.Annotation.filters
    (mozi.gene-annotation-service.MkAnnotation
     $functionName
     $filters)) $filters)

;;;;;;;;;;
;; Gene ;;
;;;;;;;;;;

;; Define mozi.gene-annotation-service.Gene type
(: mozi.gene-annotation-service.Gene Type)

;; Define mozi.gene-annotation-service.Gene constuctor
(: mozi.gene-annotation-service.MkGene
   (->
    String ; geneName
    mozi.gene-annotation-service.Gene))

;; Define mozi.gene-annotation-service.Gene access functions

;; Define mozi.gene-annotation-service.Gene.geneName
(: mozi.gene-annotation-service.Gene.geneName (-> mozi.gene-annotation-service.Gene String))
(= (mozi.gene-annotation-service.Gene.geneName
    (mozi.gene-annotation-service.MkGene
     $geneName)) $geneName)

;;;;;;;;;;;;;;;;;;;;;;;
;; AnnotationRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define mozi.gene-annotation-service.AnnotationRequest type
(: mozi.gene-annotation-service.AnnotationRequest Type)

;; Define mozi.gene-annotation-service.AnnotationRequest constuctor
(: mozi.gene-annotation-service.MkAnnotationRequest
   (->
    mozi.gene-annotation-service.Annotation ; annotations
    mozi.gene-annotation-service.Gene ; genes
    mozi.gene-annotation-service.AnnotationRequest))

;; Define mozi.gene-annotation-service.AnnotationRequest access functions

;; Define mozi.gene-annotation-service.AnnotationRequest.annotations
(: mozi.gene-annotation-service.AnnotationRequest.annotations (-> mozi.gene-annotation-service.AnnotationRequest mozi.gene-annotation-service.Annotation))
(= (mozi.gene-annotation-service.AnnotationRequest.annotations
    (mozi.gene-annotation-service.MkAnnotationRequest
     $annotations
     $genes)) $annotations)

;; Define mozi.gene-annotation-service.AnnotationRequest.genes
(: mozi.gene-annotation-service.AnnotationRequest.genes (-> mozi.gene-annotation-service.AnnotationRequest mozi.gene-annotation-service.Gene))
(= (mozi.gene-annotation-service.AnnotationRequest.genes
    (mozi.gene-annotation-service.MkAnnotationRequest
     $annotations
     $genes)) $genes)

;;;;;;;;;;;;;;;;;;;;;;;;
;; AnnotationResponse ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define mozi.gene-annotation-service.AnnotationResponse type
(: mozi.gene-annotation-service.AnnotationResponse Type)

;; Define mozi.gene-annotation-service.AnnotationResponse constuctor
(: mozi.gene-annotation-service.MkAnnotationResponse
   (->
    String ; result
    mozi.gene-annotation-service.AnnotationResponse))

;; Define mozi.gene-annotation-service.AnnotationResponse access functions

;; Define mozi.gene-annotation-service.AnnotationResponse.result
(: mozi.gene-annotation-service.AnnotationResponse.result (-> mozi.gene-annotation-service.AnnotationResponse String))
(= (mozi.gene-annotation-service.AnnotationResponse.result
    (mozi.gene-annotation-service.MkAnnotationResponse
     $result)) $result)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; Annotate ;;
;;;;;;;;;;;;;;

;; Define mozi.gene-annotation-service.Annotate service method
(: mozi.gene-annotation-service.Annotate (-> mozi.gene-annotation-service.AnnotationRequest mozi.gene-annotation-service.AnnotationResponse))




;; OrganizationID definition of 6509581150c8446e8a73b3fa71ebdb69
(: 6509581150c8446e8a73b3fa71ebdb69 OrganizationID)

;; Organization metadata of 6509581150c8446e8a73b3fa71ebdb69
(= (organization 6509581150c8446e8a73b3fa71ebdb69)
   ; Organization
   (MkOrganization
       ; org_name
       "tgo.tech"
       ; org_id
       "6509581150c8446e8a73b3fa71ebdb69"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           "https://github.com/tgotech"
           ; url content
           null
           ; description
           "Maker of Computational Intelligence"
           ; short_description
           "Maker of Computational Intelligence")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of 6509581150c8446e8a73b3fa71ebdb69


;; ServiceID definition of 6509581150c8446e8a73b3fa71ebdb69.geo-me"
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me (ServiceID 6509581150c8446e8a73b3fa71ebdb69))

;; Service metadata of 6509581150c8446e8a73b3fa71ebdb69.geo-me
(= (service 6509581150c8446e8a73b3fa71ebdb69.geo-me)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Geolocate Me"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmbcJHDmACJ2BB3LwXiyrfoHNQvh4X4kz91yox9zeTW87t"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/tgotech/geo-me-doco"
           ; url content
           null
           ; description
           "The service performs self-geolocation of an observer using a set of observations from the observer to a predefined set of landmarks. The service provides a re-sectioning function commonly used in overland navigation scenarios in the absence of global positioning system (GPS). This service is capable of fusing any combination of angles to or ranges from known landmarks and can handle erroneous measurements. Output of the service is a geolocation estimation latitude and longitude, a circular error of probability (CEP) provided as elliptical parameters (length, width and rotation). The service can provide an optional formatted kml file containing the computing scenario and result (this kml may be plotted on various geospatial interface systems)."
           ; short_description
           "The service performs self-geolocation of an observer using a set of observations from the observer to a predefined set of landmarks.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "sensorfusion" (Cons "navigation" (Cons "geolocation" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: geo-me.proto
;; Protobuf syntax: proto3
;; Prefix: 6509581150c8446e8a73b3fa71ebdb69.geo-me
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; GeoRequest ;;
;;;;;;;;;;;;;;;;

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest type
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest Type)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest constuctor
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeoRequest
   (->
    6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation ; observation
    6509581150c8446e8a73b3fa71ebdb69.geo-me.Target ; target
    Bool ; provide_kml_out
    6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest))

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest access functions

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.observation
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.observation (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.observation
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeoRequest
     $observation
     $target
     $provide_kml_out)) $observation)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.target
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.target (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.target
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeoRequest
     $observation
     $target
     $provide_kml_out)) $target)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.provide_kml_out
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.provide_kml_out (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest Bool))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest.provide_kml_out
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeoRequest
     $observation
     $target
     $provide_kml_out)) $provide_kml_out)

;;;;;;;;;;;;
;; Target ;;
;;;;;;;;;;;;

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target type
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target Type)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target constuctor
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.MkTarget
   (->
    String ; id
    String ; name
    Double ; true_lat
    Double ; true_lon
    6509581150c8446e8a73b3fa71ebdb69.geo-me.Target))

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target access functions

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.id
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.id (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target String))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.id
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkTarget
     $id
     $name
     $true_lat
     $true_lon)) $id)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.name
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.name (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target String))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.name
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkTarget
     $id
     $name
     $true_lat
     $true_lon)) $name)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.true_lat
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.true_lat (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.true_lat
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkTarget
     $id
     $name
     $true_lat
     $true_lon)) $true_lat)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.true_lon
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.true_lon (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Target Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Target.true_lon
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkTarget
     $id
     $name
     $true_lat
     $true_lon)) $true_lon)

;;;;;;;;;;;;;;;;;
;; Observation ;;
;;;;;;;;;;;;;;;;;

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation type
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation Type)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation constuctor
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
   (->
    Int64 ; id
    String ; assetId
    Double ; lat
    Double ; lon
    Double ; x
    Double ; y
    Double ; meas
    String ; type
    6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation))

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation access functions

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.id
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.id (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation Int64))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.id
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $id)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.assetId
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.assetId (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation String))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.assetId
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $assetId)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.lat
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.lat (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.lat
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $lat)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.lon
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.lon (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.lon
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $lon)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.x
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.x (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.x
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $x)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.y
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.y (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.y
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $y)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.meas
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.meas (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.meas
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $meas)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.type
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.type (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation String))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.Observation.type
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkObservation
     $id
     $assetId
     $lat
     $lon
     $x
     $y
     $meas
     $type)) $type)

;;;;;;;;;;;;;;;;;;;;;;;
;; GeolocationResult ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult type
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Type)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult constuctor
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
   (->
    Double ; residual
    Double ; residual_rk
    Double ; lat
    Double ; lon
    Double ; elp_long
    Double ; elp_short
    Double ; elp_rot
    String ; kml_output
    String ; status
    String ; statusMessage
    6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult))

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult access functions

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.residual
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.residual (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.residual
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $residual)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.residual_rk
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.residual_rk (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.residual_rk
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $residual_rk)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.lat
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.lat (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.lat
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $lat)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.lon
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.lon (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.lon
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $lon)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_long
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_long (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_long
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $elp_long)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_short
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_short (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_short
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $elp_short)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_rot
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_rot (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult Double))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.elp_rot
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $elp_rot)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.kml_output
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.kml_output (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult String))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.kml_output
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $kml_output)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.status
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.status (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult String))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.status
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $status)

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.statusMessage
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.statusMessage (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult String))
(= (6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult.statusMessage
    (6509581150c8446e8a73b3fa71ebdb69.geo-me.MkGeolocationResult
     $residual
     $residual_rk
     $lat
     $lon
     $elp_long
     $elp_short
     $elp_rot
     $kml_output
     $status
     $statusMessage)) $statusMessage)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefinition ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define 6509581150c8446e8a73b3fa71ebdb69.geo-me.geoFixMe service method
(: 6509581150c8446e8a73b3fa71ebdb69.geo-me.geoFixMe (-> 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeoRequest 6509581150c8446e8a73b3fa71ebdb69.geo-me.GeolocationResult))




;; OrganizationID definition of publisher_test_org_1
(: publisher_test_org_1 OrganizationID)

;; Organization metadata of publisher_test_org_1
(= (organization publisher_test_org_1)
   ; Organization
   (MkOrganization
       ; org_name
       "publisher_test_org_1"
       ; org_id
       "publisher_test_org_1"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "ld"
           ; short_description
           "sd")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of publisher_test_org_1


;; ServiceID definition of publisher_test_org_1.publisher_test_org_1_service"
(: publisher_test_org_1.publisher_test_org_1_service (ServiceID publisher_test_org_1))

;; Service metadata of publisher_test_org_1.publisher_test_org_1_service
(= (service publisher_test_org_1.publisher_test_org_1_service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "publisher_test_org_1_service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmXf3yGZ2AYLH6spVZVLgwFXSjAYZpGP2eNYx1qRoCTfBZ"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "Test service"
           ; short_description
           "Test service")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "tag3" (Cons "tag2" (Cons "tag1" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: publisher_test_org_1.publisher_test_org_1_service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define publisher_test_org_1.publisher_test_org_1_service.Numbers type
(: publisher_test_org_1.publisher_test_org_1_service.Numbers Type)

;; Define publisher_test_org_1.publisher_test_org_1_service.Numbers constuctor
(: publisher_test_org_1.publisher_test_org_1_service.MkNumbers
   (->
    Float ; a
    Float ; b
    publisher_test_org_1.publisher_test_org_1_service.Numbers))

;; Define publisher_test_org_1.publisher_test_org_1_service.Numbers access functions

;; Define publisher_test_org_1.publisher_test_org_1_service.Numbers.a
(: publisher_test_org_1.publisher_test_org_1_service.Numbers.a (-> publisher_test_org_1.publisher_test_org_1_service.Numbers Float))
(= (publisher_test_org_1.publisher_test_org_1_service.Numbers.a
    (publisher_test_org_1.publisher_test_org_1_service.MkNumbers
     $a
     $b)) $a)

;; Define publisher_test_org_1.publisher_test_org_1_service.Numbers.b
(: publisher_test_org_1.publisher_test_org_1_service.Numbers.b (-> publisher_test_org_1.publisher_test_org_1_service.Numbers Float))
(= (publisher_test_org_1.publisher_test_org_1_service.Numbers.b
    (publisher_test_org_1.publisher_test_org_1_service.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define publisher_test_org_1.publisher_test_org_1_service.Result type
(: publisher_test_org_1.publisher_test_org_1_service.Result Type)

;; Define publisher_test_org_1.publisher_test_org_1_service.Result constuctor
(: publisher_test_org_1.publisher_test_org_1_service.MkResult
   (->
    Float ; value
    publisher_test_org_1.publisher_test_org_1_service.Result))

;; Define publisher_test_org_1.publisher_test_org_1_service.Result access functions

;; Define publisher_test_org_1.publisher_test_org_1_service.Result.value
(: publisher_test_org_1.publisher_test_org_1_service.Result.value (-> publisher_test_org_1.publisher_test_org_1_service.Result Float))
(= (publisher_test_org_1.publisher_test_org_1_service.Result.value
    (publisher_test_org_1.publisher_test_org_1_service.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define publisher_test_org_1.publisher_test_org_1_service.add service method
(: publisher_test_org_1.publisher_test_org_1_service.add (-> publisher_test_org_1.publisher_test_org_1_service.Numbers publisher_test_org_1.publisher_test_org_1_service.Result))

;; Define publisher_test_org_1.publisher_test_org_1_service.sub service method
(: publisher_test_org_1.publisher_test_org_1_service.sub (-> publisher_test_org_1.publisher_test_org_1_service.Numbers publisher_test_org_1.publisher_test_org_1_service.Result))

;; Define publisher_test_org_1.publisher_test_org_1_service.mul service method
(: publisher_test_org_1.publisher_test_org_1_service.mul (-> publisher_test_org_1.publisher_test_org_1_service.Numbers publisher_test_org_1.publisher_test_org_1_service.Result))

;; Define publisher_test_org_1.publisher_test_org_1_service.div service method
(: publisher_test_org_1.publisher_test_org_1_service.div (-> publisher_test_org_1.publisher_test_org_1_service.Numbers publisher_test_org_1.publisher_test_org_1_service.Result))




;; OrganizationID definition of rejuve
(: rejuve OrganizationID)

;; Organization metadata of rejuve
(= (organization rejuve)
   ; Organization
   (MkOrganization
       ; org_name
       "rejuve"
       ; org_id
       "rejuve"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://rejuve.io/"
           ; url content
           null
           ; description
           "Next-Gen AI Solutions for Longevity , Covid , Bayesian Networks and Anomaly Detection"
           ; short_description
           "Simplify the expression of manually entered rules, augment with adtk anomaly detection, and explain the result. A detailed example of its use in healthcare, specifically Covid-19, is given in the covid_bayesnet.ipynb jupyter notebook.")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of rejuve


;; ServiceID definition of rejuve.covid-detection"
(: rejuve.covid-detection (ServiceID rejuve))

;; Service metadata of rejuve.covid-detection
(= (service rejuve.covid-detection)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Potential COVID Detection"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmPfVvyP8BCpPRg74zNF2gMmQv1HhyjMtXVpR11xkVJigt"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://rejuve.io"
           ; url content
           null
           ; description
           "<div>This service detects potential covid.</div>"
           ; short_description
           "This service uses recordings of breath, cough and calling out the letter A to detect COVID.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "covid" (Cons "cough" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: cough_test.proto
;; Protobuf syntax: proto3
;; Protobuf package: covid
;; Prefix: rejuve.covid-detection
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define rejuve.covid-detection.Audio type
(: rejuve.covid-detection.Audio Type)

;; Define rejuve.covid-detection.Audio constuctor
(: rejuve.covid-detection.MkAudio
   (->
    String ; cough_url
    String ; breath_url
    String ; vowel_sound_url
    String ; user_id
    String ; submission_id
    rejuve.covid-detection.Audio))

;; Define rejuve.covid-detection.Audio access functions

;; Define rejuve.covid-detection.Audio.cough_url
(: rejuve.covid-detection.Audio.cough_url (-> rejuve.covid-detection.Audio String))
(= (rejuve.covid-detection.Audio.cough_url
    (rejuve.covid-detection.MkAudio
     $cough_url
     $breath_url
     $vowel_sound_url
     $user_id
     $submission_id)) $cough_url)

;; Define rejuve.covid-detection.Audio.breath_url
(: rejuve.covid-detection.Audio.breath_url (-> rejuve.covid-detection.Audio String))
(= (rejuve.covid-detection.Audio.breath_url
    (rejuve.covid-detection.MkAudio
     $cough_url
     $breath_url
     $vowel_sound_url
     $user_id
     $submission_id)) $breath_url)

;; Define rejuve.covid-detection.Audio.vowel_sound_url
(: rejuve.covid-detection.Audio.vowel_sound_url (-> rejuve.covid-detection.Audio String))
(= (rejuve.covid-detection.Audio.vowel_sound_url
    (rejuve.covid-detection.MkAudio
     $cough_url
     $breath_url
     $vowel_sound_url
     $user_id
     $submission_id)) $vowel_sound_url)

;; Define rejuve.covid-detection.Audio.user_id
(: rejuve.covid-detection.Audio.user_id (-> rejuve.covid-detection.Audio String))
(= (rejuve.covid-detection.Audio.user_id
    (rejuve.covid-detection.MkAudio
     $cough_url
     $breath_url
     $vowel_sound_url
     $user_id
     $submission_id)) $user_id)

;; Define rejuve.covid-detection.Audio.submission_id
(: rejuve.covid-detection.Audio.submission_id (-> rejuve.covid-detection.Audio String))
(= (rejuve.covid-detection.Audio.submission_id
    (rejuve.covid-detection.MkAudio
     $cough_url
     $breath_url
     $vowel_sound_url
     $user_id
     $submission_id)) $submission_id)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define rejuve.covid-detection.Text type
(: rejuve.covid-detection.Text Type)

;; Define rejuve.covid-detection.Text constuctor
(: rejuve.covid-detection.MkText
   (->
    String ; text
    rejuve.covid-detection.Text))

;; Define rejuve.covid-detection.Text access functions

;; Define rejuve.covid-detection.Text.text
(: rejuve.covid-detection.Text.text (-> rejuve.covid-detection.Text String))
(= (rejuve.covid-detection.Text.text
    (rejuve.covid-detection.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;
;; COVID ;;
;;;;;;;;;;;

;; Define rejuve.covid-detection.s2t service method
(: rejuve.covid-detection.s2t (-> rejuve.covid-detection.Audio rejuve.covid-detection.Text))



;; ServiceID definition of rejuve.rejuve-longevity"
(: rejuve.rejuve-longevity (ServiceID rejuve))

;; Service metadata of rejuve.rejuve-longevity
(= (service rejuve.rejuve-longevity)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Rejuve Longevity"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmXyDF9LSPJrbJNhEaKs9m7BCJju2CuwE85DXUmUTXW4jR"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/Rejuve/covid-bayesnet/blob/master/README.md"
           ; url content
           null
           ; description
           "This Bayesian Net GRPC service creates a pomegranate Bayesian neural network in python, with functions to simplify the expression of manually entered rules, augment with adtk anomaly detection, and explain the result. A detailed example of its use in healthcare, specifically Covid-19, is given in the covid_bayesnet.ipynb jupyter notebook."
           ; short_description
           "Bayesian Network and Anomaly Detection Service")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "neural-network" (Cons "bayesian" (Cons "covid" (Cons "longevity" (Cons "rejuve" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: bayesian.proto
;; Protobuf syntax: proto3
;; Protobuf package: sn_bayes
;; Prefix: rejuve.rejuve-longevity
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; BayesianNetwork ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define rejuve.rejuve-longevity.BayesianNetwork type
(: rejuve.rejuve-longevity.BayesianNetwork Type)

;; Define rejuve.rejuve-longevity.DiscreteDistribution type
(: rejuve.rejuve-longevity.DiscreteDistribution Type)

;; Define rejuve.rejuve-longevity.Variable type
(: rejuve.rejuve-longevity.Variable Type)

;; Define rejuve.rejuve-longevity.Variable constuctor
(: rejuve.rejuve-longevity.MkVariable
   (->
    String ; name
    Float ; probability
    rejuve.rejuve-longevity.Variable))

;; Define rejuve.rejuve-longevity.Variable access functions

;; Define rejuve.rejuve-longevity.Variable.name
(: rejuve.rejuve-longevity.Variable.name (-> rejuve.rejuve-longevity.Variable String))
(= (rejuve.rejuve-longevity.Variable.name
    (rejuve.rejuve-longevity.MkVariable
     $name
     $probability)) $name)

;; Define rejuve.rejuve-longevity.Variable.probability
(: rejuve.rejuve-longevity.Variable.probability (-> rejuve.rejuve-longevity.Variable Float))
(= (rejuve.rejuve-longevity.Variable.probability
    (rejuve.rejuve-longevity.MkVariable
     $name
     $probability)) $probability)

;; Define rejuve.rejuve-longevity.DiscreteDistribution constuctor
(: rejuve.rejuve-longevity.MkDiscreteDistribution
   (->
    String ; name
    rejuve.rejuve-longevity.Variable ; variables
    rejuve.rejuve-longevity.DiscreteDistribution))

;; Define rejuve.rejuve-longevity.DiscreteDistribution access functions

;; Define rejuve.rejuve-longevity.DiscreteDistribution.name
(: rejuve.rejuve-longevity.DiscreteDistribution.name (-> rejuve.rejuve-longevity.DiscreteDistribution String))
(= (rejuve.rejuve-longevity.DiscreteDistribution.name
    (rejuve.rejuve-longevity.MkDiscreteDistribution
     $name
     $variables)) $name)

;; Define rejuve.rejuve-longevity.DiscreteDistribution.variables
(: rejuve.rejuve-longevity.DiscreteDistribution.variables (-> rejuve.rejuve-longevity.DiscreteDistribution rejuve.rejuve-longevity.Variable))
(= (rejuve.rejuve-longevity.DiscreteDistribution.variables
    (rejuve.rejuve-longevity.MkDiscreteDistribution
     $name
     $variables)) $variables)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityTable type
(: rejuve.rejuve-longevity.ConditionalProbabilityTable Type)

;; Define rejuve.rejuve-longevity.RandomVariable type
(: rejuve.rejuve-longevity.RandomVariable Type)

;; Define rejuve.rejuve-longevity.RandomVariable constuctor
(: rejuve.rejuve-longevity.MkRandomVariable
   (->
    String ; name
    rejuve.rejuve-longevity.RandomVariable))

;; Define rejuve.rejuve-longevity.RandomVariable access functions

;; Define rejuve.rejuve-longevity.RandomVariable.name
(: rejuve.rejuve-longevity.RandomVariable.name (-> rejuve.rejuve-longevity.RandomVariable String))
(= (rejuve.rejuve-longevity.RandomVariable.name
    (rejuve.rejuve-longevity.MkRandomVariable
     $name)) $name)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityRow type
(: rejuve.rejuve-longevity.ConditionalProbabilityRow Type)

;; Define rejuve.rejuve-longevity.RandomVariableValue type
(: rejuve.rejuve-longevity.RandomVariableValue Type)

;; Define rejuve.rejuve-longevity.RandomVariableValue constuctor
(: rejuve.rejuve-longevity.MkRandomVariableValue
   (->
    String ; name
    rejuve.rejuve-longevity.RandomVariableValue))

;; Define rejuve.rejuve-longevity.RandomVariableValue access functions

;; Define rejuve.rejuve-longevity.RandomVariableValue.name
(: rejuve.rejuve-longevity.RandomVariableValue.name (-> rejuve.rejuve-longevity.RandomVariableValue String))
(= (rejuve.rejuve-longevity.RandomVariableValue.name
    (rejuve.rejuve-longevity.MkRandomVariableValue
     $name)) $name)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityRow constuctor
(: rejuve.rejuve-longevity.MkConditionalProbabilityRow
   (->
    rejuve.rejuve-longevity.RandomVariableValue ; randomVariableValues
    Float ; probability
    rejuve.rejuve-longevity.ConditionalProbabilityRow))

;; Define rejuve.rejuve-longevity.ConditionalProbabilityRow access functions

;; Define rejuve.rejuve-longevity.ConditionalProbabilityRow.randomVariableValues
(: rejuve.rejuve-longevity.ConditionalProbabilityRow.randomVariableValues (-> rejuve.rejuve-longevity.ConditionalProbabilityRow rejuve.rejuve-longevity.RandomVariableValue))
(= (rejuve.rejuve-longevity.ConditionalProbabilityRow.randomVariableValues
    (rejuve.rejuve-longevity.MkConditionalProbabilityRow
     $randomVariableValues
     $probability)) $randomVariableValues)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityRow.probability
(: rejuve.rejuve-longevity.ConditionalProbabilityRow.probability (-> rejuve.rejuve-longevity.ConditionalProbabilityRow Float))
(= (rejuve.rejuve-longevity.ConditionalProbabilityRow.probability
    (rejuve.rejuve-longevity.MkConditionalProbabilityRow
     $randomVariableValues
     $probability)) $probability)

;; Define rejuve.rejuve-longevity.OutVar type
(: rejuve.rejuve-longevity.OutVar Type)

;; Define rejuve.rejuve-longevity.OutVar constuctor
(: rejuve.rejuve-longevity.MkOutVar
   (->
    String ; name
    rejuve.rejuve-longevity.OutVar))

;; Define rejuve.rejuve-longevity.OutVar access functions

;; Define rejuve.rejuve-longevity.OutVar.name
(: rejuve.rejuve-longevity.OutVar.name (-> rejuve.rejuve-longevity.OutVar String))
(= (rejuve.rejuve-longevity.OutVar.name
    (rejuve.rejuve-longevity.MkOutVar
     $name)) $name)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityTable constuctor
(: rejuve.rejuve-longevity.MkConditionalProbabilityTable
   (->
    String ; name
    rejuve.rejuve-longevity.RandomVariable ; randomVariables
    rejuve.rejuve-longevity.ConditionalProbabilityRow ; conditionalProbabilityRows
    rejuve.rejuve-longevity.OutVar ; outvars
    rejuve.rejuve-longevity.ConditionalProbabilityTable))

;; Define rejuve.rejuve-longevity.ConditionalProbabilityTable access functions

;; Define rejuve.rejuve-longevity.ConditionalProbabilityTable.name
(: rejuve.rejuve-longevity.ConditionalProbabilityTable.name (-> rejuve.rejuve-longevity.ConditionalProbabilityTable String))
(= (rejuve.rejuve-longevity.ConditionalProbabilityTable.name
    (rejuve.rejuve-longevity.MkConditionalProbabilityTable
     $name
     $randomVariables
     $conditionalProbabilityRows
     $outvars)) $name)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityTable.randomVariables
(: rejuve.rejuve-longevity.ConditionalProbabilityTable.randomVariables (-> rejuve.rejuve-longevity.ConditionalProbabilityTable rejuve.rejuve-longevity.RandomVariable))
(= (rejuve.rejuve-longevity.ConditionalProbabilityTable.randomVariables
    (rejuve.rejuve-longevity.MkConditionalProbabilityTable
     $name
     $randomVariables
     $conditionalProbabilityRows
     $outvars)) $randomVariables)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityTable.conditionalProbabilityRows
(: rejuve.rejuve-longevity.ConditionalProbabilityTable.conditionalProbabilityRows (-> rejuve.rejuve-longevity.ConditionalProbabilityTable rejuve.rejuve-longevity.ConditionalProbabilityRow))
(= (rejuve.rejuve-longevity.ConditionalProbabilityTable.conditionalProbabilityRows
    (rejuve.rejuve-longevity.MkConditionalProbabilityTable
     $name
     $randomVariables
     $conditionalProbabilityRows
     $outvars)) $conditionalProbabilityRows)

;; Define rejuve.rejuve-longevity.ConditionalProbabilityTable.outvars
(: rejuve.rejuve-longevity.ConditionalProbabilityTable.outvars (-> rejuve.rejuve-longevity.ConditionalProbabilityTable rejuve.rejuve-longevity.OutVar))
(= (rejuve.rejuve-longevity.ConditionalProbabilityTable.outvars
    (rejuve.rejuve-longevity.MkConditionalProbabilityTable
     $name
     $randomVariables
     $conditionalProbabilityRows
     $outvars)) $outvars)

;; Define rejuve.rejuve-longevity.Anomaly type
(: rejuve.rejuve-longevity.Anomaly Type)

;; Define rejuve.rejuve-longevity.Detector type
(: rejuve.rejuve-longevity.Detector Type)

;; Define rejuve.rejuve-longevity.Detector constuctor
(: rejuve.rejuve-longevity.MkDetector
   (->
    String ; name
    rejuve.rejuve-longevity.Detector))

;; Define rejuve.rejuve-longevity.Detector access functions

;; Define rejuve.rejuve-longevity.Detector.name
(: rejuve.rejuve-longevity.Detector.name (-> rejuve.rejuve-longevity.Detector String))
(= (rejuve.rejuve-longevity.Detector.name
    (rejuve.rejuve-longevity.MkDetector
     $name)) $name)

;; Define rejuve.rejuve-longevity.Anomaly constuctor
(: rejuve.rejuve-longevity.MkAnomaly
   (->
    rejuve.rejuve-longevity.Detector ; detectors
    Bool ; is_all
    String ; varName
    Int32 ; n_steps
    Int32 ; step_size
    Float ; c
    Int32 ; n
    Float ; high
    Float ; low
    Float ; high_percent
    Float ; low_percent
    rejuve.rejuve-longevity.Anomaly))

;; Define rejuve.rejuve-longevity.Anomaly access functions

;; Define rejuve.rejuve-longevity.Anomaly.detectors
(: rejuve.rejuve-longevity.Anomaly.detectors (-> rejuve.rejuve-longevity.Anomaly rejuve.rejuve-longevity.Detector))
(= (rejuve.rejuve-longevity.Anomaly.detectors
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $detectors)

;; Define rejuve.rejuve-longevity.Anomaly.is_all
(: rejuve.rejuve-longevity.Anomaly.is_all (-> rejuve.rejuve-longevity.Anomaly Bool))
(= (rejuve.rejuve-longevity.Anomaly.is_all
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $is_all)

;; Define rejuve.rejuve-longevity.Anomaly.varName
(: rejuve.rejuve-longevity.Anomaly.varName (-> rejuve.rejuve-longevity.Anomaly String))
(= (rejuve.rejuve-longevity.Anomaly.varName
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $varName)

;; Define rejuve.rejuve-longevity.Anomaly.n_steps
(: rejuve.rejuve-longevity.Anomaly.n_steps (-> rejuve.rejuve-longevity.Anomaly Int32))
(= (rejuve.rejuve-longevity.Anomaly.n_steps
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $n_steps)

;; Define rejuve.rejuve-longevity.Anomaly.step_size
(: rejuve.rejuve-longevity.Anomaly.step_size (-> rejuve.rejuve-longevity.Anomaly Int32))
(= (rejuve.rejuve-longevity.Anomaly.step_size
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $step_size)

;; Define rejuve.rejuve-longevity.Anomaly.c
(: rejuve.rejuve-longevity.Anomaly.c (-> rejuve.rejuve-longevity.Anomaly Float))
(= (rejuve.rejuve-longevity.Anomaly.c
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $c)

;; Define rejuve.rejuve-longevity.Anomaly.n
(: rejuve.rejuve-longevity.Anomaly.n (-> rejuve.rejuve-longevity.Anomaly Int32))
(= (rejuve.rejuve-longevity.Anomaly.n
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $n)

;; Define rejuve.rejuve-longevity.Anomaly.high
(: rejuve.rejuve-longevity.Anomaly.high (-> rejuve.rejuve-longevity.Anomaly Float))
(= (rejuve.rejuve-longevity.Anomaly.high
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $high)

;; Define rejuve.rejuve-longevity.Anomaly.low
(: rejuve.rejuve-longevity.Anomaly.low (-> rejuve.rejuve-longevity.Anomaly Float))
(= (rejuve.rejuve-longevity.Anomaly.low
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $low)

;; Define rejuve.rejuve-longevity.Anomaly.high_percent
(: rejuve.rejuve-longevity.Anomaly.high_percent (-> rejuve.rejuve-longevity.Anomaly Float))
(= (rejuve.rejuve-longevity.Anomaly.high_percent
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $high_percent)

;; Define rejuve.rejuve-longevity.Anomaly.low_percent
(: rejuve.rejuve-longevity.Anomaly.low_percent (-> rejuve.rejuve-longevity.Anomaly Float))
(= (rejuve.rejuve-longevity.Anomaly.low_percent
    (rejuve.rejuve-longevity.MkAnomaly
     $detectors
     $is_all
     $varName
     $n_steps
     $step_size
     $c
     $n
     $high
     $low
     $high_percent
     $low_percent)) $low_percent)

;; Define rejuve.rejuve-longevity.BayesianNetwork constuctor
(: rejuve.rejuve-longevity.MkBayesianNetwork
   (->
    rejuve.rejuve-longevity.DiscreteDistribution ; discreteDistributions
    rejuve.rejuve-longevity.ConditionalProbabilityTable ; conditionalProbabilityTables
    rejuve.rejuve-longevity.Anomaly ; anomalies
    rejuve.rejuve-longevity.BayesianNetwork))

;; Define rejuve.rejuve-longevity.BayesianNetwork access functions

;; Define rejuve.rejuve-longevity.BayesianNetwork.discreteDistributions
(: rejuve.rejuve-longevity.BayesianNetwork.discreteDistributions (-> rejuve.rejuve-longevity.BayesianNetwork rejuve.rejuve-longevity.DiscreteDistribution))
(= (rejuve.rejuve-longevity.BayesianNetwork.discreteDistributions
    (rejuve.rejuve-longevity.MkBayesianNetwork
     $discreteDistributions
     $conditionalProbabilityTables
     $anomalies)) $discreteDistributions)

;; Define rejuve.rejuve-longevity.BayesianNetwork.conditionalProbabilityTables
(: rejuve.rejuve-longevity.BayesianNetwork.conditionalProbabilityTables (-> rejuve.rejuve-longevity.BayesianNetwork rejuve.rejuve-longevity.ConditionalProbabilityTable))
(= (rejuve.rejuve-longevity.BayesianNetwork.conditionalProbabilityTables
    (rejuve.rejuve-longevity.MkBayesianNetwork
     $discreteDistributions
     $conditionalProbabilityTables
     $anomalies)) $conditionalProbabilityTables)

;; Define rejuve.rejuve-longevity.BayesianNetwork.anomalies
(: rejuve.rejuve-longevity.BayesianNetwork.anomalies (-> rejuve.rejuve-longevity.BayesianNetwork rejuve.rejuve-longevity.Anomaly))
(= (rejuve.rejuve-longevity.BayesianNetwork.anomalies
    (rejuve.rejuve-longevity.MkBayesianNetwork
     $discreteDistributions
     $conditionalProbabilityTables
     $anomalies)) $anomalies)

;;;;;;;;
;; Id ;;
;;;;;;;;

;; Define rejuve.rejuve-longevity.Id type
(: rejuve.rejuve-longevity.Id Type)

;; Define rejuve.rejuve-longevity.Id constuctor
(: rejuve.rejuve-longevity.MkId
   (->
    Int32 ; id
    String ; error_msg
    rejuve.rejuve-longevity.Id))

;; Define rejuve.rejuve-longevity.Id access functions

;; Define rejuve.rejuve-longevity.Id.id
(: rejuve.rejuve-longevity.Id.id (-> rejuve.rejuve-longevity.Id Int32))
(= (rejuve.rejuve-longevity.Id.id
    (rejuve.rejuve-longevity.MkId
     $id
     $error_msg)) $id)

;; Define rejuve.rejuve-longevity.Id.error_msg
(: rejuve.rejuve-longevity.Id.error_msg (-> rejuve.rejuve-longevity.Id String))
(= (rejuve.rejuve-longevity.Id.error_msg
    (rejuve.rejuve-longevity.MkId
     $id
     $error_msg)) $error_msg)

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define rejuve.rejuve-longevity.Query type
(: rejuve.rejuve-longevity.Query Type)

;; Define rejuve.rejuve-longevity.Evidence type
(: rejuve.rejuve-longevity.Evidence Type)

;; Define rejuve.rejuve-longevity.Evidence constuctor
(: rejuve.rejuve-longevity.MkEvidence
   (->
    Int32 ; var_num
    Int32 ; response
    rejuve.rejuve-longevity.Evidence))

;; Define rejuve.rejuve-longevity.Evidence access functions

;; Define rejuve.rejuve-longevity.Evidence.var_num
(: rejuve.rejuve-longevity.Evidence.var_num (-> rejuve.rejuve-longevity.Evidence Int32))
(= (rejuve.rejuve-longevity.Evidence.var_num
    (rejuve.rejuve-longevity.MkEvidence
     $var_num
     $response)) $var_num)

;; Define rejuve.rejuve-longevity.Evidence.response
(: rejuve.rejuve-longevity.Evidence.response (-> rejuve.rejuve-longevity.Evidence Int32))
(= (rejuve.rejuve-longevity.Evidence.response
    (rejuve.rejuve-longevity.MkEvidence
     $var_num
     $response)) $response)

;; Define rejuve.rejuve-longevity.Outvar type
(: rejuve.rejuve-longevity.Outvar Type)

;; Define rejuve.rejuve-longevity.Outvar constuctor
(: rejuve.rejuve-longevity.MkOutvar
   (->
    Int32 ; var_num
    rejuve.rejuve-longevity.Outvar))

;; Define rejuve.rejuve-longevity.Outvar access functions

;; Define rejuve.rejuve-longevity.Outvar.var_num
(: rejuve.rejuve-longevity.Outvar.var_num (-> rejuve.rejuve-longevity.Outvar Int32))
(= (rejuve.rejuve-longevity.Outvar.var_num
    (rejuve.rejuve-longevity.MkOutvar
     $var_num)) $var_num)

;; Define rejuve.rejuve-longevity.Timeval type
(: rejuve.rejuve-longevity.Timeval Type)

;; Define rejuve.rejuve-longevity.Timeval constuctor
(: rejuve.rejuve-longevity.MkTimeval
   (->
    Float ; val
    Float ; interval
    rejuve.rejuve-longevity.Timeval))

;; Define rejuve.rejuve-longevity.Timeval access functions

;; Define rejuve.rejuve-longevity.Timeval.val
(: rejuve.rejuve-longevity.Timeval.val (-> rejuve.rejuve-longevity.Timeval Float))
(= (rejuve.rejuve-longevity.Timeval.val
    (rejuve.rejuve-longevity.MkTimeval
     $val
     $interval)) $val)

;; Define rejuve.rejuve-longevity.Timeval.interval
(: rejuve.rejuve-longevity.Timeval.interval (-> rejuve.rejuve-longevity.Timeval Float))
(= (rejuve.rejuve-longevity.Timeval.interval
    (rejuve.rejuve-longevity.MkTimeval
     $val
     $interval)) $interval)

;; Define rejuve.rejuve-longevity.Anomaly type
(: rejuve.rejuve-longevity.Anomaly Type)

;; Define rejuve.rejuve-longevity.Anomaly constuctor
(: rejuve.rejuve-longevity.MkAnomaly
   (->
    Int32 ; var_num
    rejuve.rejuve-longevity.Timeval ; timevals
    rejuve.rejuve-longevity.Anomaly))

;; Define rejuve.rejuve-longevity.Anomaly access functions

;; Define rejuve.rejuve-longevity.Anomaly.var_num
(: rejuve.rejuve-longevity.Anomaly.var_num (-> rejuve.rejuve-longevity.Anomaly Int32))
(= (rejuve.rejuve-longevity.Anomaly.var_num
    (rejuve.rejuve-longevity.MkAnomaly
     $var_num
     $timevals)) $var_num)

;; Define rejuve.rejuve-longevity.Anomaly.timevals
(: rejuve.rejuve-longevity.Anomaly.timevals (-> rejuve.rejuve-longevity.Anomaly rejuve.rejuve-longevity.Timeval))
(= (rejuve.rejuve-longevity.Anomaly.timevals
    (rejuve.rejuve-longevity.MkAnomaly
     $var_num
     $timevals)) $timevals)

;; Define rejuve.rejuve-longevity.Query constuctor
(: rejuve.rejuve-longevity.MkQuery
   (->
    rejuve.rejuve-longevity.Evidence ; evidence
    rejuve.rejuve-longevity.Outvar ; outvars
    rejuve.rejuve-longevity.Outvar ; explainvars
    rejuve.rejuve-longevity.Outvar ; reverse_explainvars
    rejuve.rejuve-longevity.Outvar ; reverse_evidence
    rejuve.rejuve-longevity.Anomaly ; timeseries
    rejuve.rejuve-longevity.Query))

;; Define rejuve.rejuve-longevity.Query access functions

;; Define rejuve.rejuve-longevity.Query.evidence
(: rejuve.rejuve-longevity.Query.evidence (-> rejuve.rejuve-longevity.Query rejuve.rejuve-longevity.Evidence))
(= (rejuve.rejuve-longevity.Query.evidence
    (rejuve.rejuve-longevity.MkQuery
     $evidence
     $outvars
     $explainvars
     $reverse_explainvars
     $reverse_evidence
     $timeseries)) $evidence)

;; Define rejuve.rejuve-longevity.Query.outvars
(: rejuve.rejuve-longevity.Query.outvars (-> rejuve.rejuve-longevity.Query rejuve.rejuve-longevity.Outvar))
(= (rejuve.rejuve-longevity.Query.outvars
    (rejuve.rejuve-longevity.MkQuery
     $evidence
     $outvars
     $explainvars
     $reverse_explainvars
     $reverse_evidence
     $timeseries)) $outvars)

;; Define rejuve.rejuve-longevity.Query.explainvars
(: rejuve.rejuve-longevity.Query.explainvars (-> rejuve.rejuve-longevity.Query rejuve.rejuve-longevity.Outvar))
(= (rejuve.rejuve-longevity.Query.explainvars
    (rejuve.rejuve-longevity.MkQuery
     $evidence
     $outvars
     $explainvars
     $reverse_explainvars
     $reverse_evidence
     $timeseries)) $explainvars)

;; Define rejuve.rejuve-longevity.Query.reverse_explainvars
(: rejuve.rejuve-longevity.Query.reverse_explainvars (-> rejuve.rejuve-longevity.Query rejuve.rejuve-longevity.Outvar))
(= (rejuve.rejuve-longevity.Query.reverse_explainvars
    (rejuve.rejuve-longevity.MkQuery
     $evidence
     $outvars
     $explainvars
     $reverse_explainvars
     $reverse_evidence
     $timeseries)) $reverse_explainvars)

;; Define rejuve.rejuve-longevity.Query.reverse_evidence
(: rejuve.rejuve-longevity.Query.reverse_evidence (-> rejuve.rejuve-longevity.Query rejuve.rejuve-longevity.Outvar))
(= (rejuve.rejuve-longevity.Query.reverse_evidence
    (rejuve.rejuve-longevity.MkQuery
     $evidence
     $outvars
     $explainvars
     $reverse_explainvars
     $reverse_evidence
     $timeseries)) $reverse_evidence)

;; Define rejuve.rejuve-longevity.Query.timeseries
(: rejuve.rejuve-longevity.Query.timeseries (-> rejuve.rejuve-longevity.Query rejuve.rejuve-longevity.Anomaly))
(= (rejuve.rejuve-longevity.Query.timeseries
    (rejuve.rejuve-longevity.MkQuery
     $evidence
     $outvars
     $explainvars
     $reverse_explainvars
     $reverse_evidence
     $timeseries)) $timeseries)

;;;;;;;;;;;;;
;; QueryId ;;
;;;;;;;;;;;;;

;; Define rejuve.rejuve-longevity.QueryId type
(: rejuve.rejuve-longevity.QueryId Type)

;; Define rejuve.rejuve-longevity.QueryId constuctor
(: rejuve.rejuve-longevity.MkQueryId
   (->
    Int32 ; id
    rejuve.rejuve-longevity.Query ; query
    rejuve.rejuve-longevity.QueryId))

;; Define rejuve.rejuve-longevity.QueryId access functions

;; Define rejuve.rejuve-longevity.QueryId.id
(: rejuve.rejuve-longevity.QueryId.id (-> rejuve.rejuve-longevity.QueryId Int32))
(= (rejuve.rejuve-longevity.QueryId.id
    (rejuve.rejuve-longevity.MkQueryId
     $id
     $query)) $id)

;; Define rejuve.rejuve-longevity.QueryId.query
(: rejuve.rejuve-longevity.QueryId.query (-> rejuve.rejuve-longevity.QueryId rejuve.rejuve-longevity.Query))
(= (rejuve.rejuve-longevity.QueryId.query
    (rejuve.rejuve-longevity.MkQueryId
     $id
     $query)) $query)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define rejuve.rejuve-longevity.Answer type
(: rejuve.rejuve-longevity.Answer Type)

;; Define rejuve.rejuve-longevity.VarAnswer type
(: rejuve.rejuve-longevity.VarAnswer Type)

;; Define rejuve.rejuve-longevity.VarState type
(: rejuve.rejuve-longevity.VarState Type)

;; Define rejuve.rejuve-longevity.VarState constuctor
(: rejuve.rejuve-longevity.MkVarState
   (->
    Int32 ; state_num
    Float ; probability
    rejuve.rejuve-longevity.VarState))

;; Define rejuve.rejuve-longevity.VarState access functions

;; Define rejuve.rejuve-longevity.VarState.state_num
(: rejuve.rejuve-longevity.VarState.state_num (-> rejuve.rejuve-longevity.VarState Int32))
(= (rejuve.rejuve-longevity.VarState.state_num
    (rejuve.rejuve-longevity.MkVarState
     $state_num
     $probability)) $state_num)

;; Define rejuve.rejuve-longevity.VarState.probability
(: rejuve.rejuve-longevity.VarState.probability (-> rejuve.rejuve-longevity.VarState Float))
(= (rejuve.rejuve-longevity.VarState.probability
    (rejuve.rejuve-longevity.MkVarState
     $state_num
     $probability)) $probability)

;; Define rejuve.rejuve-longevity.VarAnswer constuctor
(: rejuve.rejuve-longevity.MkVarAnswer
   (->
    Int32 ; var_num
    rejuve.rejuve-longevity.VarState ; varStates
    rejuve.rejuve-longevity.VarAnswer))

;; Define rejuve.rejuve-longevity.VarAnswer access functions

;; Define rejuve.rejuve-longevity.VarAnswer.var_num
(: rejuve.rejuve-longevity.VarAnswer.var_num (-> rejuve.rejuve-longevity.VarAnswer Int32))
(= (rejuve.rejuve-longevity.VarAnswer.var_num
    (rejuve.rejuve-longevity.MkVarAnswer
     $var_num
     $varStates)) $var_num)

;; Define rejuve.rejuve-longevity.VarAnswer.varStates
(: rejuve.rejuve-longevity.VarAnswer.varStates (-> rejuve.rejuve-longevity.VarAnswer rejuve.rejuve-longevity.VarState))
(= (rejuve.rejuve-longevity.VarAnswer.varStates
    (rejuve.rejuve-longevity.MkVarAnswer
     $var_num
     $varStates)) $varStates)

;; Define rejuve.rejuve-longevity.AnomalyAnswer type
(: rejuve.rejuve-longevity.AnomalyAnswer Type)

;; Define rejuve.rejuve-longevity.Signal type
(: rejuve.rejuve-longevity.Signal Type)

;; Define rejuve.rejuve-longevity.Signal constuctor
(: rejuve.rejuve-longevity.MkSignal
   (->
    Float ; val
    rejuve.rejuve-longevity.Signal))

;; Define rejuve.rejuve-longevity.Signal access functions

;; Define rejuve.rejuve-longevity.Signal.val
(: rejuve.rejuve-longevity.Signal.val (-> rejuve.rejuve-longevity.Signal Float))
(= (rejuve.rejuve-longevity.Signal.val
    (rejuve.rejuve-longevity.MkSignal
     $val)) $val)

;; Define rejuve.rejuve-longevity.Anomaly type
(: rejuve.rejuve-longevity.Anomaly Type)

;; Define rejuve.rejuve-longevity.Anomaly constuctor
(: rejuve.rejuve-longevity.MkAnomaly
   (->
    Bool ; is_anomaly
    rejuve.rejuve-longevity.Anomaly))

;; Define rejuve.rejuve-longevity.Anomaly access functions

;; Define rejuve.rejuve-longevity.Anomaly.is_anomaly
(: rejuve.rejuve-longevity.Anomaly.is_anomaly (-> rejuve.rejuve-longevity.Anomaly Bool))
(= (rejuve.rejuve-longevity.Anomaly.is_anomaly
    (rejuve.rejuve-longevity.MkAnomaly
     $is_anomaly)) $is_anomaly)

;; Define rejuve.rejuve-longevity.AnomalyAnswer constuctor
(: rejuve.rejuve-longevity.MkAnomalyAnswer
   (->
    Int32 ; var_num
    rejuve.rejuve-longevity.Signal ; signals
    rejuve.rejuve-longevity.Anomaly ; anomalies
    rejuve.rejuve-longevity.AnomalyAnswer))

;; Define rejuve.rejuve-longevity.AnomalyAnswer access functions

;; Define rejuve.rejuve-longevity.AnomalyAnswer.var_num
(: rejuve.rejuve-longevity.AnomalyAnswer.var_num (-> rejuve.rejuve-longevity.AnomalyAnswer Int32))
(= (rejuve.rejuve-longevity.AnomalyAnswer.var_num
    (rejuve.rejuve-longevity.MkAnomalyAnswer
     $var_num
     $signals
     $anomalies)) $var_num)

;; Define rejuve.rejuve-longevity.AnomalyAnswer.signals
(: rejuve.rejuve-longevity.AnomalyAnswer.signals (-> rejuve.rejuve-longevity.AnomalyAnswer rejuve.rejuve-longevity.Signal))
(= (rejuve.rejuve-longevity.AnomalyAnswer.signals
    (rejuve.rejuve-longevity.MkAnomalyAnswer
     $var_num
     $signals
     $anomalies)) $signals)

;; Define rejuve.rejuve-longevity.AnomalyAnswer.anomalies
(: rejuve.rejuve-longevity.AnomalyAnswer.anomalies (-> rejuve.rejuve-longevity.AnomalyAnswer rejuve.rejuve-longevity.Anomaly))
(= (rejuve.rejuve-longevity.AnomalyAnswer.anomalies
    (rejuve.rejuve-longevity.MkAnomalyAnswer
     $var_num
     $signals
     $anomalies)) $anomalies)

;; Define rejuve.rejuve-longevity.FitAnswer type
(: rejuve.rejuve-longevity.FitAnswer Type)

;; Define rejuve.rejuve-longevity.FitState type
(: rejuve.rejuve-longevity.FitState Type)

;; Define rejuve.rejuve-longevity.FitState constuctor
(: rejuve.rejuve-longevity.MkFitState
   (->
    String ; fitted
    Float ; val
    rejuve.rejuve-longevity.FitState))

;; Define rejuve.rejuve-longevity.FitState access functions

;; Define rejuve.rejuve-longevity.FitState.fitted
(: rejuve.rejuve-longevity.FitState.fitted (-> rejuve.rejuve-longevity.FitState String))
(= (rejuve.rejuve-longevity.FitState.fitted
    (rejuve.rejuve-longevity.MkFitState
     $fitted
     $val)) $fitted)

;; Define rejuve.rejuve-longevity.FitState.val
(: rejuve.rejuve-longevity.FitState.val (-> rejuve.rejuve-longevity.FitState Float))
(= (rejuve.rejuve-longevity.FitState.val
    (rejuve.rejuve-longevity.MkFitState
     $fitted
     $val)) $val)

;; Define rejuve.rejuve-longevity.FitAnswer constuctor
(: rejuve.rejuve-longevity.MkFitAnswer
   (->
    Int32 ; var_num
    rejuve.rejuve-longevity.FitState ; fitStates
    rejuve.rejuve-longevity.FitAnswer))

;; Define rejuve.rejuve-longevity.FitAnswer access functions

;; Define rejuve.rejuve-longevity.FitAnswer.var_num
(: rejuve.rejuve-longevity.FitAnswer.var_num (-> rejuve.rejuve-longevity.FitAnswer Int32))
(= (rejuve.rejuve-longevity.FitAnswer.var_num
    (rejuve.rejuve-longevity.MkFitAnswer
     $var_num
     $fitStates)) $var_num)

;; Define rejuve.rejuve-longevity.FitAnswer.fitStates
(: rejuve.rejuve-longevity.FitAnswer.fitStates (-> rejuve.rejuve-longevity.FitAnswer rejuve.rejuve-longevity.FitState))
(= (rejuve.rejuve-longevity.FitAnswer.fitStates
    (rejuve.rejuve-longevity.MkFitAnswer
     $var_num
     $fitStates)) $fitStates)

;; Define rejuve.rejuve-longevity.Answer constuctor
(: rejuve.rejuve-longevity.MkAnswer
   (->
    rejuve.rejuve-longevity.VarAnswer ; varAnswers
    rejuve.rejuve-longevity.VarAnswer ; explanations
    rejuve.rejuve-longevity.AnomalyAnswer ; signal_anomalies
    rejuve.rejuve-longevity.FitAnswer ; anomalies
    String ; error_msg
    rejuve.rejuve-longevity.Answer))

;; Define rejuve.rejuve-longevity.Answer access functions

;; Define rejuve.rejuve-longevity.Answer.varAnswers
(: rejuve.rejuve-longevity.Answer.varAnswers (-> rejuve.rejuve-longevity.Answer rejuve.rejuve-longevity.VarAnswer))
(= (rejuve.rejuve-longevity.Answer.varAnswers
    (rejuve.rejuve-longevity.MkAnswer
     $varAnswers
     $explanations
     $signal_anomalies
     $anomalies
     $error_msg)) $varAnswers)

;; Define rejuve.rejuve-longevity.Answer.explanations
(: rejuve.rejuve-longevity.Answer.explanations (-> rejuve.rejuve-longevity.Answer rejuve.rejuve-longevity.VarAnswer))
(= (rejuve.rejuve-longevity.Answer.explanations
    (rejuve.rejuve-longevity.MkAnswer
     $varAnswers
     $explanations
     $signal_anomalies
     $anomalies
     $error_msg)) $explanations)

;; Define rejuve.rejuve-longevity.Answer.signal_anomalies
(: rejuve.rejuve-longevity.Answer.signal_anomalies (-> rejuve.rejuve-longevity.Answer rejuve.rejuve-longevity.AnomalyAnswer))
(= (rejuve.rejuve-longevity.Answer.signal_anomalies
    (rejuve.rejuve-longevity.MkAnswer
     $varAnswers
     $explanations
     $signal_anomalies
     $anomalies
     $error_msg)) $signal_anomalies)

;; Define rejuve.rejuve-longevity.Answer.anomalies
(: rejuve.rejuve-longevity.Answer.anomalies (-> rejuve.rejuve-longevity.Answer rejuve.rejuve-longevity.FitAnswer))
(= (rejuve.rejuve-longevity.Answer.anomalies
    (rejuve.rejuve-longevity.MkAnswer
     $varAnswers
     $explanations
     $signal_anomalies
     $anomalies
     $error_msg)) $anomalies)

;; Define rejuve.rejuve-longevity.Answer.error_msg
(: rejuve.rejuve-longevity.Answer.error_msg (-> rejuve.rejuve-longevity.Answer String))
(= (rejuve.rejuve-longevity.Answer.error_msg
    (rejuve.rejuve-longevity.MkAnswer
     $varAnswers
     $explanations
     $signal_anomalies
     $anomalies
     $error_msg)) $error_msg)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BayesianNetworkQuery ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define rejuve.rejuve-longevity.BayesianNetworkQuery type
(: rejuve.rejuve-longevity.BayesianNetworkQuery Type)

;; Define rejuve.rejuve-longevity.BayesianNetworkQuery constuctor
(: rejuve.rejuve-longevity.MkBayesianNetworkQuery
   (->
    rejuve.rejuve-longevity.BayesianNetwork ; bayesianNetwork
    rejuve.rejuve-longevity.Query ; query
    rejuve.rejuve-longevity.BayesianNetworkQuery))

;; Define rejuve.rejuve-longevity.BayesianNetworkQuery access functions

;; Define rejuve.rejuve-longevity.BayesianNetworkQuery.bayesianNetwork
(: rejuve.rejuve-longevity.BayesianNetworkQuery.bayesianNetwork (-> rejuve.rejuve-longevity.BayesianNetworkQuery rejuve.rejuve-longevity.BayesianNetwork))
(= (rejuve.rejuve-longevity.BayesianNetworkQuery.bayesianNetwork
    (rejuve.rejuve-longevity.MkBayesianNetworkQuery
     $bayesianNetwork
     $query)) $bayesianNetwork)

;; Define rejuve.rejuve-longevity.BayesianNetworkQuery.query
(: rejuve.rejuve-longevity.BayesianNetworkQuery.query (-> rejuve.rejuve-longevity.BayesianNetworkQuery rejuve.rejuve-longevity.Query))
(= (rejuve.rejuve-longevity.BayesianNetworkQuery.query
    (rejuve.rejuve-longevity.MkBayesianNetworkQuery
     $bayesianNetwork
     $query)) $query)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; BayesNet ;;
;;;;;;;;;;;;;;

;; Define rejuve.rejuve-longevity.EndNet service method
(: rejuve.rejuve-longevity.EndNet (-> rejuve.rejuve-longevity.Id rejuve.rejuve-longevity.Id))

;; Define rejuve.rejuve-longevity.StartNet service method
(: rejuve.rejuve-longevity.StartNet (-> rejuve.rejuve-longevity.BayesianNetwork rejuve.rejuve-longevity.Id))

;; Define rejuve.rejuve-longevity.AskNet service method
(: rejuve.rejuve-longevity.AskNet (-> rejuve.rejuve-longevity.QueryId rejuve.rejuve-longevity.Answer))

;; Define rejuve.rejuve-longevity.StatelessNet service method
(: rejuve.rejuve-longevity.StatelessNet (-> rejuve.rejuve-longevity.BayesianNetworkQuery rejuve.rejuve-longevity.Answer))




;; OrganizationID definition of 3e9eb3f9a8134c9999f585adc60d9feb
(: 3e9eb3f9a8134c9999f585adc60d9feb OrganizationID)

;; Organization metadata of 3e9eb3f9a8134c9999f585adc60d9feb
(= (organization 3e9eb3f9a8134c9999f585adc60d9feb)
   ; Organization
   (MkOrganization
       ; org_name
       "SuperHero"
       ; org_id
       "3e9eb3f9a8134c9999f585adc60d9feb"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           "https://dummy.dummy"
           ; url content
           null
           ; description
           "Long Description"
           ; short_description
           "Short Description")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of 3e9eb3f9a8134c9999f585adc60d9feb


;; ServiceID definition of 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen"
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen (ServiceID 3e9eb3f9a8134c9999f585adc60d9feb))

;; Service metadata of 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen
(= (service 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "WonderWomen"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmbbNPksseVZ3CQhPoWFrbshsyPEpFTP4nJ6iy2KzLbaWZ"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://en.wikipedia.org/wiki/Wonder_Woman"
           ; url content
           null
           ; description
           "Wonder Woman's Bronze Age origin story relates that she was sculpted from clay by her mother Queen Hippolyta and was given a life as an Amazon, along with superhuman powers as gifts by the Greek gods. In recent years[vague], DC changed her background with the retcon that she is the biological daughter of Zeus and Hippolyta, jointly raised by her mother and her aunts Antiope and Menalippe. The character has changed in depiction over the decades, including briefly losing her powers entirely in the late 1960s; by the 1980s, artist George Perez gave her an athletic look and emphasized her Amazonian heritage.[12][13] She possesses an arsenal of magical items, including the Lasso of Truth, a pair of indestructible bracelets, a tiara which serves as a projectile, and, in older stories, a range of devices based on Amazon technology.\n\nWonder Woman's character was created during World War II; the character in the story was initially depicted fighting Axis forces as well as an assortment of colorful supervillains, altho"
           ; short_description
           "Wonder Woman is a superheroine appearing in American comic books published by DC Comics.[3] The character is a founding member of the Justice League.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "movies" (Cons "marvel" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers type
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers Type)

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers constuctor
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.MkNumbers
   (->
    Float ; a
    Float ; b
    3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers))

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers access functions

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers.a
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers.a (-> 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers Float))
(= (3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers.a
    (3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.MkNumbers
     $a
     $b)) $a)

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers.b
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers.b (-> 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers Float))
(= (3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers.b
    (3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result type
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result Type)

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result constuctor
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.MkResult
   (->
    Float ; value
    3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result))

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result access functions

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result.value
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result.value (-> 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result Float))
(= (3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result.value
    (3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.add service method
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.add (-> 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result))

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.sub service method
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.sub (-> 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result))

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.mul service method
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.mul (-> 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result))

;; Define 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.div service method
(: 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.div (-> 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Numbers 3e9eb3f9a8134c9999f585adc60d9feb.WonderWomen.Result))




;; OrganizationID definition of PublisherPortalTesting
(: PublisherPortalTesting OrganizationID)

;; Organization metadata of PublisherPortalTesting
(= (organization PublisherPortalTesting)
   ; Organization
   (MkOrganization
       ; org_name
       "PublisherPortalTesting"
       ; org_id
       "PublisherPortalTesting"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "This organization is for testing mainnet workflow"
           ; short_description
           "This organization is for testing mainnet workflow")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of PublisherPortalTesting


;; ServiceID definition of PublisherPortalTesting.PublisherPortalTestService"
(: PublisherPortalTesting.PublisherPortalTestService (ServiceID PublisherPortalTesting))

;; Service metadata of PublisherPortalTesting.PublisherPortalTestService
(= (service PublisherPortalTesting.PublisherPortalTestService)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "PublisherPortalTestService"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmNQTcg42D8iC2EcTZx6NZrUQP6d4p4J8vrEhnTrC637vg"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "This is to test the service in mainnet"
           ; short_description
           "This is to test the service in mainnet")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "tag5" (Cons "tag4" (Cons "tag3" (Cons "tag2" (Cons "tag1" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: PublisherPortalTesting.PublisherPortalTestService
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define PublisherPortalTesting.PublisherPortalTestService.Numbers type
(: PublisherPortalTesting.PublisherPortalTestService.Numbers Type)

;; Define PublisherPortalTesting.PublisherPortalTestService.Numbers constuctor
(: PublisherPortalTesting.PublisherPortalTestService.MkNumbers
   (->
    Float ; a
    Float ; b
    PublisherPortalTesting.PublisherPortalTestService.Numbers))

;; Define PublisherPortalTesting.PublisherPortalTestService.Numbers access functions

;; Define PublisherPortalTesting.PublisherPortalTestService.Numbers.a
(: PublisherPortalTesting.PublisherPortalTestService.Numbers.a (-> PublisherPortalTesting.PublisherPortalTestService.Numbers Float))
(= (PublisherPortalTesting.PublisherPortalTestService.Numbers.a
    (PublisherPortalTesting.PublisherPortalTestService.MkNumbers
     $a
     $b)) $a)

;; Define PublisherPortalTesting.PublisherPortalTestService.Numbers.b
(: PublisherPortalTesting.PublisherPortalTestService.Numbers.b (-> PublisherPortalTesting.PublisherPortalTestService.Numbers Float))
(= (PublisherPortalTesting.PublisherPortalTestService.Numbers.b
    (PublisherPortalTesting.PublisherPortalTestService.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define PublisherPortalTesting.PublisherPortalTestService.Result type
(: PublisherPortalTesting.PublisherPortalTestService.Result Type)

;; Define PublisherPortalTesting.PublisherPortalTestService.Result constuctor
(: PublisherPortalTesting.PublisherPortalTestService.MkResult
   (->
    Float ; value
    PublisherPortalTesting.PublisherPortalTestService.Result))

;; Define PublisherPortalTesting.PublisherPortalTestService.Result access functions

;; Define PublisherPortalTesting.PublisherPortalTestService.Result.value
(: PublisherPortalTesting.PublisherPortalTestService.Result.value (-> PublisherPortalTesting.PublisherPortalTestService.Result Float))
(= (PublisherPortalTesting.PublisherPortalTestService.Result.value
    (PublisherPortalTesting.PublisherPortalTestService.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define PublisherPortalTesting.PublisherPortalTestService.add service method
(: PublisherPortalTesting.PublisherPortalTestService.add (-> PublisherPortalTesting.PublisherPortalTestService.Numbers PublisherPortalTesting.PublisherPortalTestService.Result))

;; Define PublisherPortalTesting.PublisherPortalTestService.sub service method
(: PublisherPortalTesting.PublisherPortalTestService.sub (-> PublisherPortalTesting.PublisherPortalTestService.Numbers PublisherPortalTesting.PublisherPortalTestService.Result))

;; Define PublisherPortalTesting.PublisherPortalTestService.mul service method
(: PublisherPortalTesting.PublisherPortalTestService.mul (-> PublisherPortalTesting.PublisherPortalTestService.Numbers PublisherPortalTesting.PublisherPortalTestService.Result))

;; Define PublisherPortalTesting.PublisherPortalTestService.div service method
(: PublisherPortalTesting.PublisherPortalTestService.div (-> PublisherPortalTesting.PublisherPortalTestService.Numbers PublisherPortalTesting.PublisherPortalTestService.Result))




;; OrganizationID definition of mainnet_testing_calculator
(: mainnet_testing_calculator OrganizationID)

;; Organization metadata of mainnet_testing_calculator
(= (organization mainnet_testing_calculator)
   ; Organization
   (MkOrganization
       ; org_name
       "mainnet_testing_calculator"
       ; org_id
       "mainnet_testing_calculator"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "This is a testing service on production"
           ; short_description
           "This is a testing service on production")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of mainnet_testing_calculator


;; ServiceID definition of mainnet_testing_calculator.test_serv"
(: mainnet_testing_calculator.test_serv (ServiceID mainnet_testing_calculator))

;; Service metadata of mainnet_testing_calculator.test_serv
(= (service mainnet_testing_calculator.test_serv)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "test_serv"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmTpH8dW1EHx4wyutcABgytEZ7ish7DUeDJ126omQoQDmR"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "LD"
           ; short_description
           "SD")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "tag2" (Cons "tag1" (Cons "tag" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: mainnet_testing_calculator.test_serv
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define mainnet_testing_calculator.test_serv.Numbers type
(: mainnet_testing_calculator.test_serv.Numbers Type)

;; Define mainnet_testing_calculator.test_serv.Numbers constuctor
(: mainnet_testing_calculator.test_serv.MkNumbers
   (->
    Float ; a
    Float ; b
    mainnet_testing_calculator.test_serv.Numbers))

;; Define mainnet_testing_calculator.test_serv.Numbers access functions

;; Define mainnet_testing_calculator.test_serv.Numbers.a
(: mainnet_testing_calculator.test_serv.Numbers.a (-> mainnet_testing_calculator.test_serv.Numbers Float))
(= (mainnet_testing_calculator.test_serv.Numbers.a
    (mainnet_testing_calculator.test_serv.MkNumbers
     $a
     $b)) $a)

;; Define mainnet_testing_calculator.test_serv.Numbers.b
(: mainnet_testing_calculator.test_serv.Numbers.b (-> mainnet_testing_calculator.test_serv.Numbers Float))
(= (mainnet_testing_calculator.test_serv.Numbers.b
    (mainnet_testing_calculator.test_serv.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define mainnet_testing_calculator.test_serv.Result type
(: mainnet_testing_calculator.test_serv.Result Type)

;; Define mainnet_testing_calculator.test_serv.Result constuctor
(: mainnet_testing_calculator.test_serv.MkResult
   (->
    Float ; value
    mainnet_testing_calculator.test_serv.Result))

;; Define mainnet_testing_calculator.test_serv.Result access functions

;; Define mainnet_testing_calculator.test_serv.Result.value
(: mainnet_testing_calculator.test_serv.Result.value (-> mainnet_testing_calculator.test_serv.Result Float))
(= (mainnet_testing_calculator.test_serv.Result.value
    (mainnet_testing_calculator.test_serv.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define mainnet_testing_calculator.test_serv.add service method
(: mainnet_testing_calculator.test_serv.add (-> mainnet_testing_calculator.test_serv.Numbers mainnet_testing_calculator.test_serv.Result))

;; Define mainnet_testing_calculator.test_serv.sub service method
(: mainnet_testing_calculator.test_serv.sub (-> mainnet_testing_calculator.test_serv.Numbers mainnet_testing_calculator.test_serv.Result))

;; Define mainnet_testing_calculator.test_serv.mul service method
(: mainnet_testing_calculator.test_serv.mul (-> mainnet_testing_calculator.test_serv.Numbers mainnet_testing_calculator.test_serv.Result))

;; Define mainnet_testing_calculator.test_serv.div service method
(: mainnet_testing_calculator.test_serv.div (-> mainnet_testing_calculator.test_serv.Numbers mainnet_testing_calculator.test_serv.Result))




;; OrganizationID definition of Mainnet_test_2607
(: Mainnet_test_2607 OrganizationID)

;; Organization metadata of Mainnet_test_2607
(= (organization Mainnet_test_2607)
   ; Organization
   (MkOrganization
       ; org_name
       "Mainnet_test_2607"
       ; org_id
       "Mainnet_test_2607"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "Long description"
           ; short_description
           "Short description")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of Mainnet_test_2607


;; ServiceID definition of Mainnet_test_2607.mainnet_test_serv"
(: Mainnet_test_2607.mainnet_test_serv (ServiceID Mainnet_test_2607))

;; Service metadata of Mainnet_test_2607.mainnet_test_serv
(= (service Mainnet_test_2607.mainnet_test_serv)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "mainnet_test_serv"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeyrQkEyba8dd4rc3jrLd5pEwsxHutfH2RvsSaeSMqTtQ"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "LD"
           ; short_description
           "SD")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "tag1" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: Mainnet_test_2607.mainnet_test_serv
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define Mainnet_test_2607.mainnet_test_serv.Numbers type
(: Mainnet_test_2607.mainnet_test_serv.Numbers Type)

;; Define Mainnet_test_2607.mainnet_test_serv.Numbers constuctor
(: Mainnet_test_2607.mainnet_test_serv.MkNumbers
   (->
    Float ; a
    Float ; b
    Mainnet_test_2607.mainnet_test_serv.Numbers))

;; Define Mainnet_test_2607.mainnet_test_serv.Numbers access functions

;; Define Mainnet_test_2607.mainnet_test_serv.Numbers.a
(: Mainnet_test_2607.mainnet_test_serv.Numbers.a (-> Mainnet_test_2607.mainnet_test_serv.Numbers Float))
(= (Mainnet_test_2607.mainnet_test_serv.Numbers.a
    (Mainnet_test_2607.mainnet_test_serv.MkNumbers
     $a
     $b)) $a)

;; Define Mainnet_test_2607.mainnet_test_serv.Numbers.b
(: Mainnet_test_2607.mainnet_test_serv.Numbers.b (-> Mainnet_test_2607.mainnet_test_serv.Numbers Float))
(= (Mainnet_test_2607.mainnet_test_serv.Numbers.b
    (Mainnet_test_2607.mainnet_test_serv.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define Mainnet_test_2607.mainnet_test_serv.Result type
(: Mainnet_test_2607.mainnet_test_serv.Result Type)

;; Define Mainnet_test_2607.mainnet_test_serv.Result constuctor
(: Mainnet_test_2607.mainnet_test_serv.MkResult
   (->
    Float ; value
    Mainnet_test_2607.mainnet_test_serv.Result))

;; Define Mainnet_test_2607.mainnet_test_serv.Result access functions

;; Define Mainnet_test_2607.mainnet_test_serv.Result.value
(: Mainnet_test_2607.mainnet_test_serv.Result.value (-> Mainnet_test_2607.mainnet_test_serv.Result Float))
(= (Mainnet_test_2607.mainnet_test_serv.Result.value
    (Mainnet_test_2607.mainnet_test_serv.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define Mainnet_test_2607.mainnet_test_serv.add service method
(: Mainnet_test_2607.mainnet_test_serv.add (-> Mainnet_test_2607.mainnet_test_serv.Numbers Mainnet_test_2607.mainnet_test_serv.Result))

;; Define Mainnet_test_2607.mainnet_test_serv.sub service method
(: Mainnet_test_2607.mainnet_test_serv.sub (-> Mainnet_test_2607.mainnet_test_serv.Numbers Mainnet_test_2607.mainnet_test_serv.Result))

;; Define Mainnet_test_2607.mainnet_test_serv.mul service method
(: Mainnet_test_2607.mainnet_test_serv.mul (-> Mainnet_test_2607.mainnet_test_serv.Numbers Mainnet_test_2607.mainnet_test_serv.Result))

;; Define Mainnet_test_2607.mainnet_test_serv.div service method
(: Mainnet_test_2607.mainnet_test_serv.div (-> Mainnet_test_2607.mainnet_test_serv.Numbers Mainnet_test_2607.mainnet_test_serv.Result))




;; OrganizationID definition of testing_event
(: testing_event OrganizationID)

;; Organization metadata of testing_event
(= (organization testing_event)
   ; Organization
   (MkOrganization
       ; org_name
       "testing_event"
       ; org_id
       "testing_event"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "LD"
           ; short_description
           "SD")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of testing_event


;; ServiceID definition of testing_event.testing_event_service"
(: testing_event.testing_event_service (ServiceID testing_event))

;; Service metadata of testing_event.testing_event_service
(= (service testing_event.testing_event_service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "testing_event_service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeyrQkEyba8dd4rc3jrLd5pEwsxHutfH2RvsSaeSMqTtQ"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "Long des"
           ; short_description
           "Short des")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "tag1" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: testing_event.testing_event_service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define testing_event.testing_event_service.Numbers type
(: testing_event.testing_event_service.Numbers Type)

;; Define testing_event.testing_event_service.Numbers constuctor
(: testing_event.testing_event_service.MkNumbers
   (->
    Float ; a
    Float ; b
    testing_event.testing_event_service.Numbers))

;; Define testing_event.testing_event_service.Numbers access functions

;; Define testing_event.testing_event_service.Numbers.a
(: testing_event.testing_event_service.Numbers.a (-> testing_event.testing_event_service.Numbers Float))
(= (testing_event.testing_event_service.Numbers.a
    (testing_event.testing_event_service.MkNumbers
     $a
     $b)) $a)

;; Define testing_event.testing_event_service.Numbers.b
(: testing_event.testing_event_service.Numbers.b (-> testing_event.testing_event_service.Numbers Float))
(= (testing_event.testing_event_service.Numbers.b
    (testing_event.testing_event_service.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define testing_event.testing_event_service.Result type
(: testing_event.testing_event_service.Result Type)

;; Define testing_event.testing_event_service.Result constuctor
(: testing_event.testing_event_service.MkResult
   (->
    Float ; value
    testing_event.testing_event_service.Result))

;; Define testing_event.testing_event_service.Result access functions

;; Define testing_event.testing_event_service.Result.value
(: testing_event.testing_event_service.Result.value (-> testing_event.testing_event_service.Result Float))
(= (testing_event.testing_event_service.Result.value
    (testing_event.testing_event_service.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define testing_event.testing_event_service.add service method
(: testing_event.testing_event_service.add (-> testing_event.testing_event_service.Numbers testing_event.testing_event_service.Result))

;; Define testing_event.testing_event_service.sub service method
(: testing_event.testing_event_service.sub (-> testing_event.testing_event_service.Numbers testing_event.testing_event_service.Result))

;; Define testing_event.testing_event_service.mul service method
(: testing_event.testing_event_service.mul (-> testing_event.testing_event_service.Numbers testing_event.testing_event_service.Result))

;; Define testing_event.testing_event_service.div service method
(: testing_event.testing_event_service.div (-> testing_event.testing_event_service.Numbers testing_event.testing_event_service.Result))




;; OrganizationID definition of nunet
(: nunet OrganizationID)

;; Organization metadata of nunet
(= (organization nunet)
   ; Organization
   (MkOrganization
       ; org_name
       "nunet"
       ; org_id
       "nunet"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://nunet.io/"
           ; url content
           null
           ; description
           "The building blocks of a global, decentralized computing and data economy are in place today. NuNet cements these building blocks together into a new cooperative market, bringing unprecedented social and economic value accessible to all.\n\n\nNuNet will transform the multi-billion cloud computing industry, by enabling AI agents and software components to search the network for the most fitting hardware resources to run on."
           ; short_description
           "NuNet lets anyone share and monetize their computing resources at scale and\nprovides globally distributed, optimized computing power for decentralized networks.")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of nunet


;; ServiceID definition of nunet.binary-classification-service"
(: nunet.binary-classification-service (ServiceID nunet))

;; Service metadata of nunet.binary-classification-service
(= (service nunet.binary-classification-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Binary Classification"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmQDMrDm3WUXFao9oVMpcQxVN1N1z4WTCNrijbR3PRpFke"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://gitlab.com/nunet/fake-news-detection/binary-classification"
           ; url content
           null
           ; description
           "<div>The binary classification model uses a 30k fake news article dataset from the Kaggle competition [Fake and real news dataset Classifying the news]. Uses a BERT model with a single linear classification layer pre-trained with [Classifying the news] Kaggle competition fake and real news dataset. The model outputs 1 if an article is classified as fake news and 0 if not-fake.</div>"
           ; short_description
           "Binary classification of content for fake news detection.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "fake" (Cons "warning" (Cons "news" (Cons "fake news" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: fake_news.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.binary-classification-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; InputMessage ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.InputMessage type
(: nunet.binary-classification-service.InputMessage Type)

;; Define nunet.binary-classification-service.InputMessage constuctor
(: nunet.binary-classification-service.MkInputMessage
   (->
    String ; headline
    String ; body
    String ; call_id
    nunet.binary-classification-service.InputMessage))

;; Define nunet.binary-classification-service.InputMessage access functions

;; Define nunet.binary-classification-service.InputMessage.headline
(: nunet.binary-classification-service.InputMessage.headline (-> nunet.binary-classification-service.InputMessage String))
(= (nunet.binary-classification-service.InputMessage.headline
    (nunet.binary-classification-service.MkInputMessage
     $headline
     $body
     $call_id)) $headline)

;; Define nunet.binary-classification-service.InputMessage.body
(: nunet.binary-classification-service.InputMessage.body (-> nunet.binary-classification-service.InputMessage String))
(= (nunet.binary-classification-service.InputMessage.body
    (nunet.binary-classification-service.MkInputMessage
     $headline
     $body
     $call_id)) $body)

;; Define nunet.binary-classification-service.InputMessage.call_id
(: nunet.binary-classification-service.InputMessage.call_id (-> nunet.binary-classification-service.InputMessage String))
(= (nunet.binary-classification-service.InputMessage.call_id
    (nunet.binary-classification-service.MkInputMessage
     $headline
     $body
     $call_id)) $call_id)

;;;;;;;;;;;;;;;;;;;
;; OutputMessage ;;
;;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.OutputMessage type
(: nunet.binary-classification-service.OutputMessage Type)

;; Define nunet.binary-classification-service.OutputMessage constuctor
(: nunet.binary-classification-service.MkOutputMessage
   (->
    String ; response
    nunet.binary-classification-service.OutputMessage))

;; Define nunet.binary-classification-service.OutputMessage access functions

;; Define nunet.binary-classification-service.OutputMessage.response
(: nunet.binary-classification-service.OutputMessage.response (-> nunet.binary-classification-service.OutputMessage String))
(= (nunet.binary-classification-service.OutputMessage.response
    (nunet.binary-classification-service.MkOutputMessage
     $response)) $response)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fake_news_classification ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.classify service method
(: nunet.binary-classification-service.classify (-> nunet.binary-classification-service.InputMessage nunet.binary-classification-service.OutputMessage))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service_proto.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.binary-classification-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; reqMessage ;;
;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.reqMessage type
(: nunet.binary-classification-service.reqMessage Type)

;; Define nunet.binary-classification-service.reqMessage constuctor
(: nunet.binary-classification-service.MkreqMessage
   (->
    String ; proto_defnition
    String ; service_stub
    String ; service_input
    String ; function_name
    String ; service_input_params
    nunet.binary-classification-service.reqMessage))

;; Define nunet.binary-classification-service.reqMessage access functions

;; Define nunet.binary-classification-service.reqMessage.proto_defnition
(: nunet.binary-classification-service.reqMessage.proto_defnition (-> nunet.binary-classification-service.reqMessage String))
(= (nunet.binary-classification-service.reqMessage.proto_defnition
    (nunet.binary-classification-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $proto_defnition)

;; Define nunet.binary-classification-service.reqMessage.service_stub
(: nunet.binary-classification-service.reqMessage.service_stub (-> nunet.binary-classification-service.reqMessage String))
(= (nunet.binary-classification-service.reqMessage.service_stub
    (nunet.binary-classification-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_stub)

;; Define nunet.binary-classification-service.reqMessage.service_input
(: nunet.binary-classification-service.reqMessage.service_input (-> nunet.binary-classification-service.reqMessage String))
(= (nunet.binary-classification-service.reqMessage.service_input
    (nunet.binary-classification-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input)

;; Define nunet.binary-classification-service.reqMessage.function_name
(: nunet.binary-classification-service.reqMessage.function_name (-> nunet.binary-classification-service.reqMessage String))
(= (nunet.binary-classification-service.reqMessage.function_name
    (nunet.binary-classification-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $function_name)

;; Define nunet.binary-classification-service.reqMessage.service_input_params
(: nunet.binary-classification-service.reqMessage.service_input_params (-> nunet.binary-classification-service.reqMessage String))
(= (nunet.binary-classification-service.reqMessage.service_input_params
    (nunet.binary-classification-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;
;; protoParams ;;
;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.protoParams type
(: nunet.binary-classification-service.protoParams Type)

;; Define nunet.binary-classification-service.protoParams constuctor
(: nunet.binary-classification-service.MkprotoParams
   (->
    nunet.binary-classification-service.protoParams))

;; Define nunet.binary-classification-service.protoParams access functions

;;;;;;;;;;;;;;;;;;
;; respMetadata ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.respMetadata type
(: nunet.binary-classification-service.respMetadata Type)

;; Define nunet.binary-classification-service.respMetadata constuctor
(: nunet.binary-classification-service.MkrespMetadata
   (->
    String ; service_definition
    nunet.binary-classification-service.respMetadata))

;; Define nunet.binary-classification-service.respMetadata access functions

;; Define nunet.binary-classification-service.respMetadata.service_definition
(: nunet.binary-classification-service.respMetadata.service_definition (-> nunet.binary-classification-service.respMetadata String))
(= (nunet.binary-classification-service.respMetadata.service_definition
    (nunet.binary-classification-service.MkrespMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;
;; metaParams ;;
;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.metaParams type
(: nunet.binary-classification-service.metaParams Type)

;; Define nunet.binary-classification-service.metaParams constuctor
(: nunet.binary-classification-service.MkmetaParams
   (->
    String ; service_name
    nunet.binary-classification-service.metaParams))

;; Define nunet.binary-classification-service.metaParams access functions

;; Define nunet.binary-classification-service.metaParams.service_name
(: nunet.binary-classification-service.metaParams.service_name (-> nunet.binary-classification-service.metaParams String))
(= (nunet.binary-classification-service.metaParams.service_name
    (nunet.binary-classification-service.MkmetaParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;
;; priceParamsService ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.priceParamsService type
(: nunet.binary-classification-service.priceParamsService Type)

;; Define nunet.binary-classification-service.priceParamsService constuctor
(: nunet.binary-classification-service.MkpriceParamsService
   (->
    nunet.binary-classification-service.priceParamsService))

;; Define nunet.binary-classification-service.priceParamsService access functions

;;;;;;;;;;;;;;;;;;;;;;
;; priceRespService ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.priceRespService type
(: nunet.binary-classification-service.priceRespService Type)

;; Define nunet.binary-classification-service.priceRespService constuctor
(: nunet.binary-classification-service.MkpriceRespService
   (->
    Float ; cost_per_process
    String ; pubk
    nunet.binary-classification-service.priceRespService))

;; Define nunet.binary-classification-service.priceRespService access functions

;; Define nunet.binary-classification-service.priceRespService.cost_per_process
(: nunet.binary-classification-service.priceRespService.cost_per_process (-> nunet.binary-classification-service.priceRespService Float))
(= (nunet.binary-classification-service.priceRespService.cost_per_process
    (nunet.binary-classification-service.MkpriceRespService
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.binary-classification-service.priceRespService.pubk
(: nunet.binary-classification-service.priceRespService.pubk (-> nunet.binary-classification-service.priceRespService String))
(= (nunet.binary-classification-service.priceRespService.pubk
    (nunet.binary-classification-service.MkpriceRespService
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; ProtoDefnition ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.req_msg service method
(: nunet.binary-classification-service.req_msg (-> nunet.binary-classification-service.protoParams nunet.binary-classification-service.reqMessage))

;; Define nunet.binary-classification-service.req_metadata service method
(: nunet.binary-classification-service.req_metadata (-> nunet.binary-classification-service.metaParams nunet.binary-classification-service.respMetadata))

;; Define nunet.binary-classification-service.req_service_price service method
(: nunet.binary-classification-service.req_service_price (-> nunet.binary-classification-service.priceParamsService nunet.binary-classification-service.priceRespService))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: telemetry.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.binary-classification-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; TelemetryInput ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.TelemetryInput type
(: nunet.binary-classification-service.TelemetryInput Type)

;; Define nunet.binary-classification-service.TelemetryInput constuctor
(: nunet.binary-classification-service.MkTelemetryInput
   (->
    String ; result
    Float ; cpu_used
    Float ; memory_used
    Float ; net_used
    Float ; time_taken
    String ; device_name
    String ; call_id
    String ; service_name
    nunet.binary-classification-service.TelemetryInput))

;; Define nunet.binary-classification-service.TelemetryInput access functions

;; Define nunet.binary-classification-service.TelemetryInput.result
(: nunet.binary-classification-service.TelemetryInput.result (-> nunet.binary-classification-service.TelemetryInput String))
(= (nunet.binary-classification-service.TelemetryInput.result
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $result)

;; Define nunet.binary-classification-service.TelemetryInput.cpu_used
(: nunet.binary-classification-service.TelemetryInput.cpu_used (-> nunet.binary-classification-service.TelemetryInput Float))
(= (nunet.binary-classification-service.TelemetryInput.cpu_used
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $cpu_used)

;; Define nunet.binary-classification-service.TelemetryInput.memory_used
(: nunet.binary-classification-service.TelemetryInput.memory_used (-> nunet.binary-classification-service.TelemetryInput Float))
(= (nunet.binary-classification-service.TelemetryInput.memory_used
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $memory_used)

;; Define nunet.binary-classification-service.TelemetryInput.net_used
(: nunet.binary-classification-service.TelemetryInput.net_used (-> nunet.binary-classification-service.TelemetryInput Float))
(= (nunet.binary-classification-service.TelemetryInput.net_used
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $net_used)

;; Define nunet.binary-classification-service.TelemetryInput.time_taken
(: nunet.binary-classification-service.TelemetryInput.time_taken (-> nunet.binary-classification-service.TelemetryInput Float))
(= (nunet.binary-classification-service.TelemetryInput.time_taken
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $time_taken)

;; Define nunet.binary-classification-service.TelemetryInput.device_name
(: nunet.binary-classification-service.TelemetryInput.device_name (-> nunet.binary-classification-service.TelemetryInput String))
(= (nunet.binary-classification-service.TelemetryInput.device_name
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $device_name)

;; Define nunet.binary-classification-service.TelemetryInput.call_id
(: nunet.binary-classification-service.TelemetryInput.call_id (-> nunet.binary-classification-service.TelemetryInput String))
(= (nunet.binary-classification-service.TelemetryInput.call_id
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $call_id)

;; Define nunet.binary-classification-service.TelemetryInput.service_name
(: nunet.binary-classification-service.TelemetryInput.service_name (-> nunet.binary-classification-service.TelemetryInput String))
(= (nunet.binary-classification-service.TelemetryInput.service_name
    (nunet.binary-classification-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;
;; TelemetryOutput ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.TelemetryOutput type
(: nunet.binary-classification-service.TelemetryOutput Type)

;; Define nunet.binary-classification-service.TelemetryOutput constuctor
(: nunet.binary-classification-service.MkTelemetryOutput
   (->
    String ; response
    nunet.binary-classification-service.TelemetryOutput))

;; Define nunet.binary-classification-service.TelemetryOutput access functions

;; Define nunet.binary-classification-service.TelemetryOutput.response
(: nunet.binary-classification-service.TelemetryOutput.response (-> nunet.binary-classification-service.TelemetryOutput String))
(= (nunet.binary-classification-service.TelemetryOutput.response
    (nunet.binary-classification-service.MkTelemetryOutput
     $response)) $response)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; NunetAdapter ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.binary-classification-service.telemetry service method
(: nunet.binary-classification-service.telemetry (-> nunet.binary-classification-service.TelemetryInput nunet.binary-classification-service.TelemetryOutput))



;; ServiceID definition of nunet.uclnlp-service"
(: nunet.uclnlp-service (ServiceID nunet))

;; Service metadata of nunet.uclnlp-service
(= (service nunet.uclnlp-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "UCLNLP Service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmQzc55GJJtnBwYxTPstxcht3weP7QTukuHTC3TDXy4G7b"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://gitlab.com/nunet/fake-news-detection/uclnlp"
           ; url content
           null
           ; description
           "<div>Based on pre-trained model, estimates the nature of relationship between the title of an article and the body text of an article. The estimation is returned in the form of probabilities attached to four pre-defined types of relation: unrelated, discussing, agreeing, disagreeing. Sum of all probabilities add up to one. The displayed relation has the highest probability attached by the algorithm</div>"
           ; short_description
           "This service uses the relationship between the title and the body to suggest if the news is fake.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "stance detection" (Cons "fake" (Cons "warning" (Cons "news" (Cons "fake news" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service_proto.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.uclnlp-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; reqMessage ;;
;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.reqMessage type
(: nunet.uclnlp-service.reqMessage Type)

;; Define nunet.uclnlp-service.reqMessage constuctor
(: nunet.uclnlp-service.MkreqMessage
   (->
    String ; proto_defnition
    String ; service_stub
    String ; service_input
    String ; function_name
    String ; service_input_params
    nunet.uclnlp-service.reqMessage))

;; Define nunet.uclnlp-service.reqMessage access functions

;; Define nunet.uclnlp-service.reqMessage.proto_defnition
(: nunet.uclnlp-service.reqMessage.proto_defnition (-> nunet.uclnlp-service.reqMessage String))
(= (nunet.uclnlp-service.reqMessage.proto_defnition
    (nunet.uclnlp-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $proto_defnition)

;; Define nunet.uclnlp-service.reqMessage.service_stub
(: nunet.uclnlp-service.reqMessage.service_stub (-> nunet.uclnlp-service.reqMessage String))
(= (nunet.uclnlp-service.reqMessage.service_stub
    (nunet.uclnlp-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_stub)

;; Define nunet.uclnlp-service.reqMessage.service_input
(: nunet.uclnlp-service.reqMessage.service_input (-> nunet.uclnlp-service.reqMessage String))
(= (nunet.uclnlp-service.reqMessage.service_input
    (nunet.uclnlp-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input)

;; Define nunet.uclnlp-service.reqMessage.function_name
(: nunet.uclnlp-service.reqMessage.function_name (-> nunet.uclnlp-service.reqMessage String))
(= (nunet.uclnlp-service.reqMessage.function_name
    (nunet.uclnlp-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $function_name)

;; Define nunet.uclnlp-service.reqMessage.service_input_params
(: nunet.uclnlp-service.reqMessage.service_input_params (-> nunet.uclnlp-service.reqMessage String))
(= (nunet.uclnlp-service.reqMessage.service_input_params
    (nunet.uclnlp-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;
;; protoParams ;;
;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.protoParams type
(: nunet.uclnlp-service.protoParams Type)

;; Define nunet.uclnlp-service.protoParams constuctor
(: nunet.uclnlp-service.MkprotoParams
   (->
    nunet.uclnlp-service.protoParams))

;; Define nunet.uclnlp-service.protoParams access functions

;;;;;;;;;;;;;;;;;;
;; respMetadata ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.respMetadata type
(: nunet.uclnlp-service.respMetadata Type)

;; Define nunet.uclnlp-service.respMetadata constuctor
(: nunet.uclnlp-service.MkrespMetadata
   (->
    String ; service_definition
    nunet.uclnlp-service.respMetadata))

;; Define nunet.uclnlp-service.respMetadata access functions

;; Define nunet.uclnlp-service.respMetadata.service_definition
(: nunet.uclnlp-service.respMetadata.service_definition (-> nunet.uclnlp-service.respMetadata String))
(= (nunet.uclnlp-service.respMetadata.service_definition
    (nunet.uclnlp-service.MkrespMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;
;; metaParams ;;
;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.metaParams type
(: nunet.uclnlp-service.metaParams Type)

;; Define nunet.uclnlp-service.metaParams constuctor
(: nunet.uclnlp-service.MkmetaParams
   (->
    String ; service_name
    nunet.uclnlp-service.metaParams))

;; Define nunet.uclnlp-service.metaParams access functions

;; Define nunet.uclnlp-service.metaParams.service_name
(: nunet.uclnlp-service.metaParams.service_name (-> nunet.uclnlp-service.metaParams String))
(= (nunet.uclnlp-service.metaParams.service_name
    (nunet.uclnlp-service.MkmetaParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;
;; priceParamsService ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.priceParamsService type
(: nunet.uclnlp-service.priceParamsService Type)

;; Define nunet.uclnlp-service.priceParamsService constuctor
(: nunet.uclnlp-service.MkpriceParamsService
   (->
    nunet.uclnlp-service.priceParamsService))

;; Define nunet.uclnlp-service.priceParamsService access functions

;;;;;;;;;;;;;;;;;;;;;;
;; priceRespService ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.priceRespService type
(: nunet.uclnlp-service.priceRespService Type)

;; Define nunet.uclnlp-service.priceRespService constuctor
(: nunet.uclnlp-service.MkpriceRespService
   (->
    Float ; cost_per_process
    String ; pubk
    nunet.uclnlp-service.priceRespService))

;; Define nunet.uclnlp-service.priceRespService access functions

;; Define nunet.uclnlp-service.priceRespService.cost_per_process
(: nunet.uclnlp-service.priceRespService.cost_per_process (-> nunet.uclnlp-service.priceRespService Float))
(= (nunet.uclnlp-service.priceRespService.cost_per_process
    (nunet.uclnlp-service.MkpriceRespService
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.uclnlp-service.priceRespService.pubk
(: nunet.uclnlp-service.priceRespService.pubk (-> nunet.uclnlp-service.priceRespService String))
(= (nunet.uclnlp-service.priceRespService.pubk
    (nunet.uclnlp-service.MkpriceRespService
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; ProtoDefnition ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.req_msg service method
(: nunet.uclnlp-service.req_msg (-> nunet.uclnlp-service.protoParams nunet.uclnlp-service.reqMessage))

;; Define nunet.uclnlp-service.req_metadata service method
(: nunet.uclnlp-service.req_metadata (-> nunet.uclnlp-service.metaParams nunet.uclnlp-service.respMetadata))

;; Define nunet.uclnlp-service.req_service_price service method
(: nunet.uclnlp-service.req_service_price (-> nunet.uclnlp-service.priceParamsService nunet.uclnlp-service.priceRespService))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: telemetry.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.uclnlp-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; TelemetryInput ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.TelemetryInput type
(: nunet.uclnlp-service.TelemetryInput Type)

;; Define nunet.uclnlp-service.TelemetryInput constuctor
(: nunet.uclnlp-service.MkTelemetryInput
   (->
    String ; result
    Float ; cpu_used
    Float ; memory_used
    Float ; net_used
    Float ; time_taken
    String ; device_name
    String ; call_id
    String ; service_name
    nunet.uclnlp-service.TelemetryInput))

;; Define nunet.uclnlp-service.TelemetryInput access functions

;; Define nunet.uclnlp-service.TelemetryInput.result
(: nunet.uclnlp-service.TelemetryInput.result (-> nunet.uclnlp-service.TelemetryInput String))
(= (nunet.uclnlp-service.TelemetryInput.result
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $result)

;; Define nunet.uclnlp-service.TelemetryInput.cpu_used
(: nunet.uclnlp-service.TelemetryInput.cpu_used (-> nunet.uclnlp-service.TelemetryInput Float))
(= (nunet.uclnlp-service.TelemetryInput.cpu_used
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $cpu_used)

;; Define nunet.uclnlp-service.TelemetryInput.memory_used
(: nunet.uclnlp-service.TelemetryInput.memory_used (-> nunet.uclnlp-service.TelemetryInput Float))
(= (nunet.uclnlp-service.TelemetryInput.memory_used
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $memory_used)

;; Define nunet.uclnlp-service.TelemetryInput.net_used
(: nunet.uclnlp-service.TelemetryInput.net_used (-> nunet.uclnlp-service.TelemetryInput Float))
(= (nunet.uclnlp-service.TelemetryInput.net_used
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $net_used)

;; Define nunet.uclnlp-service.TelemetryInput.time_taken
(: nunet.uclnlp-service.TelemetryInput.time_taken (-> nunet.uclnlp-service.TelemetryInput Float))
(= (nunet.uclnlp-service.TelemetryInput.time_taken
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $time_taken)

;; Define nunet.uclnlp-service.TelemetryInput.device_name
(: nunet.uclnlp-service.TelemetryInput.device_name (-> nunet.uclnlp-service.TelemetryInput String))
(= (nunet.uclnlp-service.TelemetryInput.device_name
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $device_name)

;; Define nunet.uclnlp-service.TelemetryInput.call_id
(: nunet.uclnlp-service.TelemetryInput.call_id (-> nunet.uclnlp-service.TelemetryInput String))
(= (nunet.uclnlp-service.TelemetryInput.call_id
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $call_id)

;; Define nunet.uclnlp-service.TelemetryInput.service_name
(: nunet.uclnlp-service.TelemetryInput.service_name (-> nunet.uclnlp-service.TelemetryInput String))
(= (nunet.uclnlp-service.TelemetryInput.service_name
    (nunet.uclnlp-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;
;; TelemetryOutput ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.TelemetryOutput type
(: nunet.uclnlp-service.TelemetryOutput Type)

;; Define nunet.uclnlp-service.TelemetryOutput constuctor
(: nunet.uclnlp-service.MkTelemetryOutput
   (->
    String ; response
    nunet.uclnlp-service.TelemetryOutput))

;; Define nunet.uclnlp-service.TelemetryOutput access functions

;; Define nunet.uclnlp-service.TelemetryOutput.response
(: nunet.uclnlp-service.TelemetryOutput.response (-> nunet.uclnlp-service.TelemetryOutput String))
(= (nunet.uclnlp-service.TelemetryOutput.response
    (nunet.uclnlp-service.MkTelemetryOutput
     $response)) $response)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; NunetAdapter ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.telemetry service method
(: nunet.uclnlp-service.telemetry (-> nunet.uclnlp-service.TelemetryInput nunet.uclnlp-service.TelemetryOutput))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: uclnlp_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: uclnlp_service
;; Prefix: nunet.uclnlp-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; InputData ;;
;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.InputData type
(: nunet.uclnlp-service.InputData Type)

;; Define nunet.uclnlp-service.InputData constuctor
(: nunet.uclnlp-service.MkInputData
   (->
    String ; headline
    String ; body
    String ; call_id
    nunet.uclnlp-service.InputData))

;; Define nunet.uclnlp-service.InputData access functions

;; Define nunet.uclnlp-service.InputData.headline
(: nunet.uclnlp-service.InputData.headline (-> nunet.uclnlp-service.InputData String))
(= (nunet.uclnlp-service.InputData.headline
    (nunet.uclnlp-service.MkInputData
     $headline
     $body
     $call_id)) $headline)

;; Define nunet.uclnlp-service.InputData.body
(: nunet.uclnlp-service.InputData.body (-> nunet.uclnlp-service.InputData String))
(= (nunet.uclnlp-service.InputData.body
    (nunet.uclnlp-service.MkInputData
     $headline
     $body
     $call_id)) $body)

;; Define nunet.uclnlp-service.InputData.call_id
(: nunet.uclnlp-service.InputData.call_id (-> nunet.uclnlp-service.InputData String))
(= (nunet.uclnlp-service.InputData.call_id
    (nunet.uclnlp-service.MkInputData
     $headline
     $body
     $call_id)) $call_id)

;;;;;;;;;;;;
;; Stance ;;
;;;;;;;;;;;;

;; Define nunet.uclnlp-service.Stance type
(: nunet.uclnlp-service.Stance Type)

;; Define nunet.uclnlp-service.Stance constuctor
(: nunet.uclnlp-service.MkStance
   (->
    Float ; agree
    Float ; disagree
    Float ; discuss
    Float ; unrelated
    nunet.uclnlp-service.Stance))

;; Define nunet.uclnlp-service.Stance access functions

;; Define nunet.uclnlp-service.Stance.agree
(: nunet.uclnlp-service.Stance.agree (-> nunet.uclnlp-service.Stance Float))
(= (nunet.uclnlp-service.Stance.agree
    (nunet.uclnlp-service.MkStance
     $agree
     $disagree
     $discuss
     $unrelated)) $agree)

;; Define nunet.uclnlp-service.Stance.disagree
(: nunet.uclnlp-service.Stance.disagree (-> nunet.uclnlp-service.Stance Float))
(= (nunet.uclnlp-service.Stance.disagree
    (nunet.uclnlp-service.MkStance
     $agree
     $disagree
     $discuss
     $unrelated)) $disagree)

;; Define nunet.uclnlp-service.Stance.discuss
(: nunet.uclnlp-service.Stance.discuss (-> nunet.uclnlp-service.Stance Float))
(= (nunet.uclnlp-service.Stance.discuss
    (nunet.uclnlp-service.MkStance
     $agree
     $disagree
     $discuss
     $unrelated)) $discuss)

;; Define nunet.uclnlp-service.Stance.unrelated
(: nunet.uclnlp-service.Stance.unrelated (-> nunet.uclnlp-service.Stance Float))
(= (nunet.uclnlp-service.Stance.unrelated
    (nunet.uclnlp-service.MkStance
     $agree
     $disagree
     $discuss
     $unrelated)) $unrelated)

;;;;;;;;;;
;; Resp ;;
;;;;;;;;;;

;; Define nunet.uclnlp-service.Resp type
(: nunet.uclnlp-service.Resp Type)

;; Define nunet.uclnlp-service.Resp constuctor
(: nunet.uclnlp-service.MkResp
   (->
    String ; response
    nunet.uclnlp-service.Resp))

;; Define nunet.uclnlp-service.Resp access functions

;; Define nunet.uclnlp-service.Resp.response
(: nunet.uclnlp-service.Resp.response (-> nunet.uclnlp-service.Resp String))
(= (nunet.uclnlp-service.Resp.response
    (nunet.uclnlp-service.MkResp
     $response)) $response)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; UCLNLPStanceClassification ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.uclnlp-service.stance_classify service method
(: nunet.uclnlp-service.stance_classify (-> nunet.uclnlp-service.InputData nunet.uclnlp-service.Resp))



;; ServiceID definition of nunet.fake-news-score-service.json"
(: nunet.fake-news-score-service.json (ServiceID nunet))

;; Service metadata of nunet.fake-news-score-service.json
(= (service nunet.fake-news-score-service.json)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Fake News Score Service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmasYx3Qt3Z4webpfZfRKLqoXfdwftECS5bPjvkQ9CGmRs"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://gitlab.com/nunet/fake-news-detection/fake_news_score/-/tree/53-publish-the-service-to-nunet-org/"
           ; url content
           null
           ; description
           "<div>News score is an AI service that orchestrates all other services constituting to fake news warning application. It implements an ensemble function which combines weighted results of other services and outputs the general probability estimation (in %) that an article contains fake news. News score is extendable and can include other services (provided by community or third party developers) into an ensemble if they contribute to higher quality of the application.</div>"
           ; short_description
           "This service uses uclnlp service and binary classification service to output fake news score.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "stance detection" (Cons "fake" (Cons "warning" (Cons "news" (Cons "fake news" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: fake_news_score.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.fake-news-score-service.json
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; InputFNS ;;
;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.InputFNS type
(: nunet.fake-news-score-service.json.InputFNS Type)

;; Define nunet.fake-news-score-service.json.InputFNS constuctor
(: nunet.fake-news-score-service.json.MkInputFNS
   (->
    String ; headline
    String ; body
    String ; call_id
    nunet.fake-news-score-service.json.InputFNS))

;; Define nunet.fake-news-score-service.json.InputFNS access functions

;; Define nunet.fake-news-score-service.json.InputFNS.headline
(: nunet.fake-news-score-service.json.InputFNS.headline (-> nunet.fake-news-score-service.json.InputFNS String))
(= (nunet.fake-news-score-service.json.InputFNS.headline
    (nunet.fake-news-score-service.json.MkInputFNS
     $headline
     $body
     $call_id)) $headline)

;; Define nunet.fake-news-score-service.json.InputFNS.body
(: nunet.fake-news-score-service.json.InputFNS.body (-> nunet.fake-news-score-service.json.InputFNS String))
(= (nunet.fake-news-score-service.json.InputFNS.body
    (nunet.fake-news-score-service.json.MkInputFNS
     $headline
     $body
     $call_id)) $body)

;; Define nunet.fake-news-score-service.json.InputFNS.call_id
(: nunet.fake-news-score-service.json.InputFNS.call_id (-> nunet.fake-news-score-service.json.InputFNS String))
(= (nunet.fake-news-score-service.json.InputFNS.call_id
    (nunet.fake-news-score-service.json.MkInputFNS
     $headline
     $body
     $call_id)) $call_id)

;;;;;;;;;;;
;; Score ;;
;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.Score type
(: nunet.fake-news-score-service.json.Score Type)

;; Define nunet.fake-news-score-service.json.Score constuctor
(: nunet.fake-news-score-service.json.MkScore
   (->
    String ; stance
    Double ; agree
    Double ; disagree
    Double ; discuss
    Double ; unrelated
    nunet.fake-news-score-service.json.Score))

;; Define nunet.fake-news-score-service.json.Score access functions

;; Define nunet.fake-news-score-service.json.Score.stance
(: nunet.fake-news-score-service.json.Score.stance (-> nunet.fake-news-score-service.json.Score String))
(= (nunet.fake-news-score-service.json.Score.stance
    (nunet.fake-news-score-service.json.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $stance)

;; Define nunet.fake-news-score-service.json.Score.agree
(: nunet.fake-news-score-service.json.Score.agree (-> nunet.fake-news-score-service.json.Score Double))
(= (nunet.fake-news-score-service.json.Score.agree
    (nunet.fake-news-score-service.json.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $agree)

;; Define nunet.fake-news-score-service.json.Score.disagree
(: nunet.fake-news-score-service.json.Score.disagree (-> nunet.fake-news-score-service.json.Score Double))
(= (nunet.fake-news-score-service.json.Score.disagree
    (nunet.fake-news-score-service.json.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $disagree)

;; Define nunet.fake-news-score-service.json.Score.discuss
(: nunet.fake-news-score-service.json.Score.discuss (-> nunet.fake-news-score-service.json.Score Double))
(= (nunet.fake-news-score-service.json.Score.discuss
    (nunet.fake-news-score-service.json.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $discuss)

;; Define nunet.fake-news-score-service.json.Score.unrelated
(: nunet.fake-news-score-service.json.Score.unrelated (-> nunet.fake-news-score-service.json.Score Double))
(= (nunet.fake-news-score-service.json.Score.unrelated
    (nunet.fake-news-score-service.json.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $unrelated)

;;;;;;;;;;
;; Resp ;;
;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.Resp type
(: nunet.fake-news-score-service.json.Resp Type)

;; Define nunet.fake-news-score-service.json.Resp constuctor
(: nunet.fake-news-score-service.json.MkResp
   (->
    String ; response
    nunet.fake-news-score-service.json.Resp))

;; Define nunet.fake-news-score-service.json.Resp access functions

;; Define nunet.fake-news-score-service.json.Resp.response
(: nunet.fake-news-score-service.json.Resp.response (-> nunet.fake-news-score-service.json.Resp String))
(= (nunet.fake-news-score-service.json.Resp.response
    (nunet.fake-news-score-service.json.MkResp
     $response)) $response)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; FakeNewsScore ;;
;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.fn_score_calc service method
(: nunet.fake-news-score-service.json.fn_score_calc (-> nunet.fake-news-score-service.json.InputFNS nunet.fake-news-score-service.json.Resp))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: nunet_adapter.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.fake-news-score-service.json
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefnition ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.ServiceDefnition type
(: nunet.fake-news-score-service.json.ServiceDefnition Type)

;; Define nunet.fake-news-score-service.json.ServiceDefnition constuctor
(: nunet.fake-news-score-service.json.MkServiceDefnition
   (->
    String ; service_name
    String ; params
    nunet.fake-news-score-service.json.ServiceDefnition))

;; Define nunet.fake-news-score-service.json.ServiceDefnition access functions

;; Define nunet.fake-news-score-service.json.ServiceDefnition.service_name
(: nunet.fake-news-score-service.json.ServiceDefnition.service_name (-> nunet.fake-news-score-service.json.ServiceDefnition String))
(= (nunet.fake-news-score-service.json.ServiceDefnition.service_name
    (nunet.fake-news-score-service.json.MkServiceDefnition
     $service_name
     $params)) $service_name)

;; Define nunet.fake-news-score-service.json.ServiceDefnition.params
(: nunet.fake-news-score-service.json.ServiceDefnition.params (-> nunet.fake-news-score-service.json.ServiceDefnition String))
(= (nunet.fake-news-score-service.json.ServiceDefnition.params
    (nunet.fake-news-score-service.json.MkServiceDefnition
     $service_name
     $params)) $params)

;;;;;;;;;;;;;;;;;;;;;
;; ServiceResponse ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.ServiceResponse type
(: nunet.fake-news-score-service.json.ServiceResponse Type)

;; Define nunet.fake-news-score-service.json.ServiceResponse constuctor
(: nunet.fake-news-score-service.json.MkServiceResponse
   (->
    String ; service_response
    nunet.fake-news-score-service.json.ServiceResponse))

;; Define nunet.fake-news-score-service.json.ServiceResponse access functions

;; Define nunet.fake-news-score-service.json.ServiceResponse.service_response
(: nunet.fake-news-score-service.json.ServiceResponse.service_response (-> nunet.fake-news-score-service.json.ServiceResponse String))
(= (nunet.fake-news-score-service.json.ServiceResponse.service_response
    (nunet.fake-news-score-service.json.MkServiceResponse
     $service_response)) $service_response)

;;;;;;;;;;;;;;;;;;;;
;; TelemetryInput ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.TelemetryInput type
(: nunet.fake-news-score-service.json.TelemetryInput Type)

;; Define nunet.fake-news-score-service.json.TelemetryInput constuctor
(: nunet.fake-news-score-service.json.MkTelemetryInput
   (->
    String ; result
    Float ; cpu_used
    Float ; memory_used
    Float ; net_used
    Float ; time_taken
    String ; device_name
    String ; call_id
    String ; service_name
    nunet.fake-news-score-service.json.TelemetryInput))

;; Define nunet.fake-news-score-service.json.TelemetryInput access functions

;; Define nunet.fake-news-score-service.json.TelemetryInput.result
(: nunet.fake-news-score-service.json.TelemetryInput.result (-> nunet.fake-news-score-service.json.TelemetryInput String))
(= (nunet.fake-news-score-service.json.TelemetryInput.result
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $result)

;; Define nunet.fake-news-score-service.json.TelemetryInput.cpu_used
(: nunet.fake-news-score-service.json.TelemetryInput.cpu_used (-> nunet.fake-news-score-service.json.TelemetryInput Float))
(= (nunet.fake-news-score-service.json.TelemetryInput.cpu_used
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $cpu_used)

;; Define nunet.fake-news-score-service.json.TelemetryInput.memory_used
(: nunet.fake-news-score-service.json.TelemetryInput.memory_used (-> nunet.fake-news-score-service.json.TelemetryInput Float))
(= (nunet.fake-news-score-service.json.TelemetryInput.memory_used
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $memory_used)

;; Define nunet.fake-news-score-service.json.TelemetryInput.net_used
(: nunet.fake-news-score-service.json.TelemetryInput.net_used (-> nunet.fake-news-score-service.json.TelemetryInput Float))
(= (nunet.fake-news-score-service.json.TelemetryInput.net_used
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $net_used)

;; Define nunet.fake-news-score-service.json.TelemetryInput.time_taken
(: nunet.fake-news-score-service.json.TelemetryInput.time_taken (-> nunet.fake-news-score-service.json.TelemetryInput Float))
(= (nunet.fake-news-score-service.json.TelemetryInput.time_taken
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $time_taken)

;; Define nunet.fake-news-score-service.json.TelemetryInput.device_name
(: nunet.fake-news-score-service.json.TelemetryInput.device_name (-> nunet.fake-news-score-service.json.TelemetryInput String))
(= (nunet.fake-news-score-service.json.TelemetryInput.device_name
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $device_name)

;; Define nunet.fake-news-score-service.json.TelemetryInput.call_id
(: nunet.fake-news-score-service.json.TelemetryInput.call_id (-> nunet.fake-news-score-service.json.TelemetryInput String))
(= (nunet.fake-news-score-service.json.TelemetryInput.call_id
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $call_id)

;; Define nunet.fake-news-score-service.json.TelemetryInput.service_name
(: nunet.fake-news-score-service.json.TelemetryInput.service_name (-> nunet.fake-news-score-service.json.TelemetryInput String))
(= (nunet.fake-news-score-service.json.TelemetryInput.service_name
    (nunet.fake-news-score-service.json.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;
;; TelemetryOutput ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.TelemetryOutput type
(: nunet.fake-news-score-service.json.TelemetryOutput Type)

;; Define nunet.fake-news-score-service.json.TelemetryOutput constuctor
(: nunet.fake-news-score-service.json.MkTelemetryOutput
   (->
    String ; response
    nunet.fake-news-score-service.json.TelemetryOutput))

;; Define nunet.fake-news-score-service.json.TelemetryOutput access functions

;; Define nunet.fake-news-score-service.json.TelemetryOutput.response
(: nunet.fake-news-score-service.json.TelemetryOutput.response (-> nunet.fake-news-score-service.json.TelemetryOutput String))
(= (nunet.fake-news-score-service.json.TelemetryOutput.response
    (nunet.fake-news-score-service.json.MkTelemetryOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;
;; AdapterInput ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterInput type
(: nunet.fake-news-score-service.json.AdapterInput Type)

;; Define nunet.fake-news-score-service.json.AdapterInput constuctor
(: nunet.fake-news-score-service.json.MkAdapterInput
   (->
    String ; service_name
    String ; params
    String ; declarations
    String ; service_input_params
    nunet.fake-news-score-service.json.AdapterInput))

;; Define nunet.fake-news-score-service.json.AdapterInput access functions

;; Define nunet.fake-news-score-service.json.AdapterInput.service_name
(: nunet.fake-news-score-service.json.AdapterInput.service_name (-> nunet.fake-news-score-service.json.AdapterInput String))
(= (nunet.fake-news-score-service.json.AdapterInput.service_name
    (nunet.fake-news-score-service.json.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $service_name)

;; Define nunet.fake-news-score-service.json.AdapterInput.params
(: nunet.fake-news-score-service.json.AdapterInput.params (-> nunet.fake-news-score-service.json.AdapterInput String))
(= (nunet.fake-news-score-service.json.AdapterInput.params
    (nunet.fake-news-score-service.json.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $params)

;; Define nunet.fake-news-score-service.json.AdapterInput.declarations
(: nunet.fake-news-score-service.json.AdapterInput.declarations (-> nunet.fake-news-score-service.json.AdapterInput String))
(= (nunet.fake-news-score-service.json.AdapterInput.declarations
    (nunet.fake-news-score-service.json.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $declarations)

;; Define nunet.fake-news-score-service.json.AdapterInput.service_input_params
(: nunet.fake-news-score-service.json.AdapterInput.service_input_params (-> nunet.fake-news-score-service.json.AdapterInput String))
(= (nunet.fake-news-score-service.json.AdapterInput.service_input_params
    (nunet.fake-news-score-service.json.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;;;
;; AdapterOutput ;;
;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterOutput type
(: nunet.fake-news-score-service.json.AdapterOutput Type)

;; Define nunet.fake-news-score-service.json.AdapterOutput constuctor
(: nunet.fake-news-score-service.json.MkAdapterOutput
   (->
    String ; response
    nunet.fake-news-score-service.json.AdapterOutput))

;; Define nunet.fake-news-score-service.json.AdapterOutput access functions

;; Define nunet.fake-news-score-service.json.AdapterOutput.response
(: nunet.fake-news-score-service.json.AdapterOutput.response (-> nunet.fake-news-score-service.json.AdapterOutput String))
(= (nunet.fake-news-score-service.json.AdapterOutput.response
    (nunet.fake-news-score-service.json.MkAdapterOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;;;;;;;
;; PaymentParamsInput ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.PaymentParamsInput type
(: nunet.fake-news-score-service.json.PaymentParamsInput Type)

;; Define nunet.fake-news-score-service.json.PaymentParamsInput constuctor
(: nunet.fake-news-score-service.json.MkPaymentParamsInput
   (->
    String ; service_name
    String ; service_address
    nunet.fake-news-score-service.json.PaymentParamsInput))

;; Define nunet.fake-news-score-service.json.PaymentParamsInput access functions

;; Define nunet.fake-news-score-service.json.PaymentParamsInput.service_name
(: nunet.fake-news-score-service.json.PaymentParamsInput.service_name (-> nunet.fake-news-score-service.json.PaymentParamsInput String))
(= (nunet.fake-news-score-service.json.PaymentParamsInput.service_name
    (nunet.fake-news-score-service.json.MkPaymentParamsInput
     $service_name
     $service_address)) $service_name)

;; Define nunet.fake-news-score-service.json.PaymentParamsInput.service_address
(: nunet.fake-news-score-service.json.PaymentParamsInput.service_address (-> nunet.fake-news-score-service.json.PaymentParamsInput String))
(= (nunet.fake-news-score-service.json.PaymentParamsInput.service_address
    (nunet.fake-news-score-service.json.MkPaymentParamsInput
     $service_name
     $service_address)) $service_address)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterGetResultOutput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterGetResultOutput type
(: nunet.fake-news-score-service.json.AdapterGetResultOutput Type)

;; Define nunet.fake-news-score-service.json.AdapterGetResultOutput constuctor
(: nunet.fake-news-score-service.json.MkAdapterGetResultOutput
   (->
    String ; response
    nunet.fake-news-score-service.json.AdapterGetResultOutput))

;; Define nunet.fake-news-score-service.json.AdapterGetResultOutput access functions

;; Define nunet.fake-news-score-service.json.AdapterGetResultOutput.response
(: nunet.fake-news-score-service.json.AdapterGetResultOutput.response (-> nunet.fake-news-score-service.json.AdapterGetResultOutput String))
(= (nunet.fake-news-score-service.json.AdapterGetResultOutput.response
    (nunet.fake-news-score-service.json.MkAdapterGetResultOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;;;;;
;; AdapterSignedTxn ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterSignedTxn type
(: nunet.fake-news-score-service.json.AdapterSignedTxn Type)

;; Define nunet.fake-news-score-service.json.AdapterSignedTxn constuctor
(: nunet.fake-news-score-service.json.MkAdapterSignedTxn
   (->
    String ; signed_tx
    nunet.fake-news-score-service.json.AdapterSignedTxn))

;; Define nunet.fake-news-score-service.json.AdapterSignedTxn access functions

;; Define nunet.fake-news-score-service.json.AdapterSignedTxn.signed_tx
(: nunet.fake-news-score-service.json.AdapterSignedTxn.signed_tx (-> nunet.fake-news-score-service.json.AdapterSignedTxn String))
(= (nunet.fake-news-score-service.json.AdapterSignedTxn.signed_tx
    (nunet.fake-news-score-service.json.MkAdapterSignedTxn
     $signed_tx)) $signed_tx)

;;;;;;;;;;;;;;;;;;;;
;; AdapterTxnHash ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterTxnHash type
(: nunet.fake-news-score-service.json.AdapterTxnHash Type)

;; Define nunet.fake-news-score-service.json.AdapterTxnHash constuctor
(: nunet.fake-news-score-service.json.MkAdapterTxnHash
   (->
    String ; txn_hash
    nunet.fake-news-score-service.json.AdapterTxnHash))

;; Define nunet.fake-news-score-service.json.AdapterTxnHash access functions

;; Define nunet.fake-news-score-service.json.AdapterTxnHash.txn_hash
(: nunet.fake-news-score-service.json.AdapterTxnHash.txn_hash (-> nunet.fake-news-score-service.json.AdapterTxnHash String))
(= (nunet.fake-news-score-service.json.AdapterTxnHash.txn_hash
    (nunet.fake-news-score-service.json.MkAdapterTxnHash
     $txn_hash)) $txn_hash)

;;;;;;;;;;;;;;;;;;;
;; PaymentParams ;;
;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.PaymentParams type
(: nunet.fake-news-score-service.json.PaymentParams Type)

;; Define nunet.fake-news-score-service.json.PaymentParams constuctor
(: nunet.fake-news-score-service.json.MkPaymentParams
   (->
    String ; cost_per_process
    String ; pubk
    String ; call_id
    nunet.fake-news-score-service.json.PaymentParams))

;; Define nunet.fake-news-score-service.json.PaymentParams access functions

;; Define nunet.fake-news-score-service.json.PaymentParams.cost_per_process
(: nunet.fake-news-score-service.json.PaymentParams.cost_per_process (-> nunet.fake-news-score-service.json.PaymentParams String))
(= (nunet.fake-news-score-service.json.PaymentParams.cost_per_process
    (nunet.fake-news-score-service.json.MkPaymentParams
     $cost_per_process
     $pubk
     $call_id)) $cost_per_process)

;; Define nunet.fake-news-score-service.json.PaymentParams.pubk
(: nunet.fake-news-score-service.json.PaymentParams.pubk (-> nunet.fake-news-score-service.json.PaymentParams String))
(= (nunet.fake-news-score-service.json.PaymentParams.pubk
    (nunet.fake-news-score-service.json.MkPaymentParams
     $cost_per_process
     $pubk
     $call_id)) $pubk)

;; Define nunet.fake-news-score-service.json.PaymentParams.call_id
(: nunet.fake-news-score-service.json.PaymentParams.call_id (-> nunet.fake-news-score-service.json.PaymentParams String))
(= (nunet.fake-news-score-service.json.PaymentParams.call_id
    (nunet.fake-news-score-service.json.MkPaymentParams
     $cost_per_process
     $pubk
     $call_id)) $call_id)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterSignedResult ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterSignedResult type
(: nunet.fake-news-score-service.json.AdapterSignedResult Type)

;; Define nunet.fake-news-score-service.json.AdapterSignedResult constuctor
(: nunet.fake-news-score-service.json.MkAdapterSignedResult
   (->
    String ; escrow_address
    nunet.fake-news-score-service.json.AdapterSignedResult))

;; Define nunet.fake-news-score-service.json.AdapterSignedResult access functions

;; Define nunet.fake-news-score-service.json.AdapterSignedResult.escrow_address
(: nunet.fake-news-score-service.json.AdapterSignedResult.escrow_address (-> nunet.fake-news-score-service.json.AdapterSignedResult String))
(= (nunet.fake-news-score-service.json.AdapterSignedResult.escrow_address
    (nunet.fake-news-score-service.json.MkAdapterSignedResult
     $escrow_address)) $escrow_address)

;;;;;;;;;;;;;;;;;
;; priceParams ;;
;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.priceParams type
(: nunet.fake-news-score-service.json.priceParams Type)

;; Define nunet.fake-news-score-service.json.priceParams constuctor
(: nunet.fake-news-score-service.json.MkpriceParams
   (->
    String ; service_address
    nunet.fake-news-score-service.json.priceParams))

;; Define nunet.fake-news-score-service.json.priceParams access functions

;; Define nunet.fake-news-score-service.json.priceParams.service_address
(: nunet.fake-news-score-service.json.priceParams.service_address (-> nunet.fake-news-score-service.json.priceParams String))
(= (nunet.fake-news-score-service.json.priceParams.service_address
    (nunet.fake-news-score-service.json.MkpriceParams
     $service_address)) $service_address)

;;;;;;;;;;;;;;;
;; priceResp ;;
;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.priceResp type
(: nunet.fake-news-score-service.json.priceResp Type)

;; Define nunet.fake-news-score-service.json.priceResp constuctor
(: nunet.fake-news-score-service.json.MkpriceResp
   (->
    String ; cost_per_process
    String ; pubk
    nunet.fake-news-score-service.json.priceResp))

;; Define nunet.fake-news-score-service.json.priceResp access functions

;; Define nunet.fake-news-score-service.json.priceResp.cost_per_process
(: nunet.fake-news-score-service.json.priceResp.cost_per_process (-> nunet.fake-news-score-service.json.priceResp String))
(= (nunet.fake-news-score-service.json.priceResp.cost_per_process
    (nunet.fake-news-score-service.json.MkpriceResp
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.fake-news-score-service.json.priceResp.pubk
(: nunet.fake-news-score-service.json.priceResp.pubk (-> nunet.fake-news-score-service.json.priceResp String))
(= (nunet.fake-news-score-service.json.priceResp.pubk
    (nunet.fake-news-score-service.json.MkpriceResp
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; respAdapterMetadata ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.respAdapterMetadata type
(: nunet.fake-news-score-service.json.respAdapterMetadata Type)

;; Define nunet.fake-news-score-service.json.respAdapterMetadata constuctor
(: nunet.fake-news-score-service.json.MkrespAdapterMetadata
   (->
    String ; service_definition
    nunet.fake-news-score-service.json.respAdapterMetadata))

;; Define nunet.fake-news-score-service.json.respAdapterMetadata access functions

;; Define nunet.fake-news-score-service.json.respAdapterMetadata.service_definition
(: nunet.fake-news-score-service.json.respAdapterMetadata.service_definition (-> nunet.fake-news-score-service.json.respAdapterMetadata String))
(= (nunet.fake-news-score-service.json.respAdapterMetadata.service_definition
    (nunet.fake-news-score-service.json.MkrespAdapterMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;;;;;;;;
;; metaAdapterParams ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.metaAdapterParams type
(: nunet.fake-news-score-service.json.metaAdapterParams Type)

;; Define nunet.fake-news-score-service.json.metaAdapterParams constuctor
(: nunet.fake-news-score-service.json.MkmetaAdapterParams
   (->
    String ; service_name
    nunet.fake-news-score-service.json.metaAdapterParams))

;; Define nunet.fake-news-score-service.json.metaAdapterParams access functions

;; Define nunet.fake-news-score-service.json.metaAdapterParams.service_name
(: nunet.fake-news-score-service.json.metaAdapterParams.service_name (-> nunet.fake-news-score-service.json.metaAdapterParams String))
(= (nunet.fake-news-score-service.json.metaAdapterParams.service_name
    (nunet.fake-news-score-service.json.MkmetaAdapterParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; respServiceMetadata ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.respServiceMetadata type
(: nunet.fake-news-score-service.json.respServiceMetadata Type)

;; Define nunet.fake-news-score-service.json.respServiceMetadata constuctor
(: nunet.fake-news-score-service.json.MkrespServiceMetadata
   (->
    String ; service_definition
    nunet.fake-news-score-service.json.respServiceMetadata))

;; Define nunet.fake-news-score-service.json.respServiceMetadata access functions

;; Define nunet.fake-news-score-service.json.respServiceMetadata.service_definition
(: nunet.fake-news-score-service.json.respServiceMetadata.service_definition (-> nunet.fake-news-score-service.json.respServiceMetadata String))
(= (nunet.fake-news-score-service.json.respServiceMetadata.service_definition
    (nunet.fake-news-score-service.json.MkrespServiceMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;;;;;;;;
;; metaServiceParams ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.metaServiceParams type
(: nunet.fake-news-score-service.json.metaServiceParams Type)

;; Define nunet.fake-news-score-service.json.metaServiceParams constuctor
(: nunet.fake-news-score-service.json.MkmetaServiceParams
   (->
    String ; service_name
    nunet.fake-news-score-service.json.metaServiceParams))

;; Define nunet.fake-news-score-service.json.metaServiceParams access functions

;; Define nunet.fake-news-score-service.json.metaServiceParams.service_name
(: nunet.fake-news-score-service.json.metaServiceParams.service_name (-> nunet.fake-news-score-service.json.metaServiceParams String))
(= (nunet.fake-news-score-service.json.metaServiceParams.service_name
    (nunet.fake-news-score-service.json.MkmetaServiceParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefnitionWorkflow ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow type
(: nunet.fake-news-score-service.json.ServiceDefnitionWorkflow Type)

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow constuctor
(: nunet.fake-news-score-service.json.MkServiceDefnitionWorkflow
   (->
    String ; service_name
    String ; params
    String ; declarations
    String ; call_id
    String ; service_input_params
    nunet.fake-news-score-service.json.ServiceDefnitionWorkflow))

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow access functions

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.service_name
(: nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.service_name (-> nunet.fake-news-score-service.json.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.service_name
    (nunet.fake-news-score-service.json.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $service_name)

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.params
(: nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.params (-> nunet.fake-news-score-service.json.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.params
    (nunet.fake-news-score-service.json.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $params)

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.declarations
(: nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.declarations (-> nunet.fake-news-score-service.json.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.declarations
    (nunet.fake-news-score-service.json.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $declarations)

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.call_id
(: nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.call_id (-> nunet.fake-news-score-service.json.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.call_id
    (nunet.fake-news-score-service.json.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $call_id)

;; Define nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.service_input_params
(: nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.service_input_params (-> nunet.fake-news-score-service.json.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.json.ServiceDefnitionWorkflow.service_input_params
    (nunet.fake-news-score-service.json.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterReleaseFunds ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterReleaseFunds type
(: nunet.fake-news-score-service.json.AdapterReleaseFunds Type)

;; Define nunet.fake-news-score-service.json.AdapterReleaseFunds constuctor
(: nunet.fake-news-score-service.json.MkAdapterReleaseFunds
   (->
    String ; escrow_address
    String ; public_key
    String ; agi_amount
    nunet.fake-news-score-service.json.AdapterReleaseFunds))

;; Define nunet.fake-news-score-service.json.AdapterReleaseFunds access functions

;; Define nunet.fake-news-score-service.json.AdapterReleaseFunds.escrow_address
(: nunet.fake-news-score-service.json.AdapterReleaseFunds.escrow_address (-> nunet.fake-news-score-service.json.AdapterReleaseFunds String))
(= (nunet.fake-news-score-service.json.AdapterReleaseFunds.escrow_address
    (nunet.fake-news-score-service.json.MkAdapterReleaseFunds
     $escrow_address
     $public_key
     $agi_amount)) $escrow_address)

;; Define nunet.fake-news-score-service.json.AdapterReleaseFunds.public_key
(: nunet.fake-news-score-service.json.AdapterReleaseFunds.public_key (-> nunet.fake-news-score-service.json.AdapterReleaseFunds String))
(= (nunet.fake-news-score-service.json.AdapterReleaseFunds.public_key
    (nunet.fake-news-score-service.json.MkAdapterReleaseFunds
     $escrow_address
     $public_key
     $agi_amount)) $public_key)

;; Define nunet.fake-news-score-service.json.AdapterReleaseFunds.agi_amount
(: nunet.fake-news-score-service.json.AdapterReleaseFunds.agi_amount (-> nunet.fake-news-score-service.json.AdapterReleaseFunds String))
(= (nunet.fake-news-score-service.json.AdapterReleaseFunds.agi_amount
    (nunet.fake-news-score-service.json.MkAdapterReleaseFunds
     $escrow_address
     $public_key
     $agi_amount)) $agi_amount)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterReleaseFundsOutput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterReleaseFundsOutput type
(: nunet.fake-news-score-service.json.AdapterReleaseFundsOutput Type)

;; Define nunet.fake-news-score-service.json.AdapterReleaseFundsOutput constuctor
(: nunet.fake-news-score-service.json.MkAdapterReleaseFundsOutput
   (->
    String ; response
    nunet.fake-news-score-service.json.AdapterReleaseFundsOutput))

;; Define nunet.fake-news-score-service.json.AdapterReleaseFundsOutput access functions

;; Define nunet.fake-news-score-service.json.AdapterReleaseFundsOutput.response
(: nunet.fake-news-score-service.json.AdapterReleaseFundsOutput.response (-> nunet.fake-news-score-service.json.AdapterReleaseFundsOutput String))
(= (nunet.fake-news-score-service.json.AdapterReleaseFundsOutput.response
    (nunet.fake-news-score-service.json.MkAdapterReleaseFundsOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterMachineProviderInput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderInput type
(: nunet.fake-news-score-service.json.AdapterMachineProviderInput Type)

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderInput constuctor
(: nunet.fake-news-score-service.json.MkAdapterMachineProviderInput
   (->
    String ; service_name
    nunet.fake-news-score-service.json.AdapterMachineProviderInput))

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderInput access functions

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderInput.service_name
(: nunet.fake-news-score-service.json.AdapterMachineProviderInput.service_name (-> nunet.fake-news-score-service.json.AdapterMachineProviderInput String))
(= (nunet.fake-news-score-service.json.AdapterMachineProviderInput.service_name
    (nunet.fake-news-score-service.json.MkAdapterMachineProviderInput
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterMachineProviderOutput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderOutput type
(: nunet.fake-news-score-service.json.AdapterMachineProviderOutput Type)

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderOutput constuctor
(: nunet.fake-news-score-service.json.MkAdapterMachineProviderOutput
   (->
    String ; cost_per_process
    String ; pubk
    nunet.fake-news-score-service.json.AdapterMachineProviderOutput))

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderOutput access functions

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderOutput.cost_per_process
(: nunet.fake-news-score-service.json.AdapterMachineProviderOutput.cost_per_process (-> nunet.fake-news-score-service.json.AdapterMachineProviderOutput String))
(= (nunet.fake-news-score-service.json.AdapterMachineProviderOutput.cost_per_process
    (nunet.fake-news-score-service.json.MkAdapterMachineProviderOutput
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.fake-news-score-service.json.AdapterMachineProviderOutput.pubk
(: nunet.fake-news-score-service.json.AdapterMachineProviderOutput.pubk (-> nunet.fake-news-score-service.json.AdapterMachineProviderOutput String))
(= (nunet.fake-news-score-service.json.AdapterMachineProviderOutput.pubk
    (nunet.fake-news-score-service.json.MkAdapterMachineProviderOutput
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; NunetAdapter ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.reqService service method
(: nunet.fake-news-score-service.json.reqService (-> nunet.fake-news-score-service.json.ServiceDefnition nunet.fake-news-score-service.json.ServiceResponse))

;; Define nunet.fake-news-score-service.json.telemetry service method
(: nunet.fake-news-score-service.json.telemetry (-> nunet.fake-news-score-service.json.TelemetryInput nunet.fake-news-score-service.json.TelemetryOutput))

;; Define nunet.fake-news-score-service.json.callAdapter service method
(: nunet.fake-news-score-service.json.callAdapter (-> nunet.fake-news-score-service.json.AdapterInput nunet.fake-news-score-service.json.AdapterOutput))

;; Define nunet.fake-news-score-service.json.signAdapterTransaction service method
(: nunet.fake-news-score-service.json.signAdapterTransaction (-> nunet.fake-news-score-service.json.PaymentParams nunet.fake-news-score-service.json.AdapterSignedResult))

;; Define nunet.fake-news-score-service.json.getAdapterResult service method
(: nunet.fake-news-score-service.json.getAdapterResult (-> nunet.fake-news-score-service.json.AdapterTxnHash nunet.fake-news-score-service.json.AdapterGetResultOutput))

;; Define nunet.fake-news-score-service.json.makeAdapterTransaction service method
(: nunet.fake-news-score-service.json.makeAdapterTransaction (-> nunet.fake-news-score-service.json.AdapterReleaseFunds nunet.fake-news-score-service.json.AdapterReleaseFundsOutput))

;; Define nunet.fake-news-score-service.json.getPaymentParams service method
(: nunet.fake-news-score-service.json.getPaymentParams (-> nunet.fake-news-score-service.json.PaymentParamsInput nunet.fake-news-score-service.json.PaymentParams))

;; Define nunet.fake-news-score-service.json.reqPrice service method
(: nunet.fake-news-score-service.json.reqPrice (-> nunet.fake-news-score-service.json.priceParams nunet.fake-news-score-service.json.priceResp))

;; Define nunet.fake-news-score-service.json.reqAdapterMetadata service method
(: nunet.fake-news-score-service.json.reqAdapterMetadata (-> nunet.fake-news-score-service.json.metaAdapterParams nunet.fake-news-score-service.json.respAdapterMetadata))

;; Define nunet.fake-news-score-service.json.reqServiceMetadata service method
(: nunet.fake-news-score-service.json.reqServiceMetadata (-> nunet.fake-news-score-service.json.metaServiceParams nunet.fake-news-score-service.json.respServiceMetadata))

;; Define nunet.fake-news-score-service.json.reqServiceWorkflow service method
(: nunet.fake-news-score-service.json.reqServiceWorkflow (-> nunet.fake-news-score-service.json.ServiceDefnitionWorkflow nunet.fake-news-score-service.json.ServiceResponse))

;; Define nunet.fake-news-score-service.json.getProviderPaymentParams service method
(: nunet.fake-news-score-service.json.getProviderPaymentParams (-> nunet.fake-news-score-service.json.AdapterMachineProviderInput nunet.fake-news-score-service.json.AdapterMachineProviderOutput))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service_proto.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.fake-news-score-service.json
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; reqMessage ;;
;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.reqMessage type
(: nunet.fake-news-score-service.json.reqMessage Type)

;; Define nunet.fake-news-score-service.json.reqMessage constuctor
(: nunet.fake-news-score-service.json.MkreqMessage
   (->
    String ; proto_defnition
    String ; service_stub
    String ; service_input
    String ; function_name
    String ; service_input_params
    nunet.fake-news-score-service.json.reqMessage))

;; Define nunet.fake-news-score-service.json.reqMessage access functions

;; Define nunet.fake-news-score-service.json.reqMessage.proto_defnition
(: nunet.fake-news-score-service.json.reqMessage.proto_defnition (-> nunet.fake-news-score-service.json.reqMessage String))
(= (nunet.fake-news-score-service.json.reqMessage.proto_defnition
    (nunet.fake-news-score-service.json.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $proto_defnition)

;; Define nunet.fake-news-score-service.json.reqMessage.service_stub
(: nunet.fake-news-score-service.json.reqMessage.service_stub (-> nunet.fake-news-score-service.json.reqMessage String))
(= (nunet.fake-news-score-service.json.reqMessage.service_stub
    (nunet.fake-news-score-service.json.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_stub)

;; Define nunet.fake-news-score-service.json.reqMessage.service_input
(: nunet.fake-news-score-service.json.reqMessage.service_input (-> nunet.fake-news-score-service.json.reqMessage String))
(= (nunet.fake-news-score-service.json.reqMessage.service_input
    (nunet.fake-news-score-service.json.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input)

;; Define nunet.fake-news-score-service.json.reqMessage.function_name
(: nunet.fake-news-score-service.json.reqMessage.function_name (-> nunet.fake-news-score-service.json.reqMessage String))
(= (nunet.fake-news-score-service.json.reqMessage.function_name
    (nunet.fake-news-score-service.json.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $function_name)

;; Define nunet.fake-news-score-service.json.reqMessage.service_input_params
(: nunet.fake-news-score-service.json.reqMessage.service_input_params (-> nunet.fake-news-score-service.json.reqMessage String))
(= (nunet.fake-news-score-service.json.reqMessage.service_input_params
    (nunet.fake-news-score-service.json.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;
;; protoParams ;;
;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.protoParams type
(: nunet.fake-news-score-service.json.protoParams Type)

;; Define nunet.fake-news-score-service.json.protoParams constuctor
(: nunet.fake-news-score-service.json.MkprotoParams
   (->
    nunet.fake-news-score-service.json.protoParams))

;; Define nunet.fake-news-score-service.json.protoParams access functions

;;;;;;;;;;;;;;;;;;
;; respMetadata ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.respMetadata type
(: nunet.fake-news-score-service.json.respMetadata Type)

;; Define nunet.fake-news-score-service.json.respMetadata constuctor
(: nunet.fake-news-score-service.json.MkrespMetadata
   (->
    String ; service_definition
    nunet.fake-news-score-service.json.respMetadata))

;; Define nunet.fake-news-score-service.json.respMetadata access functions

;; Define nunet.fake-news-score-service.json.respMetadata.service_definition
(: nunet.fake-news-score-service.json.respMetadata.service_definition (-> nunet.fake-news-score-service.json.respMetadata String))
(= (nunet.fake-news-score-service.json.respMetadata.service_definition
    (nunet.fake-news-score-service.json.MkrespMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;
;; metaParams ;;
;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.metaParams type
(: nunet.fake-news-score-service.json.metaParams Type)

;; Define nunet.fake-news-score-service.json.metaParams constuctor
(: nunet.fake-news-score-service.json.MkmetaParams
   (->
    String ; service_name
    nunet.fake-news-score-service.json.metaParams))

;; Define nunet.fake-news-score-service.json.metaParams access functions

;; Define nunet.fake-news-score-service.json.metaParams.service_name
(: nunet.fake-news-score-service.json.metaParams.service_name (-> nunet.fake-news-score-service.json.metaParams String))
(= (nunet.fake-news-score-service.json.metaParams.service_name
    (nunet.fake-news-score-service.json.MkmetaParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;
;; priceParamsService ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.priceParamsService type
(: nunet.fake-news-score-service.json.priceParamsService Type)

;; Define nunet.fake-news-score-service.json.priceParamsService constuctor
(: nunet.fake-news-score-service.json.MkpriceParamsService
   (->
    nunet.fake-news-score-service.json.priceParamsService))

;; Define nunet.fake-news-score-service.json.priceParamsService access functions

;;;;;;;;;;;;;;;;;;;;;;
;; priceRespService ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.priceRespService type
(: nunet.fake-news-score-service.json.priceRespService Type)

;; Define nunet.fake-news-score-service.json.priceRespService constuctor
(: nunet.fake-news-score-service.json.MkpriceRespService
   (->
    Float ; cost_per_process
    String ; pubk
    nunet.fake-news-score-service.json.priceRespService))

;; Define nunet.fake-news-score-service.json.priceRespService access functions

;; Define nunet.fake-news-score-service.json.priceRespService.cost_per_process
(: nunet.fake-news-score-service.json.priceRespService.cost_per_process (-> nunet.fake-news-score-service.json.priceRespService Float))
(= (nunet.fake-news-score-service.json.priceRespService.cost_per_process
    (nunet.fake-news-score-service.json.MkpriceRespService
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.fake-news-score-service.json.priceRespService.pubk
(: nunet.fake-news-score-service.json.priceRespService.pubk (-> nunet.fake-news-score-service.json.priceRespService String))
(= (nunet.fake-news-score-service.json.priceRespService.pubk
    (nunet.fake-news-score-service.json.MkpriceRespService
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; ProtoDefnition ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.json.req_msg service method
(: nunet.fake-news-score-service.json.req_msg (-> nunet.fake-news-score-service.json.protoParams nunet.fake-news-score-service.json.reqMessage))

;; Define nunet.fake-news-score-service.json.req_metadata service method
(: nunet.fake-news-score-service.json.req_metadata (-> nunet.fake-news-score-service.json.metaParams nunet.fake-news-score-service.json.respMetadata))

;; Define nunet.fake-news-score-service.json.req_service_price service method
(: nunet.fake-news-score-service.json.req_service_price (-> nunet.fake-news-score-service.json.priceParamsService nunet.fake-news-score-service.json.priceRespService))



;; ServiceID definition of nunet.fake-news-score-service"
(: nunet.fake-news-score-service (ServiceID nunet))

;; Service metadata of nunet.fake-news-score-service
(= (service nunet.fake-news-score-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Fake News Score Service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmasYx3Qt3Z4webpfZfRKLqoXfdwftECS5bPjvkQ9CGmRs"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://gitlab.com/nunet/fake-news-detection/fake_news_score/-/tree/53-publish-the-service-to-nunet-org/"
           ; url content
           null
           ; description
           "<div>News score is an AI service that orchestrates all other services constituting to fake news warning application. It implements an ensemble function which combines weighted results of other services and outputs the general probability estimation (in %) that an article contains fake news. News score is extendable and can include other services (provided by community or third party developers) into an ensemble if they contribute to higher quality of the application.</div>"
           ; short_description
           "This service uses uclnlp service and binary classification service to output fake news score.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "stance detection" (Cons "fake" (Cons "warning" (Cons "news" (Cons "fake news" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: fake_news_score.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.fake-news-score-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; InputFNS ;;
;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.InputFNS type
(: nunet.fake-news-score-service.InputFNS Type)

;; Define nunet.fake-news-score-service.InputFNS constuctor
(: nunet.fake-news-score-service.MkInputFNS
   (->
    String ; headline
    String ; body
    String ; call_id
    nunet.fake-news-score-service.InputFNS))

;; Define nunet.fake-news-score-service.InputFNS access functions

;; Define nunet.fake-news-score-service.InputFNS.headline
(: nunet.fake-news-score-service.InputFNS.headline (-> nunet.fake-news-score-service.InputFNS String))
(= (nunet.fake-news-score-service.InputFNS.headline
    (nunet.fake-news-score-service.MkInputFNS
     $headline
     $body
     $call_id)) $headline)

;; Define nunet.fake-news-score-service.InputFNS.body
(: nunet.fake-news-score-service.InputFNS.body (-> nunet.fake-news-score-service.InputFNS String))
(= (nunet.fake-news-score-service.InputFNS.body
    (nunet.fake-news-score-service.MkInputFNS
     $headline
     $body
     $call_id)) $body)

;; Define nunet.fake-news-score-service.InputFNS.call_id
(: nunet.fake-news-score-service.InputFNS.call_id (-> nunet.fake-news-score-service.InputFNS String))
(= (nunet.fake-news-score-service.InputFNS.call_id
    (nunet.fake-news-score-service.MkInputFNS
     $headline
     $body
     $call_id)) $call_id)

;;;;;;;;;;;
;; Score ;;
;;;;;;;;;;;

;; Define nunet.fake-news-score-service.Score type
(: nunet.fake-news-score-service.Score Type)

;; Define nunet.fake-news-score-service.Score constuctor
(: nunet.fake-news-score-service.MkScore
   (->
    String ; stance
    Double ; agree
    Double ; disagree
    Double ; discuss
    Double ; unrelated
    nunet.fake-news-score-service.Score))

;; Define nunet.fake-news-score-service.Score access functions

;; Define nunet.fake-news-score-service.Score.stance
(: nunet.fake-news-score-service.Score.stance (-> nunet.fake-news-score-service.Score String))
(= (nunet.fake-news-score-service.Score.stance
    (nunet.fake-news-score-service.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $stance)

;; Define nunet.fake-news-score-service.Score.agree
(: nunet.fake-news-score-service.Score.agree (-> nunet.fake-news-score-service.Score Double))
(= (nunet.fake-news-score-service.Score.agree
    (nunet.fake-news-score-service.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $agree)

;; Define nunet.fake-news-score-service.Score.disagree
(: nunet.fake-news-score-service.Score.disagree (-> nunet.fake-news-score-service.Score Double))
(= (nunet.fake-news-score-service.Score.disagree
    (nunet.fake-news-score-service.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $disagree)

;; Define nunet.fake-news-score-service.Score.discuss
(: nunet.fake-news-score-service.Score.discuss (-> nunet.fake-news-score-service.Score Double))
(= (nunet.fake-news-score-service.Score.discuss
    (nunet.fake-news-score-service.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $discuss)

;; Define nunet.fake-news-score-service.Score.unrelated
(: nunet.fake-news-score-service.Score.unrelated (-> nunet.fake-news-score-service.Score Double))
(= (nunet.fake-news-score-service.Score.unrelated
    (nunet.fake-news-score-service.MkScore
     $stance
     $agree
     $disagree
     $discuss
     $unrelated)) $unrelated)

;;;;;;;;;;
;; Resp ;;
;;;;;;;;;;

;; Define nunet.fake-news-score-service.Resp type
(: nunet.fake-news-score-service.Resp Type)

;; Define nunet.fake-news-score-service.Resp constuctor
(: nunet.fake-news-score-service.MkResp
   (->
    String ; response
    nunet.fake-news-score-service.Resp))

;; Define nunet.fake-news-score-service.Resp access functions

;; Define nunet.fake-news-score-service.Resp.response
(: nunet.fake-news-score-service.Resp.response (-> nunet.fake-news-score-service.Resp String))
(= (nunet.fake-news-score-service.Resp.response
    (nunet.fake-news-score-service.MkResp
     $response)) $response)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; FakeNewsScore ;;
;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.fn_score_calc service method
(: nunet.fake-news-score-service.fn_score_calc (-> nunet.fake-news-score-service.InputFNS nunet.fake-news-score-service.Resp))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: nunet_adapter.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.fake-news-score-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefnition ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.ServiceDefnition type
(: nunet.fake-news-score-service.ServiceDefnition Type)

;; Define nunet.fake-news-score-service.ServiceDefnition constuctor
(: nunet.fake-news-score-service.MkServiceDefnition
   (->
    String ; service_name
    String ; params
    nunet.fake-news-score-service.ServiceDefnition))

;; Define nunet.fake-news-score-service.ServiceDefnition access functions

;; Define nunet.fake-news-score-service.ServiceDefnition.service_name
(: nunet.fake-news-score-service.ServiceDefnition.service_name (-> nunet.fake-news-score-service.ServiceDefnition String))
(= (nunet.fake-news-score-service.ServiceDefnition.service_name
    (nunet.fake-news-score-service.MkServiceDefnition
     $service_name
     $params)) $service_name)

;; Define nunet.fake-news-score-service.ServiceDefnition.params
(: nunet.fake-news-score-service.ServiceDefnition.params (-> nunet.fake-news-score-service.ServiceDefnition String))
(= (nunet.fake-news-score-service.ServiceDefnition.params
    (nunet.fake-news-score-service.MkServiceDefnition
     $service_name
     $params)) $params)

;;;;;;;;;;;;;;;;;;;;;
;; ServiceResponse ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.ServiceResponse type
(: nunet.fake-news-score-service.ServiceResponse Type)

;; Define nunet.fake-news-score-service.ServiceResponse constuctor
(: nunet.fake-news-score-service.MkServiceResponse
   (->
    String ; service_response
    nunet.fake-news-score-service.ServiceResponse))

;; Define nunet.fake-news-score-service.ServiceResponse access functions

;; Define nunet.fake-news-score-service.ServiceResponse.service_response
(: nunet.fake-news-score-service.ServiceResponse.service_response (-> nunet.fake-news-score-service.ServiceResponse String))
(= (nunet.fake-news-score-service.ServiceResponse.service_response
    (nunet.fake-news-score-service.MkServiceResponse
     $service_response)) $service_response)

;;;;;;;;;;;;;;;;;;;;
;; TelemetryInput ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.TelemetryInput type
(: nunet.fake-news-score-service.TelemetryInput Type)

;; Define nunet.fake-news-score-service.TelemetryInput constuctor
(: nunet.fake-news-score-service.MkTelemetryInput
   (->
    String ; result
    Float ; cpu_used
    Float ; memory_used
    Float ; net_used
    Float ; time_taken
    String ; device_name
    String ; call_id
    String ; service_name
    nunet.fake-news-score-service.TelemetryInput))

;; Define nunet.fake-news-score-service.TelemetryInput access functions

;; Define nunet.fake-news-score-service.TelemetryInput.result
(: nunet.fake-news-score-service.TelemetryInput.result (-> nunet.fake-news-score-service.TelemetryInput String))
(= (nunet.fake-news-score-service.TelemetryInput.result
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $result)

;; Define nunet.fake-news-score-service.TelemetryInput.cpu_used
(: nunet.fake-news-score-service.TelemetryInput.cpu_used (-> nunet.fake-news-score-service.TelemetryInput Float))
(= (nunet.fake-news-score-service.TelemetryInput.cpu_used
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $cpu_used)

;; Define nunet.fake-news-score-service.TelemetryInput.memory_used
(: nunet.fake-news-score-service.TelemetryInput.memory_used (-> nunet.fake-news-score-service.TelemetryInput Float))
(= (nunet.fake-news-score-service.TelemetryInput.memory_used
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $memory_used)

;; Define nunet.fake-news-score-service.TelemetryInput.net_used
(: nunet.fake-news-score-service.TelemetryInput.net_used (-> nunet.fake-news-score-service.TelemetryInput Float))
(= (nunet.fake-news-score-service.TelemetryInput.net_used
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $net_used)

;; Define nunet.fake-news-score-service.TelemetryInput.time_taken
(: nunet.fake-news-score-service.TelemetryInput.time_taken (-> nunet.fake-news-score-service.TelemetryInput Float))
(= (nunet.fake-news-score-service.TelemetryInput.time_taken
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $time_taken)

;; Define nunet.fake-news-score-service.TelemetryInput.device_name
(: nunet.fake-news-score-service.TelemetryInput.device_name (-> nunet.fake-news-score-service.TelemetryInput String))
(= (nunet.fake-news-score-service.TelemetryInput.device_name
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $device_name)

;; Define nunet.fake-news-score-service.TelemetryInput.call_id
(: nunet.fake-news-score-service.TelemetryInput.call_id (-> nunet.fake-news-score-service.TelemetryInput String))
(= (nunet.fake-news-score-service.TelemetryInput.call_id
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $call_id)

;; Define nunet.fake-news-score-service.TelemetryInput.service_name
(: nunet.fake-news-score-service.TelemetryInput.service_name (-> nunet.fake-news-score-service.TelemetryInput String))
(= (nunet.fake-news-score-service.TelemetryInput.service_name
    (nunet.fake-news-score-service.MkTelemetryInput
     $result
     $cpu_used
     $memory_used
     $net_used
     $time_taken
     $device_name
     $call_id
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;
;; TelemetryOutput ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.TelemetryOutput type
(: nunet.fake-news-score-service.TelemetryOutput Type)

;; Define nunet.fake-news-score-service.TelemetryOutput constuctor
(: nunet.fake-news-score-service.MkTelemetryOutput
   (->
    String ; response
    nunet.fake-news-score-service.TelemetryOutput))

;; Define nunet.fake-news-score-service.TelemetryOutput access functions

;; Define nunet.fake-news-score-service.TelemetryOutput.response
(: nunet.fake-news-score-service.TelemetryOutput.response (-> nunet.fake-news-score-service.TelemetryOutput String))
(= (nunet.fake-news-score-service.TelemetryOutput.response
    (nunet.fake-news-score-service.MkTelemetryOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;
;; AdapterInput ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterInput type
(: nunet.fake-news-score-service.AdapterInput Type)

;; Define nunet.fake-news-score-service.AdapterInput constuctor
(: nunet.fake-news-score-service.MkAdapterInput
   (->
    String ; service_name
    String ; params
    String ; declarations
    String ; service_input_params
    nunet.fake-news-score-service.AdapterInput))

;; Define nunet.fake-news-score-service.AdapterInput access functions

;; Define nunet.fake-news-score-service.AdapterInput.service_name
(: nunet.fake-news-score-service.AdapterInput.service_name (-> nunet.fake-news-score-service.AdapterInput String))
(= (nunet.fake-news-score-service.AdapterInput.service_name
    (nunet.fake-news-score-service.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $service_name)

;; Define nunet.fake-news-score-service.AdapterInput.params
(: nunet.fake-news-score-service.AdapterInput.params (-> nunet.fake-news-score-service.AdapterInput String))
(= (nunet.fake-news-score-service.AdapterInput.params
    (nunet.fake-news-score-service.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $params)

;; Define nunet.fake-news-score-service.AdapterInput.declarations
(: nunet.fake-news-score-service.AdapterInput.declarations (-> nunet.fake-news-score-service.AdapterInput String))
(= (nunet.fake-news-score-service.AdapterInput.declarations
    (nunet.fake-news-score-service.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $declarations)

;; Define nunet.fake-news-score-service.AdapterInput.service_input_params
(: nunet.fake-news-score-service.AdapterInput.service_input_params (-> nunet.fake-news-score-service.AdapterInput String))
(= (nunet.fake-news-score-service.AdapterInput.service_input_params
    (nunet.fake-news-score-service.MkAdapterInput
     $service_name
     $params
     $declarations
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;;;
;; AdapterOutput ;;
;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterOutput type
(: nunet.fake-news-score-service.AdapterOutput Type)

;; Define nunet.fake-news-score-service.AdapterOutput constuctor
(: nunet.fake-news-score-service.MkAdapterOutput
   (->
    String ; response
    nunet.fake-news-score-service.AdapterOutput))

;; Define nunet.fake-news-score-service.AdapterOutput access functions

;; Define nunet.fake-news-score-service.AdapterOutput.response
(: nunet.fake-news-score-service.AdapterOutput.response (-> nunet.fake-news-score-service.AdapterOutput String))
(= (nunet.fake-news-score-service.AdapterOutput.response
    (nunet.fake-news-score-service.MkAdapterOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;;;;;;;
;; PaymentParamsInput ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.PaymentParamsInput type
(: nunet.fake-news-score-service.PaymentParamsInput Type)

;; Define nunet.fake-news-score-service.PaymentParamsInput constuctor
(: nunet.fake-news-score-service.MkPaymentParamsInput
   (->
    String ; service_name
    String ; service_address
    nunet.fake-news-score-service.PaymentParamsInput))

;; Define nunet.fake-news-score-service.PaymentParamsInput access functions

;; Define nunet.fake-news-score-service.PaymentParamsInput.service_name
(: nunet.fake-news-score-service.PaymentParamsInput.service_name (-> nunet.fake-news-score-service.PaymentParamsInput String))
(= (nunet.fake-news-score-service.PaymentParamsInput.service_name
    (nunet.fake-news-score-service.MkPaymentParamsInput
     $service_name
     $service_address)) $service_name)

;; Define nunet.fake-news-score-service.PaymentParamsInput.service_address
(: nunet.fake-news-score-service.PaymentParamsInput.service_address (-> nunet.fake-news-score-service.PaymentParamsInput String))
(= (nunet.fake-news-score-service.PaymentParamsInput.service_address
    (nunet.fake-news-score-service.MkPaymentParamsInput
     $service_name
     $service_address)) $service_address)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterGetResultOutput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterGetResultOutput type
(: nunet.fake-news-score-service.AdapterGetResultOutput Type)

;; Define nunet.fake-news-score-service.AdapterGetResultOutput constuctor
(: nunet.fake-news-score-service.MkAdapterGetResultOutput
   (->
    String ; response
    nunet.fake-news-score-service.AdapterGetResultOutput))

;; Define nunet.fake-news-score-service.AdapterGetResultOutput access functions

;; Define nunet.fake-news-score-service.AdapterGetResultOutput.response
(: nunet.fake-news-score-service.AdapterGetResultOutput.response (-> nunet.fake-news-score-service.AdapterGetResultOutput String))
(= (nunet.fake-news-score-service.AdapterGetResultOutput.response
    (nunet.fake-news-score-service.MkAdapterGetResultOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;;;;;
;; AdapterSignedTxn ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterSignedTxn type
(: nunet.fake-news-score-service.AdapterSignedTxn Type)

;; Define nunet.fake-news-score-service.AdapterSignedTxn constuctor
(: nunet.fake-news-score-service.MkAdapterSignedTxn
   (->
    String ; signed_tx
    nunet.fake-news-score-service.AdapterSignedTxn))

;; Define nunet.fake-news-score-service.AdapterSignedTxn access functions

;; Define nunet.fake-news-score-service.AdapterSignedTxn.signed_tx
(: nunet.fake-news-score-service.AdapterSignedTxn.signed_tx (-> nunet.fake-news-score-service.AdapterSignedTxn String))
(= (nunet.fake-news-score-service.AdapterSignedTxn.signed_tx
    (nunet.fake-news-score-service.MkAdapterSignedTxn
     $signed_tx)) $signed_tx)

;;;;;;;;;;;;;;;;;;;;
;; AdapterTxnHash ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterTxnHash type
(: nunet.fake-news-score-service.AdapterTxnHash Type)

;; Define nunet.fake-news-score-service.AdapterTxnHash constuctor
(: nunet.fake-news-score-service.MkAdapterTxnHash
   (->
    String ; txn_hash
    nunet.fake-news-score-service.AdapterTxnHash))

;; Define nunet.fake-news-score-service.AdapterTxnHash access functions

;; Define nunet.fake-news-score-service.AdapterTxnHash.txn_hash
(: nunet.fake-news-score-service.AdapterTxnHash.txn_hash (-> nunet.fake-news-score-service.AdapterTxnHash String))
(= (nunet.fake-news-score-service.AdapterTxnHash.txn_hash
    (nunet.fake-news-score-service.MkAdapterTxnHash
     $txn_hash)) $txn_hash)

;;;;;;;;;;;;;;;;;;;
;; PaymentParams ;;
;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.PaymentParams type
(: nunet.fake-news-score-service.PaymentParams Type)

;; Define nunet.fake-news-score-service.PaymentParams constuctor
(: nunet.fake-news-score-service.MkPaymentParams
   (->
    String ; cost_per_process
    String ; pubk
    String ; call_id
    nunet.fake-news-score-service.PaymentParams))

;; Define nunet.fake-news-score-service.PaymentParams access functions

;; Define nunet.fake-news-score-service.PaymentParams.cost_per_process
(: nunet.fake-news-score-service.PaymentParams.cost_per_process (-> nunet.fake-news-score-service.PaymentParams String))
(= (nunet.fake-news-score-service.PaymentParams.cost_per_process
    (nunet.fake-news-score-service.MkPaymentParams
     $cost_per_process
     $pubk
     $call_id)) $cost_per_process)

;; Define nunet.fake-news-score-service.PaymentParams.pubk
(: nunet.fake-news-score-service.PaymentParams.pubk (-> nunet.fake-news-score-service.PaymentParams String))
(= (nunet.fake-news-score-service.PaymentParams.pubk
    (nunet.fake-news-score-service.MkPaymentParams
     $cost_per_process
     $pubk
     $call_id)) $pubk)

;; Define nunet.fake-news-score-service.PaymentParams.call_id
(: nunet.fake-news-score-service.PaymentParams.call_id (-> nunet.fake-news-score-service.PaymentParams String))
(= (nunet.fake-news-score-service.PaymentParams.call_id
    (nunet.fake-news-score-service.MkPaymentParams
     $cost_per_process
     $pubk
     $call_id)) $call_id)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterSignedResult ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterSignedResult type
(: nunet.fake-news-score-service.AdapterSignedResult Type)

;; Define nunet.fake-news-score-service.AdapterSignedResult constuctor
(: nunet.fake-news-score-service.MkAdapterSignedResult
   (->
    String ; escrow_address
    nunet.fake-news-score-service.AdapterSignedResult))

;; Define nunet.fake-news-score-service.AdapterSignedResult access functions

;; Define nunet.fake-news-score-service.AdapterSignedResult.escrow_address
(: nunet.fake-news-score-service.AdapterSignedResult.escrow_address (-> nunet.fake-news-score-service.AdapterSignedResult String))
(= (nunet.fake-news-score-service.AdapterSignedResult.escrow_address
    (nunet.fake-news-score-service.MkAdapterSignedResult
     $escrow_address)) $escrow_address)

;;;;;;;;;;;;;;;;;
;; priceParams ;;
;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.priceParams type
(: nunet.fake-news-score-service.priceParams Type)

;; Define nunet.fake-news-score-service.priceParams constuctor
(: nunet.fake-news-score-service.MkpriceParams
   (->
    String ; service_address
    nunet.fake-news-score-service.priceParams))

;; Define nunet.fake-news-score-service.priceParams access functions

;; Define nunet.fake-news-score-service.priceParams.service_address
(: nunet.fake-news-score-service.priceParams.service_address (-> nunet.fake-news-score-service.priceParams String))
(= (nunet.fake-news-score-service.priceParams.service_address
    (nunet.fake-news-score-service.MkpriceParams
     $service_address)) $service_address)

;;;;;;;;;;;;;;;
;; priceResp ;;
;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.priceResp type
(: nunet.fake-news-score-service.priceResp Type)

;; Define nunet.fake-news-score-service.priceResp constuctor
(: nunet.fake-news-score-service.MkpriceResp
   (->
    String ; cost_per_process
    String ; pubk
    nunet.fake-news-score-service.priceResp))

;; Define nunet.fake-news-score-service.priceResp access functions

;; Define nunet.fake-news-score-service.priceResp.cost_per_process
(: nunet.fake-news-score-service.priceResp.cost_per_process (-> nunet.fake-news-score-service.priceResp String))
(= (nunet.fake-news-score-service.priceResp.cost_per_process
    (nunet.fake-news-score-service.MkpriceResp
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.fake-news-score-service.priceResp.pubk
(: nunet.fake-news-score-service.priceResp.pubk (-> nunet.fake-news-score-service.priceResp String))
(= (nunet.fake-news-score-service.priceResp.pubk
    (nunet.fake-news-score-service.MkpriceResp
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; respAdapterMetadata ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.respAdapterMetadata type
(: nunet.fake-news-score-service.respAdapterMetadata Type)

;; Define nunet.fake-news-score-service.respAdapterMetadata constuctor
(: nunet.fake-news-score-service.MkrespAdapterMetadata
   (->
    String ; service_definition
    nunet.fake-news-score-service.respAdapterMetadata))

;; Define nunet.fake-news-score-service.respAdapterMetadata access functions

;; Define nunet.fake-news-score-service.respAdapterMetadata.service_definition
(: nunet.fake-news-score-service.respAdapterMetadata.service_definition (-> nunet.fake-news-score-service.respAdapterMetadata String))
(= (nunet.fake-news-score-service.respAdapterMetadata.service_definition
    (nunet.fake-news-score-service.MkrespAdapterMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;;;;;;;;
;; metaAdapterParams ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.metaAdapterParams type
(: nunet.fake-news-score-service.metaAdapterParams Type)

;; Define nunet.fake-news-score-service.metaAdapterParams constuctor
(: nunet.fake-news-score-service.MkmetaAdapterParams
   (->
    String ; service_name
    nunet.fake-news-score-service.metaAdapterParams))

;; Define nunet.fake-news-score-service.metaAdapterParams access functions

;; Define nunet.fake-news-score-service.metaAdapterParams.service_name
(: nunet.fake-news-score-service.metaAdapterParams.service_name (-> nunet.fake-news-score-service.metaAdapterParams String))
(= (nunet.fake-news-score-service.metaAdapterParams.service_name
    (nunet.fake-news-score-service.MkmetaAdapterParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; respServiceMetadata ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.respServiceMetadata type
(: nunet.fake-news-score-service.respServiceMetadata Type)

;; Define nunet.fake-news-score-service.respServiceMetadata constuctor
(: nunet.fake-news-score-service.MkrespServiceMetadata
   (->
    String ; service_definition
    nunet.fake-news-score-service.respServiceMetadata))

;; Define nunet.fake-news-score-service.respServiceMetadata access functions

;; Define nunet.fake-news-score-service.respServiceMetadata.service_definition
(: nunet.fake-news-score-service.respServiceMetadata.service_definition (-> nunet.fake-news-score-service.respServiceMetadata String))
(= (nunet.fake-news-score-service.respServiceMetadata.service_definition
    (nunet.fake-news-score-service.MkrespServiceMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;;;;;;;;
;; metaServiceParams ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.metaServiceParams type
(: nunet.fake-news-score-service.metaServiceParams Type)

;; Define nunet.fake-news-score-service.metaServiceParams constuctor
(: nunet.fake-news-score-service.MkmetaServiceParams
   (->
    String ; service_name
    nunet.fake-news-score-service.metaServiceParams))

;; Define nunet.fake-news-score-service.metaServiceParams access functions

;; Define nunet.fake-news-score-service.metaServiceParams.service_name
(: nunet.fake-news-score-service.metaServiceParams.service_name (-> nunet.fake-news-score-service.metaServiceParams String))
(= (nunet.fake-news-score-service.metaServiceParams.service_name
    (nunet.fake-news-score-service.MkmetaServiceParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefnitionWorkflow ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow type
(: nunet.fake-news-score-service.ServiceDefnitionWorkflow Type)

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow constuctor
(: nunet.fake-news-score-service.MkServiceDefnitionWorkflow
   (->
    String ; service_name
    String ; params
    String ; declarations
    String ; call_id
    String ; service_input_params
    nunet.fake-news-score-service.ServiceDefnitionWorkflow))

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow access functions

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow.service_name
(: nunet.fake-news-score-service.ServiceDefnitionWorkflow.service_name (-> nunet.fake-news-score-service.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.ServiceDefnitionWorkflow.service_name
    (nunet.fake-news-score-service.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $service_name)

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow.params
(: nunet.fake-news-score-service.ServiceDefnitionWorkflow.params (-> nunet.fake-news-score-service.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.ServiceDefnitionWorkflow.params
    (nunet.fake-news-score-service.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $params)

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow.declarations
(: nunet.fake-news-score-service.ServiceDefnitionWorkflow.declarations (-> nunet.fake-news-score-service.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.ServiceDefnitionWorkflow.declarations
    (nunet.fake-news-score-service.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $declarations)

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow.call_id
(: nunet.fake-news-score-service.ServiceDefnitionWorkflow.call_id (-> nunet.fake-news-score-service.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.ServiceDefnitionWorkflow.call_id
    (nunet.fake-news-score-service.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $call_id)

;; Define nunet.fake-news-score-service.ServiceDefnitionWorkflow.service_input_params
(: nunet.fake-news-score-service.ServiceDefnitionWorkflow.service_input_params (-> nunet.fake-news-score-service.ServiceDefnitionWorkflow String))
(= (nunet.fake-news-score-service.ServiceDefnitionWorkflow.service_input_params
    (nunet.fake-news-score-service.MkServiceDefnitionWorkflow
     $service_name
     $params
     $declarations
     $call_id
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterReleaseFunds ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterReleaseFunds type
(: nunet.fake-news-score-service.AdapterReleaseFunds Type)

;; Define nunet.fake-news-score-service.AdapterReleaseFunds constuctor
(: nunet.fake-news-score-service.MkAdapterReleaseFunds
   (->
    String ; escrow_address
    String ; public_key
    String ; agi_amount
    nunet.fake-news-score-service.AdapterReleaseFunds))

;; Define nunet.fake-news-score-service.AdapterReleaseFunds access functions

;; Define nunet.fake-news-score-service.AdapterReleaseFunds.escrow_address
(: nunet.fake-news-score-service.AdapterReleaseFunds.escrow_address (-> nunet.fake-news-score-service.AdapterReleaseFunds String))
(= (nunet.fake-news-score-service.AdapterReleaseFunds.escrow_address
    (nunet.fake-news-score-service.MkAdapterReleaseFunds
     $escrow_address
     $public_key
     $agi_amount)) $escrow_address)

;; Define nunet.fake-news-score-service.AdapterReleaseFunds.public_key
(: nunet.fake-news-score-service.AdapterReleaseFunds.public_key (-> nunet.fake-news-score-service.AdapterReleaseFunds String))
(= (nunet.fake-news-score-service.AdapterReleaseFunds.public_key
    (nunet.fake-news-score-service.MkAdapterReleaseFunds
     $escrow_address
     $public_key
     $agi_amount)) $public_key)

;; Define nunet.fake-news-score-service.AdapterReleaseFunds.agi_amount
(: nunet.fake-news-score-service.AdapterReleaseFunds.agi_amount (-> nunet.fake-news-score-service.AdapterReleaseFunds String))
(= (nunet.fake-news-score-service.AdapterReleaseFunds.agi_amount
    (nunet.fake-news-score-service.MkAdapterReleaseFunds
     $escrow_address
     $public_key
     $agi_amount)) $agi_amount)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterReleaseFundsOutput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterReleaseFundsOutput type
(: nunet.fake-news-score-service.AdapterReleaseFundsOutput Type)

;; Define nunet.fake-news-score-service.AdapterReleaseFundsOutput constuctor
(: nunet.fake-news-score-service.MkAdapterReleaseFundsOutput
   (->
    String ; response
    nunet.fake-news-score-service.AdapterReleaseFundsOutput))

;; Define nunet.fake-news-score-service.AdapterReleaseFundsOutput access functions

;; Define nunet.fake-news-score-service.AdapterReleaseFundsOutput.response
(: nunet.fake-news-score-service.AdapterReleaseFundsOutput.response (-> nunet.fake-news-score-service.AdapterReleaseFundsOutput String))
(= (nunet.fake-news-score-service.AdapterReleaseFundsOutput.response
    (nunet.fake-news-score-service.MkAdapterReleaseFundsOutput
     $response)) $response)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterMachineProviderInput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterMachineProviderInput type
(: nunet.fake-news-score-service.AdapterMachineProviderInput Type)

;; Define nunet.fake-news-score-service.AdapterMachineProviderInput constuctor
(: nunet.fake-news-score-service.MkAdapterMachineProviderInput
   (->
    String ; service_name
    nunet.fake-news-score-service.AdapterMachineProviderInput))

;; Define nunet.fake-news-score-service.AdapterMachineProviderInput access functions

;; Define nunet.fake-news-score-service.AdapterMachineProviderInput.service_name
(: nunet.fake-news-score-service.AdapterMachineProviderInput.service_name (-> nunet.fake-news-score-service.AdapterMachineProviderInput String))
(= (nunet.fake-news-score-service.AdapterMachineProviderInput.service_name
    (nunet.fake-news-score-service.MkAdapterMachineProviderInput
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AdapterMachineProviderOutput ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.AdapterMachineProviderOutput type
(: nunet.fake-news-score-service.AdapterMachineProviderOutput Type)

;; Define nunet.fake-news-score-service.AdapterMachineProviderOutput constuctor
(: nunet.fake-news-score-service.MkAdapterMachineProviderOutput
   (->
    String ; cost_per_process
    String ; pubk
    nunet.fake-news-score-service.AdapterMachineProviderOutput))

;; Define nunet.fake-news-score-service.AdapterMachineProviderOutput access functions

;; Define nunet.fake-news-score-service.AdapterMachineProviderOutput.cost_per_process
(: nunet.fake-news-score-service.AdapterMachineProviderOutput.cost_per_process (-> nunet.fake-news-score-service.AdapterMachineProviderOutput String))
(= (nunet.fake-news-score-service.AdapterMachineProviderOutput.cost_per_process
    (nunet.fake-news-score-service.MkAdapterMachineProviderOutput
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.fake-news-score-service.AdapterMachineProviderOutput.pubk
(: nunet.fake-news-score-service.AdapterMachineProviderOutput.pubk (-> nunet.fake-news-score-service.AdapterMachineProviderOutput String))
(= (nunet.fake-news-score-service.AdapterMachineProviderOutput.pubk
    (nunet.fake-news-score-service.MkAdapterMachineProviderOutput
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; NunetAdapter ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.reqService service method
(: nunet.fake-news-score-service.reqService (-> nunet.fake-news-score-service.ServiceDefnition nunet.fake-news-score-service.ServiceResponse))

;; Define nunet.fake-news-score-service.telemetry service method
(: nunet.fake-news-score-service.telemetry (-> nunet.fake-news-score-service.TelemetryInput nunet.fake-news-score-service.TelemetryOutput))

;; Define nunet.fake-news-score-service.callAdapter service method
(: nunet.fake-news-score-service.callAdapter (-> nunet.fake-news-score-service.AdapterInput nunet.fake-news-score-service.AdapterOutput))

;; Define nunet.fake-news-score-service.signAdapterTransaction service method
(: nunet.fake-news-score-service.signAdapterTransaction (-> nunet.fake-news-score-service.PaymentParams nunet.fake-news-score-service.AdapterSignedResult))

;; Define nunet.fake-news-score-service.getAdapterResult service method
(: nunet.fake-news-score-service.getAdapterResult (-> nunet.fake-news-score-service.AdapterTxnHash nunet.fake-news-score-service.AdapterGetResultOutput))

;; Define nunet.fake-news-score-service.makeAdapterTransaction service method
(: nunet.fake-news-score-service.makeAdapterTransaction (-> nunet.fake-news-score-service.AdapterReleaseFunds nunet.fake-news-score-service.AdapterReleaseFundsOutput))

;; Define nunet.fake-news-score-service.getPaymentParams service method
(: nunet.fake-news-score-service.getPaymentParams (-> nunet.fake-news-score-service.PaymentParamsInput nunet.fake-news-score-service.PaymentParams))

;; Define nunet.fake-news-score-service.reqPrice service method
(: nunet.fake-news-score-service.reqPrice (-> nunet.fake-news-score-service.priceParams nunet.fake-news-score-service.priceResp))

;; Define nunet.fake-news-score-service.reqAdapterMetadata service method
(: nunet.fake-news-score-service.reqAdapterMetadata (-> nunet.fake-news-score-service.metaAdapterParams nunet.fake-news-score-service.respAdapterMetadata))

;; Define nunet.fake-news-score-service.reqServiceMetadata service method
(: nunet.fake-news-score-service.reqServiceMetadata (-> nunet.fake-news-score-service.metaServiceParams nunet.fake-news-score-service.respServiceMetadata))

;; Define nunet.fake-news-score-service.reqServiceWorkflow service method
(: nunet.fake-news-score-service.reqServiceWorkflow (-> nunet.fake-news-score-service.ServiceDefnitionWorkflow nunet.fake-news-score-service.ServiceResponse))

;; Define nunet.fake-news-score-service.getProviderPaymentParams service method
(: nunet.fake-news-score-service.getProviderPaymentParams (-> nunet.fake-news-score-service.AdapterMachineProviderInput nunet.fake-news-score-service.AdapterMachineProviderOutput))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service_proto.proto
;; Protobuf syntax: proto3
;; Prefix: nunet.fake-news-score-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; reqMessage ;;
;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.reqMessage type
(: nunet.fake-news-score-service.reqMessage Type)

;; Define nunet.fake-news-score-service.reqMessage constuctor
(: nunet.fake-news-score-service.MkreqMessage
   (->
    String ; proto_defnition
    String ; service_stub
    String ; service_input
    String ; function_name
    String ; service_input_params
    nunet.fake-news-score-service.reqMessage))

;; Define nunet.fake-news-score-service.reqMessage access functions

;; Define nunet.fake-news-score-service.reqMessage.proto_defnition
(: nunet.fake-news-score-service.reqMessage.proto_defnition (-> nunet.fake-news-score-service.reqMessage String))
(= (nunet.fake-news-score-service.reqMessage.proto_defnition
    (nunet.fake-news-score-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $proto_defnition)

;; Define nunet.fake-news-score-service.reqMessage.service_stub
(: nunet.fake-news-score-service.reqMessage.service_stub (-> nunet.fake-news-score-service.reqMessage String))
(= (nunet.fake-news-score-service.reqMessage.service_stub
    (nunet.fake-news-score-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_stub)

;; Define nunet.fake-news-score-service.reqMessage.service_input
(: nunet.fake-news-score-service.reqMessage.service_input (-> nunet.fake-news-score-service.reqMessage String))
(= (nunet.fake-news-score-service.reqMessage.service_input
    (nunet.fake-news-score-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input)

;; Define nunet.fake-news-score-service.reqMessage.function_name
(: nunet.fake-news-score-service.reqMessage.function_name (-> nunet.fake-news-score-service.reqMessage String))
(= (nunet.fake-news-score-service.reqMessage.function_name
    (nunet.fake-news-score-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $function_name)

;; Define nunet.fake-news-score-service.reqMessage.service_input_params
(: nunet.fake-news-score-service.reqMessage.service_input_params (-> nunet.fake-news-score-service.reqMessage String))
(= (nunet.fake-news-score-service.reqMessage.service_input_params
    (nunet.fake-news-score-service.MkreqMessage
     $proto_defnition
     $service_stub
     $service_input
     $function_name
     $service_input_params)) $service_input_params)

;;;;;;;;;;;;;;;;;
;; protoParams ;;
;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.protoParams type
(: nunet.fake-news-score-service.protoParams Type)

;; Define nunet.fake-news-score-service.protoParams constuctor
(: nunet.fake-news-score-service.MkprotoParams
   (->
    nunet.fake-news-score-service.protoParams))

;; Define nunet.fake-news-score-service.protoParams access functions

;;;;;;;;;;;;;;;;;;
;; respMetadata ;;
;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.respMetadata type
(: nunet.fake-news-score-service.respMetadata Type)

;; Define nunet.fake-news-score-service.respMetadata constuctor
(: nunet.fake-news-score-service.MkrespMetadata
   (->
    String ; service_definition
    nunet.fake-news-score-service.respMetadata))

;; Define nunet.fake-news-score-service.respMetadata access functions

;; Define nunet.fake-news-score-service.respMetadata.service_definition
(: nunet.fake-news-score-service.respMetadata.service_definition (-> nunet.fake-news-score-service.respMetadata String))
(= (nunet.fake-news-score-service.respMetadata.service_definition
    (nunet.fake-news-score-service.MkrespMetadata
     $service_definition)) $service_definition)

;;;;;;;;;;;;;;;;
;; metaParams ;;
;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.metaParams type
(: nunet.fake-news-score-service.metaParams Type)

;; Define nunet.fake-news-score-service.metaParams constuctor
(: nunet.fake-news-score-service.MkmetaParams
   (->
    String ; service_name
    nunet.fake-news-score-service.metaParams))

;; Define nunet.fake-news-score-service.metaParams access functions

;; Define nunet.fake-news-score-service.metaParams.service_name
(: nunet.fake-news-score-service.metaParams.service_name (-> nunet.fake-news-score-service.metaParams String))
(= (nunet.fake-news-score-service.metaParams.service_name
    (nunet.fake-news-score-service.MkmetaParams
     $service_name)) $service_name)

;;;;;;;;;;;;;;;;;;;;;;;;
;; priceParamsService ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.priceParamsService type
(: nunet.fake-news-score-service.priceParamsService Type)

;; Define nunet.fake-news-score-service.priceParamsService constuctor
(: nunet.fake-news-score-service.MkpriceParamsService
   (->
    nunet.fake-news-score-service.priceParamsService))

;; Define nunet.fake-news-score-service.priceParamsService access functions

;;;;;;;;;;;;;;;;;;;;;;
;; priceRespService ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.priceRespService type
(: nunet.fake-news-score-service.priceRespService Type)

;; Define nunet.fake-news-score-service.priceRespService constuctor
(: nunet.fake-news-score-service.MkpriceRespService
   (->
    Float ; cost_per_process
    String ; pubk
    nunet.fake-news-score-service.priceRespService))

;; Define nunet.fake-news-score-service.priceRespService access functions

;; Define nunet.fake-news-score-service.priceRespService.cost_per_process
(: nunet.fake-news-score-service.priceRespService.cost_per_process (-> nunet.fake-news-score-service.priceRespService Float))
(= (nunet.fake-news-score-service.priceRespService.cost_per_process
    (nunet.fake-news-score-service.MkpriceRespService
     $cost_per_process
     $pubk)) $cost_per_process)

;; Define nunet.fake-news-score-service.priceRespService.pubk
(: nunet.fake-news-score-service.priceRespService.pubk (-> nunet.fake-news-score-service.priceRespService String))
(= (nunet.fake-news-score-service.priceRespService.pubk
    (nunet.fake-news-score-service.MkpriceRespService
     $cost_per_process
     $pubk)) $pubk)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; ProtoDefnition ;;
;;;;;;;;;;;;;;;;;;;;

;; Define nunet.fake-news-score-service.req_msg service method
(: nunet.fake-news-score-service.req_msg (-> nunet.fake-news-score-service.protoParams nunet.fake-news-score-service.reqMessage))

;; Define nunet.fake-news-score-service.req_metadata service method
(: nunet.fake-news-score-service.req_metadata (-> nunet.fake-news-score-service.metaParams nunet.fake-news-score-service.respMetadata))

;; Define nunet.fake-news-score-service.req_service_price service method
(: nunet.fake-news-score-service.req_service_price (-> nunet.fake-news-score-service.priceParamsService nunet.fake-news-score-service.priceRespService))




;; OrganizationID definition of 719954157c5e430b81e656f6f47af65b
(: 719954157c5e430b81e656f6f47af65b OrganizationID)

;; Organization metadata of 719954157c5e430b81e656f6f47af65b
(= (organization 719954157c5e430b81e656f6f47af65b)
   ; Organization
   (MkOrganization
       ; org_name
       "22feb2022_1"
       ; org_id
       "719954157c5e430b81e656f6f47af65b"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           "https://google.com"
           ; url content
           null
           ; description
           "hello "
           ; short_description
           "hello")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of 719954157c5e430b81e656f6f47af65b



;; OrganizationID definition of zero2ai
(: zero2ai OrganizationID)

;; Organization metadata of zero2ai
(= (organization zero2ai)
   ; Organization
   (MkOrganization
       ; org_name
       "Zero2AI"
       ; org_id
       "zero2ai"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "www.zero2ai.io"
           ; url content
           null
           ; description
           "\nWe at Zero2AI help Gig workers meet the surging demand for AI talent using Web3.\nCombining the simplicity and ubiquitous smartphone, the power and abundance of open-source AI,\nand the trust and economic mechanisms of public chains - the Zero2AI network is the future of AI work. Learn, consume, create, publish and own on our network."
           ; short_description
           "Find create and own your AI apps.")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of zero2ai


;; ServiceID definition of zero2ai.z2ai_text_gen"
(: zero2ai.z2ai_text_gen (ServiceID zero2ai))

;; Service metadata of zero2ai.z2ai_text_gen
(= (service zero2ai.z2ai_text_gen)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "z2ai_text_gen"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeU8kbaG4hfvUPGsaUKBRwCHJRkC1xYNoKg2AN7PV45Bb"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: text_gen
;; Prefix: zero2ai.z2ai_text_gen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.z2ai_text_gen.Input type
(: zero2ai.z2ai_text_gen.Input Type)

;; Define zero2ai.z2ai_text_gen.Input constuctor
(: zero2ai.z2ai_text_gen.MkInput
   (->
    String ; Input_Text
    zero2ai.z2ai_text_gen.Input))

;; Define zero2ai.z2ai_text_gen.Input access functions

;; Define zero2ai.z2ai_text_gen.Input.Input_Text
(: zero2ai.z2ai_text_gen.Input.Input_Text (-> zero2ai.z2ai_text_gen.Input String))
(= (zero2ai.z2ai_text_gen.Input.Input_Text
    (zero2ai.z2ai_text_gen.MkInput
     $Input_Text)) $Input_Text)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.z2ai_text_gen.Output type
(: zero2ai.z2ai_text_gen.Output Type)

;; Define zero2ai.z2ai_text_gen.Output constuctor
(: zero2ai.z2ai_text_gen.MkOutput
   (->
    String ; Generated_Text
    zero2ai.z2ai_text_gen.Output))

;; Define zero2ai.z2ai_text_gen.Output access functions

;; Define zero2ai.z2ai_text_gen.Output.Generated_Text
(: zero2ai.z2ai_text_gen.Output.Generated_Text (-> zero2ai.z2ai_text_gen.Output String))
(= (zero2ai.z2ai_text_gen.Output.Generated_Text
    (zero2ai.z2ai_text_gen.MkOutput
     $Generated_Text)) $Generated_Text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; generate_text ;;
;;;;;;;;;;;;;;;;;;;

;; Define zero2ai.z2ai_text_gen.generate_text service method
(: zero2ai.z2ai_text_gen.generate_text (-> zero2ai.z2ai_text_gen.Input zero2ai.z2ai_text_gen.Output))



;; ServiceID definition of zero2ai.z2ai_text_gen_v2"
(: zero2ai.z2ai_text_gen_v2 (ServiceID zero2ai))

;; Service metadata of zero2ai.z2ai_text_gen_v2
(= (service zero2ai.z2ai_text_gen_v2)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "z2ai_text_gen_v2"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmPzwBTXjnPFK5iCYhGVvhUxW7BLcCkgYtoV9n1MqdrAgB"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: text_gen
;; Prefix: zero2ai.z2ai_text_gen_v2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.z2ai_text_gen_v2.Input type
(: zero2ai.z2ai_text_gen_v2.Input Type)

;; Define zero2ai.z2ai_text_gen_v2.Input constuctor
(: zero2ai.z2ai_text_gen_v2.MkInput
   (->
    String ; Input_Text
    zero2ai.z2ai_text_gen_v2.Input))

;; Define zero2ai.z2ai_text_gen_v2.Input access functions

;; Define zero2ai.z2ai_text_gen_v2.Input.Input_Text
(: zero2ai.z2ai_text_gen_v2.Input.Input_Text (-> zero2ai.z2ai_text_gen_v2.Input String))
(= (zero2ai.z2ai_text_gen_v2.Input.Input_Text
    (zero2ai.z2ai_text_gen_v2.MkInput
     $Input_Text)) $Input_Text)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.z2ai_text_gen_v2.Output type
(: zero2ai.z2ai_text_gen_v2.Output Type)

;; Define zero2ai.z2ai_text_gen_v2.Output constuctor
(: zero2ai.z2ai_text_gen_v2.MkOutput
   (->
    String ; Generated_Text
    zero2ai.z2ai_text_gen_v2.Output))

;; Define zero2ai.z2ai_text_gen_v2.Output access functions

;; Define zero2ai.z2ai_text_gen_v2.Output.Generated_Text
(: zero2ai.z2ai_text_gen_v2.Output.Generated_Text (-> zero2ai.z2ai_text_gen_v2.Output String))
(= (zero2ai.z2ai_text_gen_v2.Output.Generated_Text
    (zero2ai.z2ai_text_gen_v2.MkOutput
     $Generated_Text)) $Generated_Text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; generate_text ;;
;;;;;;;;;;;;;;;;;;;

;; Define zero2ai.z2ai_text_gen_v2.generate_text service method
(: zero2ai.z2ai_text_gen_v2.generate_text (-> zero2ai.z2ai_text_gen_v2.Input zero2ai.z2ai_text_gen_v2.Output))



;; ServiceID definition of zero2ai.z2ai_sentiment_analaysis"
(: zero2ai.z2ai_sentiment_analaysis (ServiceID zero2ai))

;; Service metadata of zero2ai.z2ai_sentiment_analaysis
(= (service zero2ai.z2ai_sentiment_analaysis)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "z2ai_sentiment_analaysis"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmdvM4H1J6mcs2unVLnfLBR4r7rB4GHZtGx61NYZRPZoFX"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: z2ai_sentiment_analysis
;; Prefix: zero2ai.z2ai_sentiment_analaysis
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.z2ai_sentiment_analaysis.Input type
(: zero2ai.z2ai_sentiment_analaysis.Input Type)

;; Define zero2ai.z2ai_sentiment_analaysis.Input constuctor
(: zero2ai.z2ai_sentiment_analaysis.MkInput
   (->
    String ; text_input
    zero2ai.z2ai_sentiment_analaysis.Input))

;; Define zero2ai.z2ai_sentiment_analaysis.Input access functions

;; Define zero2ai.z2ai_sentiment_analaysis.Input.text_input
(: zero2ai.z2ai_sentiment_analaysis.Input.text_input (-> zero2ai.z2ai_sentiment_analaysis.Input String))
(= (zero2ai.z2ai_sentiment_analaysis.Input.text_input
    (zero2ai.z2ai_sentiment_analaysis.MkInput
     $text_input)) $text_input)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.z2ai_sentiment_analaysis.Output type
(: zero2ai.z2ai_sentiment_analaysis.Output Type)

;; Define zero2ai.z2ai_sentiment_analaysis.Output constuctor
(: zero2ai.z2ai_sentiment_analaysis.MkOutput
   (->
    String ; output
    zero2ai.z2ai_sentiment_analaysis.Output))

;; Define zero2ai.z2ai_sentiment_analaysis.Output access functions

;; Define zero2ai.z2ai_sentiment_analaysis.Output.output
(: zero2ai.z2ai_sentiment_analaysis.Output.output (-> zero2ai.z2ai_sentiment_analaysis.Output String))
(= (zero2ai.z2ai_sentiment_analaysis.Output.output
    (zero2ai.z2ai_sentiment_analaysis.MkOutput
     $output)) $output)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; predict ;;
;;;;;;;;;;;;;

;; Define zero2ai.z2ai_sentiment_analaysis.predict service method
(: zero2ai.z2ai_sentiment_analaysis.predict (-> zero2ai.z2ai_sentiment_analaysis.Input zero2ai.z2ai_sentiment_analaysis.Output))



;; ServiceID definition of zero2ai.zgptj"
(: zero2ai.zgptj (ServiceID zero2ai))

;; Service metadata of zero2ai.zgptj
(= (service zero2ai.zgptj)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "zgptj"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmd3PVzfJ9XPJXE5uCxoL4qVu6yhsBkHjvVXaVK8kcsuEf"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: zgptj
;; Prefix: zero2ai.zgptj
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.zgptj.Input type
(: zero2ai.zgptj.Input Type)

;; Define zero2ai.zgptj.Input constuctor
(: zero2ai.zgptj.MkInput
   (->
    String ; Prompt
    Int32 ; Length___the_length_for_generation_text
    Int32 ; Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words
    zero2ai.zgptj.Input))

;; Define zero2ai.zgptj.Input access functions

;; Define zero2ai.zgptj.Input.Prompt
(: zero2ai.zgptj.Input.Prompt (-> zero2ai.zgptj.Input String))
(= (zero2ai.zgptj.Input.Prompt
    (zero2ai.zgptj.MkInput
     $Prompt
     $Length___the_length_for_generation_text
     $Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words)) $Prompt)

;; Define zero2ai.zgptj.Input.Length___the_length_for_generation_text
(: zero2ai.zgptj.Input.Length___the_length_for_generation_text (-> zero2ai.zgptj.Input Int32))
(= (zero2ai.zgptj.Input.Length___the_length_for_generation_text
    (zero2ai.zgptj.MkInput
     $Prompt
     $Length___the_length_for_generation_text
     $Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words)) $Length___the_length_for_generation_text)

;; Define zero2ai.zgptj.Input.Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words
(: zero2ai.zgptj.Input.Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words (-> zero2ai.zgptj.Input Int32))
(= (zero2ai.zgptj.Input.Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words
    (zero2ai.zgptj.MkInput
     $Prompt
     $Length___the_length_for_generation_text
     $Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words)) $Temperature___control_randomness_for_sampling__The_larger_the_temperature__the_more_uniform_the_new_probability_distribution__the_greater_the_randomness__and_the_easier_it_is_to_generate_some_unexpected_words)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.zgptj.Output type
(: zero2ai.zgptj.Output Type)

;; Define zero2ai.zgptj.Output constuctor
(: zero2ai.zgptj.MkOutput
   (->
    String ; Generation
    zero2ai.zgptj.Output))

;; Define zero2ai.zgptj.Output access functions

;; Define zero2ai.zgptj.Output.Generation
(: zero2ai.zgptj.Output.Generation (-> zero2ai.zgptj.Output String))
(= (zero2ai.zgptj.Output.Generation
    (zero2ai.zgptj.MkOutput
     $Generation)) $Generation)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; text_generation ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define zero2ai.zgptj.text_generation service method
(: zero2ai.zgptj.text_generation (-> zero2ai.zgptj.Input zero2ai.zgptj.Output))



;; ServiceID definition of zero2ai.text_sentiment"
(: zero2ai.text_sentiment (ServiceID zero2ai))

;; Service metadata of zero2ai.text_sentiment
(= (service zero2ai.text_sentiment)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "sentiment_analysis"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qma52uNRT4T2AsTihc1LfxuAa3kecJkWzZNpQr2tbwGJdQ"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: text_sentiment
;; Prefix: zero2ai.text_sentiment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.text_sentiment.Input type
(: zero2ai.text_sentiment.Input Type)

;; Define zero2ai.text_sentiment.Input constuctor
(: zero2ai.text_sentiment.MkInput
   (->
    String ; text_input
    zero2ai.text_sentiment.Input))

;; Define zero2ai.text_sentiment.Input access functions

;; Define zero2ai.text_sentiment.Input.text_input
(: zero2ai.text_sentiment.Input.text_input (-> zero2ai.text_sentiment.Input String))
(= (zero2ai.text_sentiment.Input.text_input
    (zero2ai.text_sentiment.MkInput
     $text_input)) $text_input)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.text_sentiment.Output type
(: zero2ai.text_sentiment.Output Type)

;; Define zero2ai.text_sentiment.Output constuctor
(: zero2ai.text_sentiment.MkOutput
   (->
    String ; output
    zero2ai.text_sentiment.Output))

;; Define zero2ai.text_sentiment.Output access functions

;; Define zero2ai.text_sentiment.Output.output
(: zero2ai.text_sentiment.Output.output (-> zero2ai.text_sentiment.Output String))
(= (zero2ai.text_sentiment.Output.output
    (zero2ai.text_sentiment.MkOutput
     $output)) $output)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; predict ;;
;;;;;;;;;;;;;

;; Define zero2ai.text_sentiment.predict service method
(: zero2ai.text_sentiment.predict (-> zero2ai.text_sentiment.Input zero2ai.text_sentiment.Output))



;; ServiceID definition of zero2ai.generate_random_text"
(: zero2ai.generate_random_text (ServiceID zero2ai))

;; Service metadata of zero2ai.generate_random_text
(= (service zero2ai.generate_random_text)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "generate_random_text"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmeaEzgJmGm9nLnqzSegrGb9b1kuC58jvAxKtm2xamUQaD"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: generate_random_text
;; Prefix: zero2ai.generate_random_text
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.generate_random_text.Input type
(: zero2ai.generate_random_text.Input Type)

;; Define zero2ai.generate_random_text.Input constuctor
(: zero2ai.generate_random_text.MkInput
   (->
    String ; Input_Text
    zero2ai.generate_random_text.Input))

;; Define zero2ai.generate_random_text.Input access functions

;; Define zero2ai.generate_random_text.Input.Input_Text
(: zero2ai.generate_random_text.Input.Input_Text (-> zero2ai.generate_random_text.Input String))
(= (zero2ai.generate_random_text.Input.Input_Text
    (zero2ai.generate_random_text.MkInput
     $Input_Text)) $Input_Text)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.generate_random_text.Output type
(: zero2ai.generate_random_text.Output Type)

;; Define zero2ai.generate_random_text.Output constuctor
(: zero2ai.generate_random_text.MkOutput
   (->
    String ; Generated_Text
    zero2ai.generate_random_text.Output))

;; Define zero2ai.generate_random_text.Output access functions

;; Define zero2ai.generate_random_text.Output.Generated_Text
(: zero2ai.generate_random_text.Output.Generated_Text (-> zero2ai.generate_random_text.Output String))
(= (zero2ai.generate_random_text.Output.Generated_Text
    (zero2ai.generate_random_text.MkOutput
     $Generated_Text)) $Generated_Text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; generate_text ;;
;;;;;;;;;;;;;;;;;;;

;; Define zero2ai.generate_random_text.generate_text service method
(: zero2ai.generate_random_text.generate_text (-> zero2ai.generate_random_text.Input zero2ai.generate_random_text.Output))



;; ServiceID definition of zero2ai.background_eraser"
(: zero2ai.background_eraser (ServiceID zero2ai))

;; Service metadata of zero2ai.background_eraser
(= (service zero2ai.background_eraser)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "background_eraser"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmS1tzM7LupWrJHD5LSDsjcv8aH7BWrYvBsfGganUuGaD2"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: background_eraser
;; Prefix: zero2ai.background_eraser
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.background_eraser.Input type
(: zero2ai.background_eraser.Input Type)

;; Define zero2ai.background_eraser.Input constuctor
(: zero2ai.background_eraser.MkInput
   (->
    Bytes ; image
    zero2ai.background_eraser.Input))

;; Define zero2ai.background_eraser.Input access functions

;; Define zero2ai.background_eraser.Input.image
(: zero2ai.background_eraser.Input.image (-> zero2ai.background_eraser.Input Bytes))
(= (zero2ai.background_eraser.Input.image
    (zero2ai.background_eraser.MkInput
     $image)) $image)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.background_eraser.Output type
(: zero2ai.background_eraser.Output Type)

;; Define zero2ai.background_eraser.Output constuctor
(: zero2ai.background_eraser.MkOutput
   (->
    Bytes ; output
    zero2ai.background_eraser.Output))

;; Define zero2ai.background_eraser.Output access functions

;; Define zero2ai.background_eraser.Output.output
(: zero2ai.background_eraser.Output.output (-> zero2ai.background_eraser.Output Bytes))
(= (zero2ai.background_eraser.Output.output
    (zero2ai.background_eraser.MkOutput
     $output)) $output)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; segment ;;
;;;;;;;;;;;;;

;; Define zero2ai.background_eraser.segment service method
(: zero2ai.background_eraser.segment (-> zero2ai.background_eraser.Input zero2ai.background_eraser.Output))



;; ServiceID definition of zero2ai.sentiment_reader"
(: zero2ai.sentiment_reader (ServiceID zero2ai))

;; Service metadata of zero2ai.sentiment_reader
(= (service zero2ai.sentiment_reader)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "sentiment_reader"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmf3wRXSncLL4syz5Ybzp59auPX8zr7f9PNH32ZcNatzQq"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: sentiment_reader
;; Prefix: zero2ai.sentiment_reader
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.sentiment_reader.Input type
(: zero2ai.sentiment_reader.Input Type)

;; Define zero2ai.sentiment_reader.Input constuctor
(: zero2ai.sentiment_reader.MkInput
   (->
    String ; text_input
    zero2ai.sentiment_reader.Input))

;; Define zero2ai.sentiment_reader.Input access functions

;; Define zero2ai.sentiment_reader.Input.text_input
(: zero2ai.sentiment_reader.Input.text_input (-> zero2ai.sentiment_reader.Input String))
(= (zero2ai.sentiment_reader.Input.text_input
    (zero2ai.sentiment_reader.MkInput
     $text_input)) $text_input)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.sentiment_reader.Output type
(: zero2ai.sentiment_reader.Output Type)

;; Define zero2ai.sentiment_reader.Output constuctor
(: zero2ai.sentiment_reader.MkOutput
   (->
    String ; output
    zero2ai.sentiment_reader.Output))

;; Define zero2ai.sentiment_reader.Output access functions

;; Define zero2ai.sentiment_reader.Output.output
(: zero2ai.sentiment_reader.Output.output (-> zero2ai.sentiment_reader.Output String))
(= (zero2ai.sentiment_reader.Output.output
    (zero2ai.sentiment_reader.MkOutput
     $output)) $output)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; predict ;;
;;;;;;;;;;;;;

;; Define zero2ai.sentiment_reader.predict service method
(: zero2ai.sentiment_reader.predict (-> zero2ai.sentiment_reader.Input zero2ai.sentiment_reader.Output))



;; ServiceID definition of zero2ai.random_text_generator"
(: zero2ai.random_text_generator (ServiceID zero2ai))

;; Service metadata of zero2ai.random_text_generator
(= (service zero2ai.random_text_generator)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "random_text_generator"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmRLFTJCiK5RTiRkQuS7gWVmks1uRVzuXBpNkwyEsQErdg"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: random_text_generator
;; Prefix: zero2ai.random_text_generator
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.random_text_generator.Input type
(: zero2ai.random_text_generator.Input Type)

;; Define zero2ai.random_text_generator.Input constuctor
(: zero2ai.random_text_generator.MkInput
   (->
    String ; Input_Text
    zero2ai.random_text_generator.Input))

;; Define zero2ai.random_text_generator.Input access functions

;; Define zero2ai.random_text_generator.Input.Input_Text
(: zero2ai.random_text_generator.Input.Input_Text (-> zero2ai.random_text_generator.Input String))
(= (zero2ai.random_text_generator.Input.Input_Text
    (zero2ai.random_text_generator.MkInput
     $Input_Text)) $Input_Text)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.random_text_generator.Output type
(: zero2ai.random_text_generator.Output Type)

;; Define zero2ai.random_text_generator.Output constuctor
(: zero2ai.random_text_generator.MkOutput
   (->
    String ; Generated_Text
    zero2ai.random_text_generator.Output))

;; Define zero2ai.random_text_generator.Output access functions

;; Define zero2ai.random_text_generator.Output.Generated_Text
(: zero2ai.random_text_generator.Output.Generated_Text (-> zero2ai.random_text_generator.Output String))
(= (zero2ai.random_text_generator.Output.Generated_Text
    (zero2ai.random_text_generator.MkOutput
     $Generated_Text)) $Generated_Text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; generate_text ;;
;;;;;;;;;;;;;;;;;;;

;; Define zero2ai.random_text_generator.generate_text service method
(: zero2ai.random_text_generator.generate_text (-> zero2ai.random_text_generator.Input zero2ai.random_text_generator.Output))



;; ServiceID definition of zero2ai.text_generate"
(: zero2ai.text_generate (ServiceID zero2ai))

;; Service metadata of zero2ai.text_generate
(= (service zero2ai.text_generate)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "text_generate"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmYkna6GKKZVfPpFKgG5XNfAwrFyrzVWZ7NddDvs9p9gdM"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: service.proto
;; Protobuf syntax: proto3
;; Protobuf package: text_generate
;; Prefix: zero2ai.text_generate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define zero2ai.text_generate.Input type
(: zero2ai.text_generate.Input Type)

;; Define zero2ai.text_generate.Input constuctor
(: zero2ai.text_generate.MkInput
   (->
    String ; Input_Text
    zero2ai.text_generate.Input))

;; Define zero2ai.text_generate.Input access functions

;; Define zero2ai.text_generate.Input.Input_Text
(: zero2ai.text_generate.Input.Input_Text (-> zero2ai.text_generate.Input String))
(= (zero2ai.text_generate.Input.Input_Text
    (zero2ai.text_generate.MkInput
     $Input_Text)) $Input_Text)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define zero2ai.text_generate.Output type
(: zero2ai.text_generate.Output Type)

;; Define zero2ai.text_generate.Output constuctor
(: zero2ai.text_generate.MkOutput
   (->
    String ; Generated_Text
    zero2ai.text_generate.Output))

;; Define zero2ai.text_generate.Output access functions

;; Define zero2ai.text_generate.Output.Generated_Text
(: zero2ai.text_generate.Output.Generated_Text (-> zero2ai.text_generate.Output String))
(= (zero2ai.text_generate.Output.Generated_Text
    (zero2ai.text_generate.MkOutput
     $Generated_Text)) $Generated_Text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; generate_text ;;
;;;;;;;;;;;;;;;;;;;

;; Define zero2ai.text_generate.generate_text service method
(: zero2ai.text_generate.generate_text (-> zero2ai.text_generate.Input zero2ai.text_generate.Output))




;; OrganizationID definition of Photrek
(: Photrek OrganizationID)

;; Organization metadata of Photrek
(= (organization Photrek)
   ; Organization
   (MkOrganization
       ; org_name
       "Photrek"
       ; org_id
       "Photrek"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://photrek.io"
           ; url content
           null
           ; description
           "Photrek provides Risk-Aware Machine Intelligence Services"
           ; short_description
           "Photrek provides Risk-Aware Machine Intelligence Services")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of Photrek


;; ServiceID definition of Photrek.risk-aware-assessment"
(: Photrek.risk-aware-assessment (ServiceID Photrek))

;; Service metadata of Photrek.risk-aware-assessment
(= (service Photrek.risk-aware-assessment)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Risk-Aware-Assessment"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmSTjPRKMPdTZkHdeqcN6NtULzceCC4JcJgzqf4hVNFD55"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/Photrek/Risk-Aware-Assessment"
           ; url content
           null
           ; description
           " Photrek’s Risk Assessment Service provides a graphical and quantitative assessment of probabilistic forecasts. The user inputs a vector of probabilities forecasted for a set of events that actually occurred; i.e. the outcome of a test. The assessment consists of a histogram of the probabilities forecasted and an overlay of three metrics (Accuracy, Decisiveness, and Robustness).\n\nThe metrics derive from a generalization of information theory but are presented in the probability domain for improved understanding. The Accuracy metric is a translation of the log-likelihood or cross-entropy into the probability domain and is computed by geometric mean. The Robustness metric is sensitive to the worst performance of the algorithm and is measured by the -2/3rds power of the generalized mean. The Decisiveness metric approximates the classification performance of making a decision with the probabilities and is measured by the arithmetic mean. (test)"
           ; short_description
           "Our service provides a histogram plot of probabilities generated by a model and overlays three metrics (Accuracy, Decisiveness and Robustness).")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "robustness" (Cons "machinelearning" (Cons "metrics" (Cons "statistics" (Cons "probability" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: adr.proto
;; Protobuf syntax: proto3
;; Protobuf package: adr
;; Prefix: Photrek.risk-aware-assessment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; InputString ;;
;;;;;;;;;;;;;;;;;

;; Define Photrek.risk-aware-assessment.InputString type
(: Photrek.risk-aware-assessment.InputString Type)

;; Define Photrek.risk-aware-assessment.InputString constuctor
(: Photrek.risk-aware-assessment.MkInputString
   (->
    String ; s
    Photrek.risk-aware-assessment.InputString))

;; Define Photrek.risk-aware-assessment.InputString access functions

;; Define Photrek.risk-aware-assessment.InputString.s
(: Photrek.risk-aware-assessment.InputString.s (-> Photrek.risk-aware-assessment.InputString String))
(= (Photrek.risk-aware-assessment.InputString.s
    (Photrek.risk-aware-assessment.MkInputString
     $s)) $s)

;;;;;;;;;;;;;;;;;;;;
;; ADRReturnFloat ;;
;;;;;;;;;;;;;;;;;;;;

;; Define Photrek.risk-aware-assessment.ADRReturnFloat type
(: Photrek.risk-aware-assessment.ADRReturnFloat Type)

;; Define Photrek.risk-aware-assessment.ADRReturnFloat constuctor
(: Photrek.risk-aware-assessment.MkADRReturnFloat
   (->
    Float ; a
    Float ; d
    Float ; r
    String ; img
    Int32 ; numr
    Int32 ; numc
    Photrek.risk-aware-assessment.ADRReturnFloat))

;; Define Photrek.risk-aware-assessment.ADRReturnFloat access functions

;; Define Photrek.risk-aware-assessment.ADRReturnFloat.a
(: Photrek.risk-aware-assessment.ADRReturnFloat.a (-> Photrek.risk-aware-assessment.ADRReturnFloat Float))
(= (Photrek.risk-aware-assessment.ADRReturnFloat.a
    (Photrek.risk-aware-assessment.MkADRReturnFloat
     $a
     $d
     $r
     $img
     $numr
     $numc)) $a)

;; Define Photrek.risk-aware-assessment.ADRReturnFloat.d
(: Photrek.risk-aware-assessment.ADRReturnFloat.d (-> Photrek.risk-aware-assessment.ADRReturnFloat Float))
(= (Photrek.risk-aware-assessment.ADRReturnFloat.d
    (Photrek.risk-aware-assessment.MkADRReturnFloat
     $a
     $d
     $r
     $img
     $numr
     $numc)) $d)

;; Define Photrek.risk-aware-assessment.ADRReturnFloat.r
(: Photrek.risk-aware-assessment.ADRReturnFloat.r (-> Photrek.risk-aware-assessment.ADRReturnFloat Float))
(= (Photrek.risk-aware-assessment.ADRReturnFloat.r
    (Photrek.risk-aware-assessment.MkADRReturnFloat
     $a
     $d
     $r
     $img
     $numr
     $numc)) $r)

;; Define Photrek.risk-aware-assessment.ADRReturnFloat.img
(: Photrek.risk-aware-assessment.ADRReturnFloat.img (-> Photrek.risk-aware-assessment.ADRReturnFloat String))
(= (Photrek.risk-aware-assessment.ADRReturnFloat.img
    (Photrek.risk-aware-assessment.MkADRReturnFloat
     $a
     $d
     $r
     $img
     $numr
     $numc)) $img)

;; Define Photrek.risk-aware-assessment.ADRReturnFloat.numr
(: Photrek.risk-aware-assessment.ADRReturnFloat.numr (-> Photrek.risk-aware-assessment.ADRReturnFloat Int32))
(= (Photrek.risk-aware-assessment.ADRReturnFloat.numr
    (Photrek.risk-aware-assessment.MkADRReturnFloat
     $a
     $d
     $r
     $img
     $numr
     $numc)) $numr)

;; Define Photrek.risk-aware-assessment.ADRReturnFloat.numc
(: Photrek.risk-aware-assessment.ADRReturnFloat.numc (-> Photrek.risk-aware-assessment.ADRReturnFloat Int32))
(= (Photrek.risk-aware-assessment.ADRReturnFloat.numc
    (Photrek.risk-aware-assessment.MkADRReturnFloat
     $a
     $d
     $r
     $img
     $numr
     $numc)) $numc)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefinition ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define Photrek.risk-aware-assessment.adr service method
(: Photrek.risk-aware-assessment.adr (-> Photrek.risk-aware-assessment.InputString Photrek.risk-aware-assessment.ADRReturnFloat))



;; ServiceID definition of Photrek.cvae"
(: Photrek.cvae (ServiceID Photrek))

;; Service metadata of Photrek.cvae
(= (service Photrek.cvae)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Coupled Variational Encoder"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmPPWyEB9SjqQHZTUFCcFbSAGLWvooor9s4qXHw4KwqSkH"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/Photrek/Risk-Aware-Assessment"
           ; url content
           null
           ; description
           "Photrek’s Coupled Variational AutoEncoder (CVAE) provides a demonstration of the application of non-linear statistical coupling to Variational AutoEncoders."
           ; short_description
           "Our service provides a demonstration of the application of non-linear statistical coupling to Variational AutoEncoders.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "coupling" (Cons "generative" (Cons "machinelearning" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: data_generator.proto
;; Protobuf syntax: proto3
;; Protobuf package: data_generator
;; Prefix: Photrek.cvae
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define Photrek.cvae.Input type
(: Photrek.cvae.Input Type)

;; Define Photrek.cvae.Input constuctor
(: Photrek.cvae.MkInput
   (->
    String ; d
    String ; k
    Photrek.cvae.Input))

;; Define Photrek.cvae.Input access functions

;; Define Photrek.cvae.Input.d
(: Photrek.cvae.Input.d (-> Photrek.cvae.Input String))
(= (Photrek.cvae.Input.d
    (Photrek.cvae.MkInput
     $d
     $k)) $d)

;; Define Photrek.cvae.Input.k
(: Photrek.cvae.Input.k (-> Photrek.cvae.Input String))
(= (Photrek.cvae.Input.k
    (Photrek.cvae.MkInput
     $d
     $k)) $k)

;;;;;;;;;;;;;;;;;;;;
;; StringResponse ;;
;;;;;;;;;;;;;;;;;;;;

;; Define Photrek.cvae.StringResponse type
(: Photrek.cvae.StringResponse Type)

;; Define Photrek.cvae.StringResponse constuctor
(: Photrek.cvae.MkStringResponse
   (->
    String ; s
    Photrek.cvae.StringResponse))

;; Define Photrek.cvae.StringResponse access functions

;; Define Photrek.cvae.StringResponse.s
(: Photrek.cvae.StringResponse.s (-> Photrek.cvae.StringResponse String))
(= (Photrek.cvae.StringResponse.s
    (Photrek.cvae.MkStringResponse
     $s)) $s)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefinition ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define Photrek.cvae.GenerateImage service method
(: Photrek.cvae.GenerateImage (-> Photrek.cvae.Input Photrek.cvae.StringResponse))




;; OrganizationID definition of 24bffe3359cb493ea5dd8df222db97f8
(: 24bffe3359cb493ea5dd8df222db97f8 OrganizationID)

;; Organization metadata of 24bffe3359cb493ea5dd8df222db97f8
(= (organization 24bffe3359cb493ea5dd8df222db97f8)
   ; Organization
   (MkOrganization
       ; org_name
       "Railroad"
       ; org_id
       "24bffe3359cb493ea5dd8df222db97f8"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           "rrgroup.io"
           ; url content
           null
           ; description
           "Independent research and analytics shop"
           ; short_description
           "Independent research and analytics shop")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of 24bffe3359cb493ea5dd8df222db97f8



;; OrganizationID definition of b7ff7184aca84090b5dddcae38e42326
(: b7ff7184aca84090b5dddcae38e42326 OrganizationID)

;; Organization metadata of b7ff7184aca84090b5dddcae38e42326
(= (organization b7ff7184aca84090b5dddcae38e42326)
   ; Organization
   (MkOrganization
       ; org_name
       "Sigma Corp."
       ; org_id
       "b7ff7184aca84090b5dddcae38e42326"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           "https://sigmamales.com/"
           ; url content
           null
           ; description
           "Sigma represents a male archetype that has been in existence eons ago, but it has only recently been trending. Once you go over their characteristics, you'll realize this particular male archetype isn't your average guy.\n\nWhat sets him apart from the rest is his decision to walk the solitary path and color outside the lines. He doesn't subscribe to the normal social dominance hierarchy construct which, by the way, some say is imaginary and arbitrarily made up."
           ; short_description
           "Men empowerment")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of b7ff7184aca84090b5dddcae38e42326



;; OrganizationID definition of naint
(: naint OrganizationID)

;; Organization metadata of naint
(= (organization naint)
   ; Organization
   (MkOrganization
       ; org_name
       "Native Intelligence"
       ; org_id
       "naint"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "www.naint.com"
           ; url content
           null
           ; description
           "Founded in 2009, Native Intelligence is dedicated to academic research and software development, the creation and implementation of artificial intelligence technologies, neurosymbolic architectures, scalable AI applications in various modalities and fields, and disruptive blockchain technologies to create elegant and efficient distributed cognitive ecosystems. that improve human-machine interaction to make the world a better place. Native Intelligence collaborates with other commercial and non-profit organizations to solve problems on a global scale. Together we develop and implement AI, Blockchain and robotic systems. The company employs more than 50 experienced developers and researchers working in different parts of the world. The company has computing power based on its own research laboratory for training and running deep neural networks and artificial intelligence systems with a theoretical peak of more than 5 PFLOPS and an energy power of 0.125 MW."
           ; short_description
           "Native Intelligence is engaged in academic research and software development, the creation and implementation of artificial intelligence technologies.")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of naint


;; ServiceID definition of naint.question-answering-long-seq"
(: naint.question-answering-long-seq (ServiceID naint))

;; Service metadata of naint.question-answering-long-seq
(= (service naint.question-answering-long-seq)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Abstractive Question Answering"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmXbKhnHZc5gBdKxu1GriAjrsyU1Qaq1EK92hD6En3Va2F"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/question-answering-long-seq-service"
           ; url content
           null
           ; description
           "<div>The service provides an answer to any question using a huge knowledge base and model trained for the Open-Domain Question Answering task.</div>"
           ; short_description
           "The service provides an answer to any question using a huge knowledge base and model trained for the Open-Domain Question Answering task.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "english" (Cons "text" (Cons "open-domain" (Cons "answer" (Cons "question" (Cons "qa" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: qa.proto
;; Protobuf syntax: proto3
;; Protobuf package: qa_long
;; Prefix: naint.question-answering-long-seq
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; Question ;;
;;;;;;;;;;;;;;

;; Define naint.question-answering-long-seq.Question type
(: naint.question-answering-long-seq.Question Type)

;; Define naint.question-answering-long-seq.Question constuctor
(: naint.question-answering-long-seq.MkQuestion
   (->
    String ; question
    naint.question-answering-long-seq.Question))

;; Define naint.question-answering-long-seq.Question access functions

;; Define naint.question-answering-long-seq.Question.question
(: naint.question-answering-long-seq.Question.question (-> naint.question-answering-long-seq.Question String))
(= (naint.question-answering-long-seq.Question.question
    (naint.question-answering-long-seq.MkQuestion
     $question)) $question)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.question-answering-long-seq.Answer type
(: naint.question-answering-long-seq.Answer Type)

;; Define naint.question-answering-long-seq.Answer constuctor
(: naint.question-answering-long-seq.MkAnswer
   (->
    String ; answer
    naint.question-answering-long-seq.Answer))

;; Define naint.question-answering-long-seq.Answer access functions

;; Define naint.question-answering-long-seq.Answer.answer
(: naint.question-answering-long-seq.Answer.answer (-> naint.question-answering-long-seq.Answer String))
(= (naint.question-answering-long-seq.Answer.answer
    (naint.question-answering-long-seq.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;
;; QA ;;
;;;;;;;;

;; Define naint.question-answering-long-seq.qa service method
(: naint.question-answering-long-seq.qa (-> naint.question-answering-long-seq.Question naint.question-answering-long-seq.Answer))



;; ServiceID definition of naint.audio-scene"
(: naint.audio-scene (ServiceID naint))

;; Service metadata of naint.audio-scene
(= (service naint.audio-scene)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Audio Scene Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmedq46fsWEgXqQrPMAHG8tUg63x2xE5BSUmkEkvosfGQt"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/audio-scene-recognition"
           ; url content
           null
           ; description
           "<div>The service receives an WAV audio file and outputs the result of top 5 labels in every N(time_frame) seconds in input audio.\nThe input audio file size is limited to 4Mb, in practice the optimal duration of the processed audio track should be no more than 90 seconds for 320 kbps audio. </div>"
           ; short_description
           "The service receives an WAV audio file and outputs the result of top 5 labels in every N(time_frame) seconds in input audio.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "audio" (Cons "scene" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: ASC.proto
;; Protobuf syntax: proto3
;; Protobuf package: ASC
;; Prefix: naint.audio-scene
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.audio-scene.Audio type
(: naint.audio-scene.Audio Type)

;; Define naint.audio-scene.Audio constuctor
(: naint.audio-scene.MkAudio
   (->
    Bytes ; data
    String ; time_frame
    naint.audio-scene.Audio))

;; Define naint.audio-scene.Audio access functions

;; Define naint.audio-scene.Audio.data
(: naint.audio-scene.Audio.data (-> naint.audio-scene.Audio Bytes))
(= (naint.audio-scene.Audio.data
    (naint.audio-scene.MkAudio
     $data
     $time_frame)) $data)

;; Define naint.audio-scene.Audio.time_frame
(: naint.audio-scene.Audio.time_frame (-> naint.audio-scene.Audio String))
(= (naint.audio-scene.Audio.time_frame
    (naint.audio-scene.MkAudio
     $data
     $time_frame)) $time_frame)

;;;;;;;;;;;;;;;;;;;;
;; Output_results ;;
;;;;;;;;;;;;;;;;;;;;

;; Define naint.audio-scene.Output_results type
(: naint.audio-scene.Output_results Type)

;; Define naint.audio-scene.Output_results constuctor
(: naint.audio-scene.MkOutput_results
   (->
    String ; res
    naint.audio-scene.Output_results))

;; Define naint.audio-scene.Output_results access functions

;; Define naint.audio-scene.Output_results.res
(: naint.audio-scene.Output_results.res (-> naint.audio-scene.Output_results String))
(= (naint.audio-scene.Output_results.res
    (naint.audio-scene.MkOutput_results
     $res)) $res)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; ASC ;;
;;;;;;;;;

;; Define naint.audio-scene.audio2scene service method
(: naint.audio-scene.audio2scene (-> naint.audio-scene.Audio naint.audio-scene.Output_results))



;; ServiceID definition of naint.punctuation-restoration"
(: naint.punctuation-restoration (ServiceID naint))

;; Service metadata of naint.punctuation-restoration
(= (service naint.punctuation-restoration)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Punctuation & Capitalisation Restoration"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmT7QyuR4gBt6cDgWAU5M4CCb9XpkQHL4vVehpvcQ8orQF"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/Punctuation-Capitalisation-Restoration"
           ; url content
           null
           ; description
           "<div>The service receives the text in English and places punctuation marks and capital letters in it.</div>"
           ; short_description
           "The service receives the text in English and places punctuation marks and capital letters in it.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text2text" (Cons "text" (Cons "english" (Cons "capitalization" (Cons "punctuation" (Cons "nlp" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: pcr_naint.proto
;; Protobuf syntax: proto3
;; Protobuf package: pcr
;; Prefix: naint.punctuation-restoration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.punctuation-restoration.Query type
(: naint.punctuation-restoration.Query Type)

;; Define naint.punctuation-restoration.Query constuctor
(: naint.punctuation-restoration.MkQuery
   (->
    String ; data
    naint.punctuation-restoration.Query))

;; Define naint.punctuation-restoration.Query access functions

;; Define naint.punctuation-restoration.Query.data
(: naint.punctuation-restoration.Query.data (-> naint.punctuation-restoration.Query String))
(= (naint.punctuation-restoration.Query.data
    (naint.punctuation-restoration.MkQuery
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.punctuation-restoration.Text type
(: naint.punctuation-restoration.Text Type)

;; Define naint.punctuation-restoration.Text constuctor
(: naint.punctuation-restoration.MkText
   (->
    String ; text
    naint.punctuation-restoration.Text))

;; Define naint.punctuation-restoration.Text access functions

;; Define naint.punctuation-restoration.Text.text
(: naint.punctuation-restoration.Text.text (-> naint.punctuation-restoration.Text String))
(= (naint.punctuation-restoration.Text.text
    (naint.punctuation-restoration.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; PCR ;;
;;;;;;;;;

;; Define naint.punctuation-restoration.t2t service method
(: naint.punctuation-restoration.t2t (-> naint.punctuation-restoration.Query naint.punctuation-restoration.Text))



;; ServiceID definition of naint.speech2text-en"
(: naint.speech2text-en (ServiceID naint))

;; Service metadata of naint.speech2text-en
(= (service naint.speech2text-en)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "English Speech Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmd5b2oVrQfdg67V6E1EUCfr1UXGJtYeDo2HPtm1nMeYYE"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/speech-recognition-service"
           ; url content
           null
           ; description
           "<div>The service performs speech recognition using machine learning techniques. The service receives the audio file in binary format and outputs the text string resulting from audio recognition.</div>"
           ; short_description
           "The service performs speech recognition using machine learning techniques.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "speech2text" (Cons "speech" (Cons "english" (Cons "recognition" (Cons "asr" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: asr.proto
;; Protobuf syntax: proto3
;; Protobuf package: asr
;; Prefix: naint.speech2text-en
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.speech2text-en.Audio type
(: naint.speech2text-en.Audio Type)

;; Define naint.speech2text-en.Audio constuctor
(: naint.speech2text-en.MkAudio
   (->
    Bytes ; data
    naint.speech2text-en.Audio))

;; Define naint.speech2text-en.Audio access functions

;; Define naint.speech2text-en.Audio.data
(: naint.speech2text-en.Audio.data (-> naint.speech2text-en.Audio Bytes))
(= (naint.speech2text-en.Audio.data
    (naint.speech2text-en.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.speech2text-en.Text type
(: naint.speech2text-en.Text Type)

;; Define naint.speech2text-en.Text constuctor
(: naint.speech2text-en.MkText
   (->
    String ; text
    naint.speech2text-en.Text))

;; Define naint.speech2text-en.Text access functions

;; Define naint.speech2text-en.Text.text
(: naint.speech2text-en.Text.text (-> naint.speech2text-en.Text String))
(= (naint.speech2text-en.Text.text
    (naint.speech2text-en.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; ASR ;;
;;;;;;;;;

;; Define naint.speech2text-en.s2t service method
(: naint.speech2text-en.s2t (-> naint.speech2text-en.Audio naint.speech2text-en.Text))



;; ServiceID definition of naint.text2speech-en"
(: naint.text2speech-en (ServiceID naint))

;; Service metadata of naint.text2speech-en
(= (service naint.text2speech-en)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "English Speech Synthesis"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qma9mJgDt3Sn12nE5G7Bud3JGLJPPRKhLUQRCUergb7a5c"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/speech-synthesis-service"
           ; url content
           null
           ; description
           "<div> The service converts English text (up to 1000 characters) into artificial human speech using machine learning methods, which it returns as an audio file in binary format.</div>"
           ; short_description
           "The service converts English text (up to 1000 characters) into artificial human speech using machine learning methods, which it returns as an audio file in bin")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "speech" (Cons "text2speech" (Cons "english" (Cons "synthesis" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: tts.proto
;; Protobuf syntax: proto3
;; Protobuf package: tts
;; Prefix: naint.text2speech-en
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.text2speech-en.Audio type
(: naint.text2speech-en.Audio Type)

;; Define naint.text2speech-en.Audio constuctor
(: naint.text2speech-en.MkAudio
   (->
    Bytes ; data
    naint.text2speech-en.Audio))

;; Define naint.text2speech-en.Audio access functions

;; Define naint.text2speech-en.Audio.data
(: naint.text2speech-en.Audio.data (-> naint.text2speech-en.Audio Bytes))
(= (naint.text2speech-en.Audio.data
    (naint.text2speech-en.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.text2speech-en.Text type
(: naint.text2speech-en.Text Type)

;; Define naint.text2speech-en.Text constuctor
(: naint.text2speech-en.MkText
   (->
    String ; text
    naint.text2speech-en.Text))

;; Define naint.text2speech-en.Text access functions

;; Define naint.text2speech-en.Text.text
(: naint.text2speech-en.Text.text (-> naint.text2speech-en.Text String))
(= (naint.text2speech-en.Text.text
    (naint.text2speech-en.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; TTS ;;
;;;;;;;;;

;; Define naint.text2speech-en.t2s service method
(: naint.text2speech-en.t2s (-> naint.text2speech-en.Text naint.text2speech-en.Audio))



;; ServiceID definition of naint.semantic-similarity-binary"
(: naint.semantic-similarity-binary (ServiceID naint))

;; Service metadata of naint.semantic-similarity-binary
(= (service naint.semantic-similarity-binary)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Semantic Similarity Binary"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmU47a14Kw9aQ8WcHbLHX2dSW3vU3Q1ptdzmY1WR28RkpT"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/semantic-similarity-binary-service"
           ; url content
           null
           ; description
           "<div>Provide multiple texts in English (limited to 60 words each) and identify whether the text strings are semantically similar or not. Service gives a binary estimation, a value\n “1” means that there is a high degree of semantic similarity, and “0” represents a low level of semantic similarity.</div>"
           ; short_description
           "Provide multiple English texts (limited to 60 words each) and identify whether the texts are semantically similar.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "detection" (Cons "paraphrase" (Cons "similarity" (Cons "semantic" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: ss_bert.proto
;; Protobuf syntax: proto3
;; Protobuf package: ss_bert
;; Prefix: naint.semantic-similarity-binary
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; Sentences ;;
;;;;;;;;;;;;;;;

;; Define naint.semantic-similarity-binary.Sentences type
(: naint.semantic-similarity-binary.Sentences Type)

;; Define naint.semantic-similarity-binary.Sentences constuctor
(: naint.semantic-similarity-binary.MkSentences
   (->
    String ; a
    String ; b
    naint.semantic-similarity-binary.Sentences))

;; Define naint.semantic-similarity-binary.Sentences access functions

;; Define naint.semantic-similarity-binary.Sentences.a
(: naint.semantic-similarity-binary.Sentences.a (-> naint.semantic-similarity-binary.Sentences String))
(= (naint.semantic-similarity-binary.Sentences.a
    (naint.semantic-similarity-binary.MkSentences
     $a
     $b)) $a)

;; Define naint.semantic-similarity-binary.Sentences.b
(: naint.semantic-similarity-binary.Sentences.b (-> naint.semantic-similarity-binary.Sentences String))
(= (naint.semantic-similarity-binary.Sentences.b
    (naint.semantic-similarity-binary.MkSentences
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.semantic-similarity-binary.Answer type
(: naint.semantic-similarity-binary.Answer Type)

;; Define naint.semantic-similarity-binary.Answer constuctor
(: naint.semantic-similarity-binary.MkAnswer
   (->
    String ; answer
    naint.semantic-similarity-binary.Answer))

;; Define naint.semantic-similarity-binary.Answer access functions

;; Define naint.semantic-similarity-binary.Answer.answer
(: naint.semantic-similarity-binary.Answer.answer (-> naint.semantic-similarity-binary.Answer String))
(= (naint.semantic-similarity-binary.Answer.answer
    (naint.semantic-similarity-binary.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; SSBERT ;;
;;;;;;;;;;;;

;; Define naint.semantic-similarity-binary.ss_bert service method
(: naint.semantic-similarity-binary.ss_bert (-> naint.semantic-similarity-binary.Sentences naint.semantic-similarity-binary.Answer))



;; ServiceID definition of naint.speech-emotions"
(: naint.speech-emotions (ServiceID naint))

;; Service metadata of naint.speech-emotions
(= (service naint.speech-emotions)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Speech Emotion Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmS9vEniv9SVpuk82WVtWmrQNAB9NHq6DB2HwQQw1T6R98"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/speech-emotion-recognition"
           ; url content
           null
           ; description
           "<div>Submit a WAV file (up to 4 MB and no longer than 90 seconds) with English speech and get an emotion label from the provided WAV file.</div>"
           ; short_description
           "Submit a WAV file (up to 4 MB and no longer than 90 seconds) with English speech and get an emotion label from the provided WAV file.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "speech" (Cons "emotions" (Cons "emotionrecognition" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: emotion.proto
;; Protobuf syntax: proto3
;; Protobuf package: emotions
;; Prefix: naint.speech-emotions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.speech-emotions.Audio type
(: naint.speech-emotions.Audio Type)

;; Define naint.speech-emotions.Audio constuctor
(: naint.speech-emotions.MkAudio
   (->
    Bytes ; data
    naint.speech-emotions.Audio))

;; Define naint.speech-emotions.Audio access functions

;; Define naint.speech-emotions.Audio.data
(: naint.speech-emotions.Audio.data (-> naint.speech-emotions.Audio Bytes))
(= (naint.speech-emotions.Audio.data
    (naint.speech-emotions.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.speech-emotions.Text type
(: naint.speech-emotions.Text Type)

;; Define naint.speech-emotions.Text constuctor
(: naint.speech-emotions.MkText
   (->
    String ; text
    naint.speech-emotions.Text))

;; Define naint.speech-emotions.Text access functions

;; Define naint.speech-emotions.Text.text
(: naint.speech-emotions.Text.text (-> naint.speech-emotions.Text String))
(= (naint.speech-emotions.Text.text
    (naint.speech-emotions.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; emotions ;;
;;;;;;;;;;;;;;

;; Define naint.speech-emotions.e2t service method
(: naint.speech-emotions.e2t (-> naint.speech-emotions.Audio naint.speech-emotions.Text))



;; ServiceID definition of naint.paraphrase-generation"
(: naint.paraphrase-generation (ServiceID naint))

;; Service metadata of naint.paraphrase-generation
(= (service naint.paraphrase-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       " Multiple Paraphrase Generation"
       ; encoding
       "proto"
       ; service_type
       "http"
       ; model_ipfs_hash
       "QmXbY5p15TAb21DiEUKvarugjUQQoMMzw1jozd7GUTcooq"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/neural-paraphrase-generation"
           ; url content
           null
           ; description
           "<div>The service receives a text string and uses it as input to the pre-trained model. The model returns 10 paraphrased sentences.</div>"
           ; short_description
           "The service receives a text string and uses it as input to the pre-trained model. The model returns 10 paraphrased sentences.\n")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text2text" (Cons "generation" (Cons "paraphrase" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: paraphrase.proto
;; Protobuf syntax: proto3
;; Protobuf package: paraphrase
;; Prefix: naint.paraphrase-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.paraphrase-generation.Query type
(: naint.paraphrase-generation.Query Type)

;; Define naint.paraphrase-generation.Query constuctor
(: naint.paraphrase-generation.MkQuery
   (->
    String ; sentence
    naint.paraphrase-generation.Query))

;; Define naint.paraphrase-generation.Query access functions

;; Define naint.paraphrase-generation.Query.sentence
(: naint.paraphrase-generation.Query.sentence (-> naint.paraphrase-generation.Query String))
(= (naint.paraphrase-generation.Query.sentence
    (naint.paraphrase-generation.MkQuery
     $sentence)) $sentence)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.paraphrase-generation.Answer type
(: naint.paraphrase-generation.Answer Type)

;; Define naint.paraphrase-generation.Answer constuctor
(: naint.paraphrase-generation.MkAnswer
   (->
    String ; answer
    naint.paraphrase-generation.Answer))

;; Define naint.paraphrase-generation.Answer access functions

;; Define naint.paraphrase-generation.Answer.answer
(: naint.paraphrase-generation.Answer.answer (-> naint.paraphrase-generation.Answer String))
(= (naint.paraphrase-generation.Answer.answer
    (naint.paraphrase-generation.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; paraphrase ;;
;;;;;;;;;;;;;;;;

;; Define naint.paraphrase-generation.paraphrase service method
(: naint.paraphrase-generation.paraphrase (-> naint.paraphrase-generation.Query naint.paraphrase-generation.Answer))



;; ServiceID definition of naint.text2speech-ko"
(: naint.text2speech-ko (ServiceID naint))

;; Service metadata of naint.text2speech-ko
(= (service naint.text2speech-ko)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Korean Speech Synthesis"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmRQzSB8RpRUmXzkmw2sbr3HAAtVKiuhJqwdQRu1CcUUfW"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/Korean-Speech-Synthesis"
           ; url content
           null
           ; description
           "<div>The service converts Korean text (up to 1000 characters) into artificial human speech using machine learning methods, which it returns as an audio file in binary format.\n</div>"
           ; short_description
           "The service converts Korean text (up to 1000 characters) into artificial human speech.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "speech" (Cons "text2speech" (Cons "text" (Cons "korean" (Cons "synthesis" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: text2speech_ko.proto
;; Protobuf syntax: proto3
;; Protobuf package: text2speech_ko
;; Prefix: naint.text2speech-ko
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.text2speech-ko.Audio type
(: naint.text2speech-ko.Audio Type)

;; Define naint.text2speech-ko.Audio constuctor
(: naint.text2speech-ko.MkAudio
   (->
    Bytes ; data
    naint.text2speech-ko.Audio))

;; Define naint.text2speech-ko.Audio access functions

;; Define naint.text2speech-ko.Audio.data
(: naint.text2speech-ko.Audio.data (-> naint.text2speech-ko.Audio Bytes))
(= (naint.text2speech-ko.Audio.data
    (naint.text2speech-ko.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.text2speech-ko.Text type
(: naint.text2speech-ko.Text Type)

;; Define naint.text2speech-ko.Text constuctor
(: naint.text2speech-ko.MkText
   (->
    String ; text
    naint.text2speech-ko.Text))

;; Define naint.text2speech-ko.Text access functions

;; Define naint.text2speech-ko.Text.text
(: naint.text2speech-ko.Text.text (-> naint.text2speech-ko.Text String))
(= (naint.text2speech-ko.Text.text
    (naint.text2speech-ko.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; text2speech_ko ;;
;;;;;;;;;;;;;;;;;;;;

;; Define naint.text2speech-ko.text2speech_ko service method
(: naint.text2speech-ko.text2speech_ko (-> naint.text2speech-ko.Text naint.text2speech-ko.Audio))



;; ServiceID definition of naint.named-entity-recognition"
(: naint.named-entity-recognition (ServiceID naint))

;; Service metadata of naint.named-entity-recognition
(= (service naint.named-entity-recognition)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Named Entity Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmQUyQ1p8gVG8RBWx4DuiJNbrYoszKZLbQY8tt22G9UP5k"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/named-entity-recognition"
           ; url content
           null
           ; description
           "<div>Input a piece of text and identify specific named entities within the provided text. The neural model can recognize following named entities: entity, event, group, location, object, organization, person, place, time.</div>"
           ; short_description
           "Input a piece of text and identify specific named entities within the provided text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "text" (Cons "english" (Cons "named-entities" (Cons "ner" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: named_entity_recognition_rpc.proto
;; Protobuf syntax: proto3
;; Prefix: naint.named-entity-recognition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; InputMessage ;;
;;;;;;;;;;;;;;;;;;

;; Define naint.named-entity-recognition.InputMessage type
(: naint.named-entity-recognition.InputMessage Type)

;; Define naint.named-entity-recognition.InputMessage constuctor
(: naint.named-entity-recognition.MkInputMessage
   (->
    String ; value
    naint.named-entity-recognition.InputMessage))

;; Define naint.named-entity-recognition.InputMessage access functions

;; Define naint.named-entity-recognition.InputMessage.value
(: naint.named-entity-recognition.InputMessage.value (-> naint.named-entity-recognition.InputMessage String))
(= (naint.named-entity-recognition.InputMessage.value
    (naint.named-entity-recognition.MkInputMessage
     $value)) $value)

;;;;;;;;;;;;;;;;;;;
;; OutputMessage ;;
;;;;;;;;;;;;;;;;;;;

;; Define naint.named-entity-recognition.OutputMessage type
(: naint.named-entity-recognition.OutputMessage Type)

;; Define naint.named-entity-recognition.OutputMessage constuctor
(: naint.named-entity-recognition.MkOutputMessage
   (->
    String ; value
    naint.named-entity-recognition.OutputMessage))

;; Define naint.named-entity-recognition.OutputMessage access functions

;; Define naint.named-entity-recognition.OutputMessage.value
(: naint.named-entity-recognition.OutputMessage.value (-> naint.named-entity-recognition.OutputMessage String))
(= (naint.named-entity-recognition.OutputMessage.value
    (naint.named-entity-recognition.MkOutputMessage
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; RecognizeMessage ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define naint.named-entity-recognition.Recognize service method
(: naint.named-entity-recognition.Recognize (-> naint.named-entity-recognition.InputMessage naint.named-entity-recognition.OutputMessage))



;; ServiceID definition of naint.music-demixing"
(: naint.music-demixing (ServiceID naint))

;; Service metadata of naint.music-demixing
(= (service naint.music-demixing)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Neural Music Demixing"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qmc9mahDJPBByq9wtwTYmqdnuYX5H9NKL8GJMrwGv7efuN"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/Neural-Music-Demixing"
           ; url content
           null
           ; description
           "<div>The service receives a high-quality audio file and splits it into 4 sources: drums, bass, vocals and others. Separation is possible both for all 4 possible sources, and for one specific of the possible ones. So, for example, if you want to demix to all possible sources, then the output will be 4 audio tracks with drums, bass, vocals and everything else. If you want to demix only one of these sources, such as vocals, then you will end up with two audio files. In the first audio track there will be only vocals, in the second everything else except vocals.\n\nThe user must submit an audio file for demixing. The user can only submit audio in wav format! In this case, the frequency and number of channels do not matter. Using machine learning methods, this audio file is separated into sources.  You can input an audio-file to the service up to 4.5 minutes and no more than 40 MB. It is recommended to use the Google Chrome or Edge browser for demixing. It is not recommended to use Firefox.\n</div>"
           ; short_description
           "The service receives a high-quality audio file and splits it into 4 sources: drums, bass, vocals and others.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "separation" (Cons "demixing" (Cons "audio" (Cons "music" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: demixing.proto
;; Protobuf syntax: proto3
;; Protobuf package: demixing
;; Prefix: naint.music-demixing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.music-demixing.Query type
(: naint.music-demixing.Query Type)

;; Define naint.music-demixing.Query constuctor
(: naint.music-demixing.MkQuery
   (->
    Bytes ; audio_file
    String ; sounds
    naint.music-demixing.Query))

;; Define naint.music-demixing.Query access functions

;; Define naint.music-demixing.Query.audio_file
(: naint.music-demixing.Query.audio_file (-> naint.music-demixing.Query Bytes))
(= (naint.music-demixing.Query.audio_file
    (naint.music-demixing.MkQuery
     $audio_file
     $sounds)) $audio_file)

;; Define naint.music-demixing.Query.sounds
(: naint.music-demixing.Query.sounds (-> naint.music-demixing.Query String))
(= (naint.music-demixing.Query.sounds
    (naint.music-demixing.MkQuery
     $audio_file
     $sounds)) $sounds)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.music-demixing.Answer type
(: naint.music-demixing.Answer Type)

;; Define naint.music-demixing.Answer constuctor
(: naint.music-demixing.MkAnswer
   (->
    String ; demixed_audio
    naint.music-demixing.Answer))

;; Define naint.music-demixing.Answer access functions

;; Define naint.music-demixing.Answer.demixed_audio
(: naint.music-demixing.Answer.demixed_audio (-> naint.music-demixing.Answer String))
(= (naint.music-demixing.Answer.demixed_audio
    (naint.music-demixing.MkAnswer
     $demixed_audio)) $demixed_audio)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; demixing ;;
;;;;;;;;;;;;;;

;; Define naint.music-demixing.demixing service method
(: naint.music-demixing.demixing (-> naint.music-demixing.Query naint.music-demixing.Answer))



;; ServiceID definition of naint.midi2voice-zh"
(: naint.midi2voice-zh (ServiceID naint))

;; Service metadata of naint.midi2voice-zh
(= (service naint.midi2voice-zh)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Chinese Female Singing"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmX1pu1MmaDWkBLCDuDxA8ujDA8rNHkh59hcVqNJKdmXqR"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/Chinese-Female-Singing"
           ; url content
           null
           ; description
           "<div>The service synthesizes a singing voice in Chinese based on the given text and notes. The service receives a midi file with notes to sing, the text to be sung and the minimum time in seconds to take into account pauses (the latter is optional). The service converts the input midi file, extracting information about notes, pauses between them and the duration of each note and pause, and then synthesizes the singing voice using machine learning methods.\n\nFor convenience and to avoid errors, it is recommended to generate a song by phrases. Note that the notes in the midi must be consistent and belong to the same instrument. It means that the Midi file only has the notes to sing. You can only enter Chinese characters to generate Chinese singing. Use AP or SP tokens for pauses where you want to hear a pause while singing. Do not forget that the number of notes and pauses in the midi file should be equal to the number of all input characters including SP and AP tokens.\n\nExample of correct input: SP祝你生日快乐SP祝你生日快"
           ; short_description
           "The service synthesizes a singing voice in Chinese based on the given text and notes.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text2speech" (Cons "midi" (Cons "chinese" (Cons "female" (Cons "voice" (Cons "singing" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: singingZH.proto
;; Protobuf syntax: proto3
;; Protobuf package: singingZH
;; Prefix: naint.midi2voice-zh
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.midi2voice-zh.Query type
(: naint.midi2voice-zh.Query Type)

;; Define naint.midi2voice-zh.Query constuctor
(: naint.midi2voice-zh.MkQuery
   (->
    String ; text
    Bytes ; midi_file
    Float ; normalize
    naint.midi2voice-zh.Query))

;; Define naint.midi2voice-zh.Query access functions

;; Define naint.midi2voice-zh.Query.text
(: naint.midi2voice-zh.Query.text (-> naint.midi2voice-zh.Query String))
(= (naint.midi2voice-zh.Query.text
    (naint.midi2voice-zh.MkQuery
     $text
     $midi_file
     $normalize)) $text)

;; Define naint.midi2voice-zh.Query.midi_file
(: naint.midi2voice-zh.Query.midi_file (-> naint.midi2voice-zh.Query Bytes))
(= (naint.midi2voice-zh.Query.midi_file
    (naint.midi2voice-zh.MkQuery
     $text
     $midi_file
     $normalize)) $midi_file)

;; Define naint.midi2voice-zh.Query.normalize
(: naint.midi2voice-zh.Query.normalize (-> naint.midi2voice-zh.Query Float))
(= (naint.midi2voice-zh.Query.normalize
    (naint.midi2voice-zh.MkQuery
     $text
     $midi_file
     $normalize)) $normalize)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.midi2voice-zh.Answer type
(: naint.midi2voice-zh.Answer Type)

;; Define naint.midi2voice-zh.Answer constuctor
(: naint.midi2voice-zh.MkAnswer
   (->
    Bytes ; output_audio
    naint.midi2voice-zh.Answer))

;; Define naint.midi2voice-zh.Answer access functions

;; Define naint.midi2voice-zh.Answer.output_audio
(: naint.midi2voice-zh.Answer.output_audio (-> naint.midi2voice-zh.Answer Bytes))
(= (naint.midi2voice-zh.Answer.output_audio
    (naint.midi2voice-zh.MkAnswer
     $output_audio)) $output_audio)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; singingZH ;;
;;;;;;;;;;;;;;;

;; Define naint.midi2voice-zh.singingZH service method
(: naint.midi2voice-zh.singingZH (-> naint.midi2voice-zh.Query naint.midi2voice-zh.Answer))



;; ServiceID definition of naint.speech-commands"
(: naint.speech-commands (ServiceID naint))

;; Service metadata of naint.speech-commands
(= (service naint.speech-commands)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Speech Commands Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUnQyyKZgkn85R6tGNDPHYacY5HPHgaH3cgpSXPygdckM"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/speech-commands-recognition"
           ; url content
           null
           ; description
           "<div>The service receives an English-speech WAV audio file and outputs the result (one of ten variables) of the speech sample recognition in form of a text. \nThe input audio file size is limited to 4Mb, in practice the optimal duration of the processed audio track should be no more than 1-5 seconds for 320 kbps audio.\n</div>"
           ; short_description
           "The service receives an English-speech WAV audio file and outputs the result (one of ten variables) of the speech sample recognition in form of a text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "speech2text" (Cons "recognition" (Cons "sheech" (Cons "english" (Cons "commands" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: SCR.proto
;; Protobuf syntax: proto3
;; Protobuf package: scr
;; Prefix: naint.speech-commands
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.speech-commands.Audio type
(: naint.speech-commands.Audio Type)

;; Define naint.speech-commands.Audio constuctor
(: naint.speech-commands.MkAudio
   (->
    Bytes ; data
    naint.speech-commands.Audio))

;; Define naint.speech-commands.Audio access functions

;; Define naint.speech-commands.Audio.data
(: naint.speech-commands.Audio.data (-> naint.speech-commands.Audio Bytes))
(= (naint.speech-commands.Audio.data
    (naint.speech-commands.MkAudio
     $data)) $data)

;;;;;;;;;;;;;;;;;;
;; Output_Audio ;;
;;;;;;;;;;;;;;;;;;

;; Define naint.speech-commands.Output_Audio type
(: naint.speech-commands.Output_Audio Type)

;; Define naint.speech-commands.Output_Audio constuctor
(: naint.speech-commands.MkOutput_Audio
   (->
    String ; results
    naint.speech-commands.Output_Audio))

;; Define naint.speech-commands.Output_Audio access functions

;; Define naint.speech-commands.Output_Audio.results
(: naint.speech-commands.Output_Audio.results (-> naint.speech-commands.Output_Audio String))
(= (naint.speech-commands.Output_Audio.results
    (naint.speech-commands.MkOutput_Audio
     $results)) $results)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; SCR ;;
;;;;;;;;;

;; Define naint.speech-commands.sc2t service method
(: naint.speech-commands.sc2t (-> naint.speech-commands.Audio naint.speech-commands.Output_Audio))



;; ServiceID definition of naint.image2text-printed"
(: naint.image2text-printed (ServiceID naint))

;; Service metadata of naint.image2text-printed
(= (service naint.image2text-printed)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Printed Text Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmYPWAEJzj4SCXkyoGfbT13Bji57r6CNKCyoPaZTzMc1Qx"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/printed-text-recognition-service"
           ; url content
           null
           ; description
           "<div>The service receives an image of a English-language printed text line and uses it as input for a pretrained model and outputs the result of image recognition as a text sequence.</div>"
           ; short_description
           "The service receives an image of a English-language printed text line and outputs the result of image recognition as a text sequence.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text" (Cons "recognition" (Cons "image" (Cons "english" (Cons "printed" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: printedOCR.proto
;; Protobuf syntax: proto3
;; Protobuf package: printedOCR
;; Prefix: naint.image2text-printed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Image ;;
;;;;;;;;;;;

;; Define naint.image2text-printed.Image type
(: naint.image2text-printed.Image Type)

;; Define naint.image2text-printed.Image constuctor
(: naint.image2text-printed.MkImage
   (->
    Bytes ; img_data
    naint.image2text-printed.Image))

;; Define naint.image2text-printed.Image access functions

;; Define naint.image2text-printed.Image.img_data
(: naint.image2text-printed.Image.img_data (-> naint.image2text-printed.Image Bytes))
(= (naint.image2text-printed.Image.img_data
    (naint.image2text-printed.MkImage
     $img_data)) $img_data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.image2text-printed.Text type
(: naint.image2text-printed.Text Type)

;; Define naint.image2text-printed.Text constuctor
(: naint.image2text-printed.MkText
   (->
    String ; sentence
    naint.image2text-printed.Text))

;; Define naint.image2text-printed.Text access functions

;; Define naint.image2text-printed.Text.sentence
(: naint.image2text-printed.Text.sentence (-> naint.image2text-printed.Text String))
(= (naint.image2text-printed.Text.sentence
    (naint.image2text-printed.MkText
     $sentence)) $sentence)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; printedOCR ;;
;;;;;;;;;;;;;;;;

;; Define naint.image2text-printed.printedOCR service method
(: naint.image2text-printed.printedOCR (-> naint.image2text-printed.Image naint.image2text-printed.Text))



;; ServiceID definition of naint.image2text-handwritten"
(: naint.image2text-handwritten (ServiceID naint))

;; Service metadata of naint.image2text-handwritten
(= (service naint.image2text-handwritten)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Handwritten Text Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmWxgUHov8aeo4TXd3a9srJQRHbdAPwWYUPUhPxTakMm7K"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/handwritten-text-recognition-service"
           ; url content
           null
           ; description
           "<div>The service receives an image of a English-language handwritten text line and uses it as input for a pretrained model and outputs the result of image recognition as a text sequence.</div>"
           ; short_description
           "The service receives an image of a English-language handwritten text line and outputs the result of  image recognition as a text sequence.  ")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text" (Cons "recognition" (Cons "image" (Cons "english" (Cons "handwritten-text" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: handwrittenOCR.proto
;; Protobuf syntax: proto3
;; Protobuf package: handwrittenOCR
;; Prefix: naint.image2text-handwritten
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Image ;;
;;;;;;;;;;;

;; Define naint.image2text-handwritten.Image type
(: naint.image2text-handwritten.Image Type)

;; Define naint.image2text-handwritten.Image constuctor
(: naint.image2text-handwritten.MkImage
   (->
    Bytes ; img_data
    naint.image2text-handwritten.Image))

;; Define naint.image2text-handwritten.Image access functions

;; Define naint.image2text-handwritten.Image.img_data
(: naint.image2text-handwritten.Image.img_data (-> naint.image2text-handwritten.Image Bytes))
(= (naint.image2text-handwritten.Image.img_data
    (naint.image2text-handwritten.MkImage
     $img_data)) $img_data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.image2text-handwritten.Text type
(: naint.image2text-handwritten.Text Type)

;; Define naint.image2text-handwritten.Text constuctor
(: naint.image2text-handwritten.MkText
   (->
    String ; sentence
    naint.image2text-handwritten.Text))

;; Define naint.image2text-handwritten.Text access functions

;; Define naint.image2text-handwritten.Text.sentence
(: naint.image2text-handwritten.Text.sentence (-> naint.image2text-handwritten.Text String))
(= (naint.image2text-handwritten.Text.sentence
    (naint.image2text-handwritten.MkText
     $sentence)) $sentence)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;
;; handwrittenOCR ;;
;;;;;;;;;;;;;;;;;;;;

;; Define naint.image2text-handwritten.handwrittenOCR service method
(: naint.image2text-handwritten.handwrittenOCR (-> naint.image2text-handwritten.Image naint.image2text-handwritten.Text))



;; ServiceID definition of naint.image-captioning"
(: naint.image-captioning (ServiceID naint))

;; Service metadata of naint.image-captioning
(= (service naint.image-captioning)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Image Captioning"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUgEuv1jTBgZaar7JXAa5CWMwzdU5wGFK5tukmVSUsa3J"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/image-captioning"
           ; url content
           null
           ; description
           "<div>The service generates a text description for the image using machine learning techniques. The service receives the image in binary format and outputs a text string that is a text description of the scene in the image.</div>"
           ; short_description
           "The service generates a text description for the image using machine learning techniques.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "image" (Cons "caption" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: OFA.proto
;; Protobuf syntax: proto3
;; Protobuf package: ofa_caption
;; Prefix: naint.image-captioning
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Image ;;
;;;;;;;;;;;

;; Define naint.image-captioning.Image type
(: naint.image-captioning.Image Type)

;; Define naint.image-captioning.Image constuctor
(: naint.image-captioning.MkImage
   (->
    Bytes ; image
    naint.image-captioning.Image))

;; Define naint.image-captioning.Image access functions

;; Define naint.image-captioning.Image.image
(: naint.image-captioning.Image.image (-> naint.image-captioning.Image Bytes))
(= (naint.image-captioning.Image.image
    (naint.image-captioning.MkImage
     $image)) $image)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.image-captioning.Text type
(: naint.image-captioning.Text Type)

;; Define naint.image-captioning.Text constuctor
(: naint.image-captioning.MkText
   (->
    String ; caption
    naint.image-captioning.Text))

;; Define naint.image-captioning.Text access functions

;; Define naint.image-captioning.Text.caption
(: naint.image-captioning.Text.caption (-> naint.image-captioning.Text String))
(= (naint.image-captioning.Text.caption
    (naint.image-captioning.MkText
     $caption)) $caption)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; ofa_caption ;;
;;;;;;;;;;;;;;;;;

;; Define naint.image-captioning.Caption service method
(: naint.image-captioning.Caption (-> naint.image-captioning.Image naint.image-captioning.Text))



;; ServiceID definition of naint.image-generation"
(: naint.image-generation (ServiceID naint))

;; Service metadata of naint.image-generation
(= (service naint.image-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Neural Image Generation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qma6iSoZkvhRVMMj1PcZGQBq5LNo3QJMjmWFCaNszqS3jy"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/image-generation"
           ; url content
           null
           ; description
           "<div>The service generates 3 images that correspond to the text using machine learning methods. The service receives a text string and outputs 3 images in binary format, representing generated images based on the received text.</div>"
           ; short_description
           "The service generates 3 images that correspond to the text using machine learning methods.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "image-generation" (Cons "image" (Cons "text2image" (Cons "generation" (Cons "text" (Cons "english" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: Generation.proto
;; Protobuf syntax: proto3
;; Protobuf package: translate
;; Prefix: naint.image-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.image-generation.Text type
(: naint.image-generation.Text Type)

;; Define naint.image-generation.Text constuctor
(: naint.image-generation.MkText
   (->
    String ; sentence
    Bool ; type
    naint.image-generation.Text))

;; Define naint.image-generation.Text access functions

;; Define naint.image-generation.Text.sentence
(: naint.image-generation.Text.sentence (-> naint.image-generation.Text String))
(= (naint.image-generation.Text.sentence
    (naint.image-generation.MkText
     $sentence
     $type)) $sentence)

;; Define naint.image-generation.Text.type
(: naint.image-generation.Text.type (-> naint.image-generation.Text Bool))
(= (naint.image-generation.Text.type
    (naint.image-generation.MkText
     $sentence
     $type)) $type)

;;;;;;;;;;;
;; Image ;;
;;;;;;;;;;;

;; Define naint.image-generation.Image type
(: naint.image-generation.Image Type)

;; Define naint.image-generation.Image constuctor
(: naint.image-generation.MkImage
   (->
    Bytes ; image1
    Bytes ; image2
    Bytes ; image3
    naint.image-generation.Image))

;; Define naint.image-generation.Image access functions

;; Define naint.image-generation.Image.image1
(: naint.image-generation.Image.image1 (-> naint.image-generation.Image Bytes))
(= (naint.image-generation.Image.image1
    (naint.image-generation.MkImage
     $image1
     $image2
     $image3)) $image1)

;; Define naint.image-generation.Image.image2
(: naint.image-generation.Image.image2 (-> naint.image-generation.Image Bytes))
(= (naint.image-generation.Image.image2
    (naint.image-generation.MkImage
     $image1
     $image2
     $image3)) $image2)

;; Define naint.image-generation.Image.image3
(: naint.image-generation.Image.image3 (-> naint.image-generation.Image Bytes))
(= (naint.image-generation.Image.image3
    (naint.image-generation.MkImage
     $image1
     $image2
     $image3)) $image3)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; image_generation ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Define naint.image-generation.Gen service method
(: naint.image-generation.Gen (-> naint.image-generation.Text naint.image-generation.Image))



;; ServiceID definition of naint.philosophy-generation"
(: naint.philosophy-generation (ServiceID naint))

;; Service metadata of naint.philosophy-generation
(= (service naint.philosophy-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Philosophic Text Generation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmWRjvxokYAnBiXGb8Nk44WQEGBZPM67jFQNbtukjAfVTD"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/philosophic-text-generation"
           ; url content
           null
           ; description
           "<div>The service receives a textual seed in English and uses it as input to the neural generative model trained on the books of philosophers.</div>"
           ; short_description
           "The service receives a textual seed in English and uses it as input to the neural generative model trained on the books of philosophers.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text" (Cons "generation" (Cons "english" (Cons "philosophy" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: ptg.proto
;; Protobuf syntax: proto3
;; Protobuf package: philosophic_text_generation
;; Prefix: naint.philosophy-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.philosophy-generation.Query type
(: naint.philosophy-generation.Query Type)

;; Define naint.philosophy-generation.Query constuctor
(: naint.philosophy-generation.MkQuery
   (->
    String ; request
    naint.philosophy-generation.Query))

;; Define naint.philosophy-generation.Query access functions

;; Define naint.philosophy-generation.Query.request
(: naint.philosophy-generation.Query.request (-> naint.philosophy-generation.Query String))
(= (naint.philosophy-generation.Query.request
    (naint.philosophy-generation.MkQuery
     $request)) $request)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.philosophy-generation.Answer type
(: naint.philosophy-generation.Answer Type)

;; Define naint.philosophy-generation.Answer constuctor
(: naint.philosophy-generation.MkAnswer
   (->
    String ; answer
    naint.philosophy-generation.Answer))

;; Define naint.philosophy-generation.Answer access functions

;; Define naint.philosophy-generation.Answer.answer
(: naint.philosophy-generation.Answer.answer (-> naint.philosophy-generation.Answer String))
(= (naint.philosophy-generation.Answer.answer
    (naint.philosophy-generation.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; PTG ;;
;;;;;;;;;

;; Define naint.philosophy-generation.generate service method
(: naint.philosophy-generation.generate (-> naint.philosophy-generation.Query naint.philosophy-generation.Answer))



;; ServiceID definition of naint.text-emotions"
(: naint.text-emotions (ServiceID naint))

;; Service metadata of naint.text-emotions
(= (service naint.text-emotions)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Textual Emotion Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmdEdBynzWmGJmFUM29Hcpyq2fZCFd4qMQR25d2xmatrRh"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/textual-emotion-recognition"
           ; url content
           null
           ; description
           "<div>The service receives a text string and uses it as input to the pre-trained model. The model returns the predicted emotion of the given text.\n\nList of emotions predicted by the model:\n\"0\": \"admiration\",\n\"1\": \"amusement\",\n\"2\": \"anger\",\n\"3\": \"annoyance\",\n\"4\": \"approval\",\n\"5\": \"caring\",\n\"6\": \"confusion\",\n\"7\": \"curiosity\",\n\"8\": \"desire\",\n\"9\": \"disappointment\",\n\"10\": \"disapproval\",\n\"11\": \"disgust\",\n\"12\": \"embarrassment\",\n\"13\": \"excitement\",\n\"14\": \"fear\",\n\"15\": \"gratitude\",\n\"16\": \"grief\",\n\"17\": \"joy\",\n\"18\": \"love\",\n\"19\": \"nervousness\",\n\"20\": \"optimism\",\n\"21\": \"pride\",\n\"22\": \"realization\",\n\"23\": \"relief\",\n\"24\": \"remorse\",\n\"25\": \"sadness\",\n\"26\": \"surprise\",\n\"27\": \"neutral\"\n</div>"
           ; short_description
           "The service receives a text string and uses it as input to the pre-trained model. The model returns the predicted emotion of the given text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "recognition" (Cons "text" (Cons "english" (Cons "emotions" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: ter.proto
;; Protobuf syntax: proto3
;; Protobuf package: textual_emotion_recognition
;; Prefix: naint.text-emotions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define naint.text-emotions.Input type
(: naint.text-emotions.Input Type)

;; Define naint.text-emotions.Input constuctor
(: naint.text-emotions.MkInput
   (->
    String ; text
    naint.text-emotions.Input))

;; Define naint.text-emotions.Input access functions

;; Define naint.text-emotions.Input.text
(: naint.text-emotions.Input.text (-> naint.text-emotions.Input String))
(= (naint.text-emotions.Input.text
    (naint.text-emotions.MkInput
     $text)) $text)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define naint.text-emotions.Output type
(: naint.text-emotions.Output Type)

;; Define naint.text-emotions.Output constuctor
(: naint.text-emotions.MkOutput
   (->
    String ; result
    naint.text-emotions.Output))

;; Define naint.text-emotions.Output access functions

;; Define naint.text-emotions.Output.result
(: naint.text-emotions.Output.result (-> naint.text-emotions.Output String))
(= (naint.text-emotions.Output.result
    (naint.text-emotions.MkOutput
     $result)) $result)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; TER ;;
;;;;;;;;;

;; Define naint.text-emotions.recognize service method
(: naint.text-emotions.recognize (-> naint.text-emotions.Input naint.text-emotions.Output))



;; ServiceID definition of naint.hate-detection"
(: naint.hate-detection (ServiceID naint))

;; Service metadata of naint.hate-detection
(= (service naint.hate-detection)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Hate Speech Detection"
       ; encoding
       "proto"
       ; service_type
       "http"
       ; model_ipfs_hash
       "QmZm1iburF3w99KwQDVqWKbLb3BV8bSpF8LrRvhxQtaNeM"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/hate-speech-detection"
           ; url content
           null
           ; description
           "<div>The service outputs a label that match to the specified text.Available labels:\n·\thate;\n·\tabusing;\n·\tneutral;\n·\tspam.\n</div>"
           ; short_description
           "The service outputs a label that match to the specified text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "classification" (Cons "recognition" (Cons "detection" (Cons "text" (Cons "english" (Cons "twitter" (Cons "speech" (Cons "hate" Nil))))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: hsd.proto
;; Protobuf syntax: proto3
;; Protobuf package: hsd
;; Prefix: naint.hate-detection
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define naint.hate-detection.Input type
(: naint.hate-detection.Input Type)

;; Define naint.hate-detection.Input constuctor
(: naint.hate-detection.MkInput
   (->
    String ; value
    naint.hate-detection.Input))

;; Define naint.hate-detection.Input access functions

;; Define naint.hate-detection.Input.value
(: naint.hate-detection.Input.value (-> naint.hate-detection.Input String))
(= (naint.hate-detection.Input.value
    (naint.hate-detection.MkInput
     $value)) $value)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define naint.hate-detection.Output type
(: naint.hate-detection.Output Type)

;; Define naint.hate-detection.Output constuctor
(: naint.hate-detection.MkOutput
   (->
    String ; result
    naint.hate-detection.Output))

;; Define naint.hate-detection.Output access functions

;; Define naint.hate-detection.Output.result
(: naint.hate-detection.Output.result (-> naint.hate-detection.Output String))
(= (naint.hate-detection.Output.result
    (naint.hate-detection.MkOutput
     $result)) $result)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; HSD ;;
;;;;;;;;;

;; Define naint.hate-detection.detection service method
(: naint.hate-detection.detection (-> naint.hate-detection.Input naint.hate-detection.Output))



;; ServiceID definition of naint.super-resolution"
(: naint.super-resolution (ServiceID naint))

;; Service metadata of naint.super-resolution
(= (service naint.super-resolution)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Image Super Resolution"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmcoCPQ1gcca96W3WxKaR6FjxH12xoVTQgRLys5keNBBfX"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/super-resolution"
           ; url content
           null
           ; description
           "<div>The service takes a low-resolution image in binary format, uses it as input for a pre-trained model, and outputs the result as a higher-quality image magnified by a factor of 4.</div>"
           ; short_description
           "The service takes a low-resolution image in binary format, uses it as input for a pre-trained model, and outputs the result as a higher-quality image")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "image2image" (Cons "upscale" (Cons "image" (Cons "resolution" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: SR.proto
;; Protobuf syntax: proto3
;; Protobuf package: SR_GAN
;; Prefix: naint.super-resolution
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;
;; Q ;;
;;;;;;;

;; Define naint.super-resolution.Q type
(: naint.super-resolution.Q Type)

;; Define naint.super-resolution.Q constuctor
(: naint.super-resolution.MkQ
   (->
    Bytes ; image
    Bool ; type
    naint.super-resolution.Q))

;; Define naint.super-resolution.Q access functions

;; Define naint.super-resolution.Q.image
(: naint.super-resolution.Q.image (-> naint.super-resolution.Q Bytes))
(= (naint.super-resolution.Q.image
    (naint.super-resolution.MkQ
     $image
     $type)) $image)

;; Define naint.super-resolution.Q.type
(: naint.super-resolution.Q.type (-> naint.super-resolution.Q Bool))
(= (naint.super-resolution.Q.type
    (naint.super-resolution.MkQ
     $image
     $type)) $type)

;;;;;;;
;; A ;;
;;;;;;;

;; Define naint.super-resolution.A type
(: naint.super-resolution.A Type)

;; Define naint.super-resolution.A constuctor
(: naint.super-resolution.MkA
   (->
    Bytes ; output_img
    naint.super-resolution.A))

;; Define naint.super-resolution.A access functions

;; Define naint.super-resolution.A.output_img
(: naint.super-resolution.A.output_img (-> naint.super-resolution.A Bytes))
(= (naint.super-resolution.A.output_img
    (naint.super-resolution.MkA
     $output_img)) $output_img)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; SR_GAN ;;
;;;;;;;;;;;;

;; Define naint.super-resolution.SR service method
(: naint.super-resolution.SR (-> naint.super-resolution.Q naint.super-resolution.A))



;; ServiceID definition of naint.lyrics-generation"
(: naint.lyrics-generation (ServiceID naint))

;; Service metadata of naint.lyrics-generation
(= (service naint.lyrics-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Music Lyrics Generation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmZ9dJ5ehT3EgqXpfvq32DrP8z4ctYqcULHkZR4ydAhNzv"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/Music-Lyrics-Generation"
           ; url content
           null
           ; description
           "<div>The service receives a textual seed in English and uses it as input to the neural GPT-2 model trained to solve diverse text generation task using large-scale lyrics based dataset and outputs the generated lyrics for a given seed. The basic commonsense model generates diverse lyrics adapting to the style and content of the given text seed.</div>"
           ; short_description
           "The service receives a textual seed in English and uses it as input to the neural GPT-2 model and outputs the generated lyrics")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text" (Cons "generation" (Cons "english" (Cons "music" (Cons "lyrics" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: lyrics.proto
;; Protobuf syntax: proto3
;; Protobuf package: lyrics
;; Prefix: naint.lyrics-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.lyrics-generation.Query type
(: naint.lyrics-generation.Query Type)

;; Define naint.lyrics-generation.Query constuctor
(: naint.lyrics-generation.MkQuery
   (->
    String ; request
    naint.lyrics-generation.Query))

;; Define naint.lyrics-generation.Query access functions

;; Define naint.lyrics-generation.Query.request
(: naint.lyrics-generation.Query.request (-> naint.lyrics-generation.Query String))
(= (naint.lyrics-generation.Query.request
    (naint.lyrics-generation.MkQuery
     $request)) $request)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.lyrics-generation.Answer type
(: naint.lyrics-generation.Answer Type)

;; Define naint.lyrics-generation.Answer constuctor
(: naint.lyrics-generation.MkAnswer
   (->
    String ; answer
    naint.lyrics-generation.Answer))

;; Define naint.lyrics-generation.Answer access functions

;; Define naint.lyrics-generation.Answer.answer
(: naint.lyrics-generation.Answer.answer (-> naint.lyrics-generation.Answer String))
(= (naint.lyrics-generation.Answer.answer
    (naint.lyrics-generation.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Lyrics ;;
;;;;;;;;;;;;

;; Define naint.lyrics-generation.generate service method
(: naint.lyrics-generation.generate (-> naint.lyrics-generation.Query naint.lyrics-generation.Answer))



;; ServiceID definition of naint.speech2text-multi"
(: naint.speech2text-multi (ServiceID naint))

;; Service metadata of naint.speech2text-multi
(= (service naint.speech2text-multi)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Multilingual Speech Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmfV7JQbWpsUTKawxB7ur1J7cm9F16F78epU9dhLk8GMHP"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/multilingual-speech-recognition"
           ; url content
           null
           ; description
           "<div>Welcome to Multilingual Speech Recognition! This is a translator that will automatically translate your voice or any other speech audio track into the desired language. You can enter any phrase, sentence or dialogue for quick translation as any audio file. You do not need to specify the language spoken by the speakers. Our service will do it for you automatically! At the output, you will receive a translation into the desired language in the form of text. This service supports about 4 languages. This service supports languages: De, Fr, En, Zh.</div>"
           ; short_description
           "This is a translator that will automatically translate your voice or any other speech audio track into the desired language.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "speech2text" (Cons "recognition" (Cons "speech" (Cons "multilingual" (Cons "asr" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: M_ASR.proto
;; Protobuf syntax: proto3
;; Protobuf package: m_asr
;; Prefix: naint.speech2text-multi
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.speech2text-multi.Audio type
(: naint.speech2text-multi.Audio Type)

;; Define naint.speech2text-multi.Audio constuctor
(: naint.speech2text-multi.MkAudio
   (->
    Bytes ; data
    naint.speech2text-multi.Audio))

;; Define naint.speech2text-multi.Audio access functions

;; Define naint.speech2text-multi.Audio.data
(: naint.speech2text-multi.Audio.data (-> naint.speech2text-multi.Audio Bytes))
(= (naint.speech2text-multi.Audio.data
    (naint.speech2text-multi.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.speech2text-multi.Text type
(: naint.speech2text-multi.Text Type)

;; Define naint.speech2text-multi.Text constuctor
(: naint.speech2text-multi.MkText
   (->
    String ; text
    naint.speech2text-multi.Text))

;; Define naint.speech2text-multi.Text access functions

;; Define naint.speech2text-multi.Text.text
(: naint.speech2text-multi.Text.text (-> naint.speech2text-multi.Text String))
(= (naint.speech2text-multi.Text.text
    (naint.speech2text-multi.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;
;; M_ASR ;;
;;;;;;;;;;;

;; Define naint.speech2text-multi.s2t service method
(: naint.speech2text-multi.s2t (-> naint.speech2text-multi.Audio naint.speech2text-multi.Text))



;; ServiceID definition of naint.speech-translation"
(: naint.speech-translation (ServiceID naint))

;; Service metadata of naint.speech-translation
(= (service naint.speech-translation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Multilingual Speech Translation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "Qma6wZMwmmXZF5w2RLMqgLDm9AwV1aXM9JwWAFzg9qid1q"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/multilingual-speech-translation"
           ; url content
           null
           ; description
           "<div>Welcome to Multilingual Speech Translation! This is a translator that will automatically translate your voice or any other audio track with a speech into English. You can input any phrase, sentence or dialogue for quick translation in the form of any audio file. You do not need to specify the language that the speaker(s) speak. Our service will do it for you automatically! At the output, you will receive a translation into English in the form of text. This service supports about 150 languages, so you don't have to worry that the language in the audio track will not be recognized.</div>"
           ; short_description
           "This is a translator that will automatically translate your voice or any other audio track with a speech into English")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "translation" (Cons "nmt" (Cons "any2english" (Cons "speech2text" (Cons "recognition" (Cons "speech" (Cons "multilingual" Nil)))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: MST.proto
;; Protobuf syntax: proto3
;; Protobuf package: MST
;; Prefix: naint.speech-translation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.speech-translation.Audio type
(: naint.speech-translation.Audio Type)

;; Define naint.speech-translation.Audio constuctor
(: naint.speech-translation.MkAudio
   (->
    Bytes ; data
    naint.speech-translation.Audio))

;; Define naint.speech-translation.Audio access functions

;; Define naint.speech-translation.Audio.data
(: naint.speech-translation.Audio.data (-> naint.speech-translation.Audio Bytes))
(= (naint.speech-translation.Audio.data
    (naint.speech-translation.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.speech-translation.Text type
(: naint.speech-translation.Text Type)

;; Define naint.speech-translation.Text constuctor
(: naint.speech-translation.MkText
   (->
    String ; text
    naint.speech-translation.Text))

;; Define naint.speech-translation.Text access functions

;; Define naint.speech-translation.Text.text
(: naint.speech-translation.Text.text (-> naint.speech-translation.Text String))
(= (naint.speech-translation.Text.text
    (naint.speech-translation.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; MST ;;
;;;;;;;;;

;; Define naint.speech-translation.s2t service method
(: naint.speech-translation.s2t (-> naint.speech-translation.Audio naint.speech-translation.Text))



;; ServiceID definition of naint.spoken-language"
(: naint.spoken-language (ServiceID naint))

;; Service metadata of naint.spoken-language
(= (service naint.spoken-language)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Spoken Language Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmNzqPLu2Gecngo8K69xdMRMEj5X49RhPoXUYckR9jFb5F"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/spoken-language-recognition"
           ; url content
           null
           ; description
           "<div>Welcome to the Spoken Language Recognition Program! This is a service that automatically recognizes the language of your voice or any other audio track. You can enter a spoken phrase, sentence, or dialogue for quick speech language recognition as any audio file. At the output, you will get the recognized language as text. This service supports about 4 languages: De, Fr, En, Zh.</div>"
           ; short_description
           "This is a service that automatically recognizes the language of your voice or any other audio track.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "speechlabel" (Cons "language" (Cons "recognition" (Cons "multilingual" (Cons "voice" (Cons "speech" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: SLR.proto
;; Protobuf syntax: proto3
;; Protobuf package: slr
;; Prefix: naint.spoken-language
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.spoken-language.Audio type
(: naint.spoken-language.Audio Type)

;; Define naint.spoken-language.Audio constuctor
(: naint.spoken-language.MkAudio
   (->
    Bytes ; data
    naint.spoken-language.Audio))

;; Define naint.spoken-language.Audio access functions

;; Define naint.spoken-language.Audio.data
(: naint.spoken-language.Audio.data (-> naint.spoken-language.Audio Bytes))
(= (naint.spoken-language.Audio.data
    (naint.spoken-language.MkAudio
     $data)) $data)

;;;;;;;;;;;
;; Label ;;
;;;;;;;;;;;

;; Define naint.spoken-language.Label type
(: naint.spoken-language.Label Type)

;; Define naint.spoken-language.Label constuctor
(: naint.spoken-language.MkLabel
   (->
    String ; label
    naint.spoken-language.Label))

;; Define naint.spoken-language.Label access functions

;; Define naint.spoken-language.Label.label
(: naint.spoken-language.Label.label (-> naint.spoken-language.Label String))
(= (naint.spoken-language.Label.label
    (naint.spoken-language.MkLabel
     $label)) $label)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; SLR ;;
;;;;;;;;;

;; Define naint.spoken-language.sl2l service method
(: naint.spoken-language.sl2l (-> naint.spoken-language.Audio naint.spoken-language.Label))



;; ServiceID definition of naint.abstractive-summarisation"
(: naint.abstractive-summarisation (ServiceID naint))

;; Service metadata of naint.abstractive-summarisation
(= (service naint.abstractive-summarisation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Abstractive Summarisation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmcPeCLjUH9CE363ERu7noLuKRS7zsgTQUfpovKqYcDv8r"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/neural-abstractive-summarization"
           ; url content
           null
           ; description
           "<div>The service receives text in English as input and returns a brief summary of this text.</div>\n"
           ; short_description
           "The service receives text in English as input and returns a brief summary of this text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text2text" (Cons "summarisation" (Cons "text" (Cons "english" (Cons "nlp" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: neural_abstractive_summarisation.proto
;; Protobuf syntax: proto3
;; Protobuf package: neural_summarisation
;; Prefix: naint.abstractive-summarisation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.abstractive-summarisation.Query type
(: naint.abstractive-summarisation.Query Type)

;; Define naint.abstractive-summarisation.Query constuctor
(: naint.abstractive-summarisation.MkQuery
   (->
    String ; text
    naint.abstractive-summarisation.Query))

;; Define naint.abstractive-summarisation.Query access functions

;; Define naint.abstractive-summarisation.Query.text
(: naint.abstractive-summarisation.Query.text (-> naint.abstractive-summarisation.Query String))
(= (naint.abstractive-summarisation.Query.text
    (naint.abstractive-summarisation.MkQuery
     $text)) $text)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.abstractive-summarisation.Answer type
(: naint.abstractive-summarisation.Answer Type)

;; Define naint.abstractive-summarisation.Answer constuctor
(: naint.abstractive-summarisation.MkAnswer
   (->
    String ; summary
    naint.abstractive-summarisation.Answer))

;; Define naint.abstractive-summarisation.Answer access functions

;; Define naint.abstractive-summarisation.Answer.summary
(: naint.abstractive-summarisation.Answer.summary (-> naint.abstractive-summarisation.Answer String))
(= (naint.abstractive-summarisation.Answer.summary
    (naint.abstractive-summarisation.MkAnswer
     $summary)) $summary)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neural_summarisation ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define naint.abstractive-summarisation.neural_summarisation service method
(: naint.abstractive-summarisation.neural_summarisation (-> naint.abstractive-summarisation.Query naint.abstractive-summarisation.Answer))



;; ServiceID definition of naint.machine-translation"
(: naint.machine-translation (ServiceID naint))

;; Service metadata of naint.machine-translation
(= (service naint.machine-translation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Machine Translation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmcQBTx9qZcTVijZFZSdiesdwtwFoywvkEbtYSkF9bmxwi"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/neural-machine-translation"
           ; url content
           null
           ; description
           "<div>The service receives text in one language and returns a translation of the submitted text in another language. Translation is possible for 204 languages.\nYou can pass text or the URL of a text file. The input text or text file in the URL must contain up to 4500-5000 characters.</div>"
           ; short_description
           "The service receives text in one language and returns a translation of the submitted text in another language. Translation is possible for 204 languages. ")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "text2text" (Cons "text" (Cons "multilanguage" (Cons "translation" (Cons "nmt" (Cons "nlp" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: translate.proto
;; Protobuf syntax: proto3
;; Prefix: naint.machine-translation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define naint.machine-translation.Input type
(: naint.machine-translation.Input Type)

;; Define naint.machine-translation.Input constuctor
(: naint.machine-translation.MkInput
   (->
    String ; source_lang
    String ; target_lang
    String ; sentences_url
    naint.machine-translation.Input))

;; Define naint.machine-translation.Input access functions

;; Define naint.machine-translation.Input.source_lang
(: naint.machine-translation.Input.source_lang (-> naint.machine-translation.Input String))
(= (naint.machine-translation.Input.source_lang
    (naint.machine-translation.MkInput
     $source_lang
     $target_lang
     $sentences_url)) $source_lang)

;; Define naint.machine-translation.Input.target_lang
(: naint.machine-translation.Input.target_lang (-> naint.machine-translation.Input String))
(= (naint.machine-translation.Input.target_lang
    (naint.machine-translation.MkInput
     $source_lang
     $target_lang
     $sentences_url)) $target_lang)

;; Define naint.machine-translation.Input.sentences_url
(: naint.machine-translation.Input.sentences_url (-> naint.machine-translation.Input String))
(= (naint.machine-translation.Input.sentences_url
    (naint.machine-translation.MkInput
     $source_lang
     $target_lang
     $sentences_url)) $sentences_url)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define naint.machine-translation.Output type
(: naint.machine-translation.Output Type)

;; Define naint.machine-translation.Output constuctor
(: naint.machine-translation.MkOutput
   (->
    String ; translation
    naint.machine-translation.Output))

;; Define naint.machine-translation.Output access functions

;; Define naint.machine-translation.Output.translation
(: naint.machine-translation.Output.translation (-> naint.machine-translation.Output String))
(= (naint.machine-translation.Output.translation
    (naint.machine-translation.MkOutput
     $translation)) $translation)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; RomanceTranslator ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define naint.machine-translation.translate service method
(: naint.machine-translation.translate (-> naint.machine-translation.Input naint.machine-translation.Output))



;; ServiceID definition of naint.code-generation"
(: naint.code-generation (ServiceID naint))

;; Service metadata of naint.code-generation
(= (service naint.code-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Automatic Code Generation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmRujcJgQKW3YVwXqSHcfVb9QPKCZbtLFMHRhPM2gyfpHj"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/automatic-code-generation"
           ; url content
           null
           ; description
           "<div>The service receives a textual seed in English and thereafter generates code based on this in one of the programming languages. You can use this model for several tasks such as: code summarization, code generation, code translation, code refinement, code defect detection, code clone detection.<div>\n"
           ; short_description
           "The service receives a textual seed in English and thereafter generates code based on this in one of the programming languages.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "programming" (Cons "code" (Cons "generation" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: acg_proto.proto
;; Protobuf syntax: proto3
;; Protobuf package: code_generation
;; Prefix: naint.code-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.code-generation.Query type
(: naint.code-generation.Query Type)

;; Define naint.code-generation.Query constuctor
(: naint.code-generation.MkQuery
   (->
    String ; request
    naint.code-generation.Query))

;; Define naint.code-generation.Query access functions

;; Define naint.code-generation.Query.request
(: naint.code-generation.Query.request (-> naint.code-generation.Query String))
(= (naint.code-generation.Query.request
    (naint.code-generation.MkQuery
     $request)) $request)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.code-generation.Answer type
(: naint.code-generation.Answer Type)

;; Define naint.code-generation.Answer constuctor
(: naint.code-generation.MkAnswer
   (->
    String ; answer
    naint.code-generation.Answer))

;; Define naint.code-generation.Answer access functions

;; Define naint.code-generation.Answer.answer
(: naint.code-generation.Answer.answer (-> naint.code-generation.Answer String))
(= (naint.code-generation.Answer.answer
    (naint.code-generation.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; CodeGen ;;
;;;;;;;;;;;;;

;; Define naint.code-generation.generate service method
(: naint.code-generation.generate (-> naint.code-generation.Query naint.code-generation.Answer))



;; ServiceID definition of naint.speaker-separation"
(: naint.speaker-separation (ServiceID naint))

;; Service metadata of naint.speaker-separation
(= (service naint.speaker-separation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Multi Speaker Separation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmPaKMPYof9VNywotG1TWKCDLJxAMa9TCT7JfBcKsYwmjE"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/separate-speech"
           ; url content
           null
           ; description
           "<div>This service allows you to share up to two people who can talk at the same time. As input, the service receives a wav audio file in which up to two people speak. At the output you will receive two audio files in which up to two people will be stripped\nThe input audio file size is limited to 4Mb, in practice the optimal duration of the processed audio track should be no more than 90 seconds for 320 kbps audio. \n<div>"
           ; short_description
           "This service allows you to share up to two people who can talk at the same time. ")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "separation" (Cons "diarisation" (Cons "speech" (Cons "multispeaker" (Cons "speaker" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: SS_proto.proto
;; Protobuf syntax: proto3
;; Protobuf package: ss
;; Prefix: naint.speaker-separation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.speaker-separation.Audio type
(: naint.speaker-separation.Audio Type)

;; Define naint.speaker-separation.Audio constuctor
(: naint.speaker-separation.MkAudio
   (->
    Bytes ; data
    naint.speaker-separation.Audio))

;; Define naint.speaker-separation.Audio access functions

;; Define naint.speaker-separation.Audio.data
(: naint.speaker-separation.Audio.data (-> naint.speaker-separation.Audio Bytes))
(= (naint.speaker-separation.Audio.data
    (naint.speaker-separation.MkAudio
     $data)) $data)

;;;;;;;;;;;;;;;;;;
;; Output_Audio ;;
;;;;;;;;;;;;;;;;;;

;; Define naint.speaker-separation.Output_Audio type
(: naint.speaker-separation.Output_Audio Type)

;; Define naint.speaker-separation.Output_Audio constuctor
(: naint.speaker-separation.MkOutput_Audio
   (->
    String ; first_speaker
    String ; second_speaker
    naint.speaker-separation.Output_Audio))

;; Define naint.speaker-separation.Output_Audio access functions

;; Define naint.speaker-separation.Output_Audio.first_speaker
(: naint.speaker-separation.Output_Audio.first_speaker (-> naint.speaker-separation.Output_Audio String))
(= (naint.speaker-separation.Output_Audio.first_speaker
    (naint.speaker-separation.MkOutput_Audio
     $first_speaker
     $second_speaker)) $first_speaker)

;; Define naint.speaker-separation.Output_Audio.second_speaker
(: naint.speaker-separation.Output_Audio.second_speaker (-> naint.speaker-separation.Output_Audio String))
(= (naint.speaker-separation.Output_Audio.second_speaker
    (naint.speaker-separation.MkOutput_Audio
     $first_speaker
     $second_speaker)) $second_speaker)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;
;; SS ;;
;;;;;;;;

;; Define naint.speaker-separation.separate service method
(: naint.speaker-separation.separate (-> naint.speaker-separation.Audio naint.speaker-separation.Output_Audio))



;; ServiceID definition of naint.text-generation"
(: naint.text-generation (ServiceID naint))

;; Service metadata of naint.text-generation
(= (service naint.text-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Neural Text Generation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmU1e5AtV5nFQdC7MTyyqEJCEbWSpmXEYxwugy9hoJcMit"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/neural-text-generation"
           ; url content
           null
           ; description
           "<div>The service receives a textual seed in English and uses it as input to the neural generative model trained to solve diverse text generation task using large-scale Reddit dump and outputs the generated text for a given seed. The basic commonsense model generates diverse text adapting to the style and content of the given text seed. The service also provides the models representing more than 40 public personalities.<div>"
           ; short_description
           "The service receives a textual seed in English and uses it as input to the neural generative model trained to solve diverse text generation task")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "generation" (Cons "public-persons" (Cons "twitter" (Cons "text" (Cons "english" (Cons "nlp" Nil))))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: ntg_proto.proto
;; Protobuf syntax: proto3
;; Protobuf package: gen_gpt_2
;; Prefix: naint.text-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.text-generation.Query type
(: naint.text-generation.Query Type)

;; Define naint.text-generation.Query constuctor
(: naint.text-generation.MkQuery
   (->
    String ; start_text
    String ; run_name
    Float ; temperature
    Int32 ; top_k
    Int32 ; length
    naint.text-generation.Query))

;; Define naint.text-generation.Query access functions

;; Define naint.text-generation.Query.start_text
(: naint.text-generation.Query.start_text (-> naint.text-generation.Query String))
(= (naint.text-generation.Query.start_text
    (naint.text-generation.MkQuery
     $start_text
     $run_name
     $temperature
     $top_k
     $length)) $start_text)

;; Define naint.text-generation.Query.run_name
(: naint.text-generation.Query.run_name (-> naint.text-generation.Query String))
(= (naint.text-generation.Query.run_name
    (naint.text-generation.MkQuery
     $start_text
     $run_name
     $temperature
     $top_k
     $length)) $run_name)

;; Define naint.text-generation.Query.temperature
(: naint.text-generation.Query.temperature (-> naint.text-generation.Query Float))
(= (naint.text-generation.Query.temperature
    (naint.text-generation.MkQuery
     $start_text
     $run_name
     $temperature
     $top_k
     $length)) $temperature)

;; Define naint.text-generation.Query.top_k
(: naint.text-generation.Query.top_k (-> naint.text-generation.Query Int32))
(= (naint.text-generation.Query.top_k
    (naint.text-generation.MkQuery
     $start_text
     $run_name
     $temperature
     $top_k
     $length)) $top_k)

;; Define naint.text-generation.Query.length
(: naint.text-generation.Query.length (-> naint.text-generation.Query Int32))
(= (naint.text-generation.Query.length
    (naint.text-generation.MkQuery
     $start_text
     $run_name
     $temperature
     $top_k
     $length)) $length)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.text-generation.Answer type
(: naint.text-generation.Answer Type)

;; Define naint.text-generation.Answer constuctor
(: naint.text-generation.MkAnswer
   (->
    String ; answer
    naint.text-generation.Answer))

;; Define naint.text-generation.Answer access functions

;; Define naint.text-generation.Answer.answer
(: naint.text-generation.Answer.answer (-> naint.text-generation.Answer String))
(= (naint.text-generation.Answer.answer
    (naint.text-generation.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; GENGPT2 ;;
;;;;;;;;;;;;;

;; Define naint.text-generation.gen_gpt_2 service method
(: naint.text-generation.gen_gpt_2 (-> naint.text-generation.Query naint.text-generation.Answer))



;; ServiceID definition of naint.grammar-correction"
(: naint.grammar-correction (ServiceID naint))

;; Service metadata of naint.grammar-correction
(= (service naint.grammar-correction)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Neural Grammar Correction"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmYsmaCHbwKMBiFRJyB8zrxtYhsc6RJcMgiWxagwzM8e88"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/neural-grammar-correction"
           ; url content
           null
           ; description
           "<div>The service receives the source text, and then gives the grammatically correct text, using machine learning methods, which try to correct potentially grammatically incorrect text and semantically does not change the text/information that is grammatically correct.<div>\n"
           ; short_description
           "The service receives the source text, and then gives the grammatically correct text.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "correction" (Cons "grammar" (Cons "text" (Cons "nlp" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: ngc_proto.proto
;; Protobuf syntax: proto3
;; Protobuf package: neural_grammar_correction
;; Prefix: naint.grammar-correction
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define naint.grammar-correction.Input type
(: naint.grammar-correction.Input Type)

;; Define naint.grammar-correction.Input constuctor
(: naint.grammar-correction.MkInput
   (->
    String ; sentences
    naint.grammar-correction.Input))

;; Define naint.grammar-correction.Input access functions

;; Define naint.grammar-correction.Input.sentences
(: naint.grammar-correction.Input.sentences (-> naint.grammar-correction.Input String))
(= (naint.grammar-correction.Input.sentences
    (naint.grammar-correction.MkInput
     $sentences)) $sentences)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define naint.grammar-correction.Output type
(: naint.grammar-correction.Output Type)

;; Define naint.grammar-correction.Output constuctor
(: naint.grammar-correction.MkOutput
   (->
    String ; results
    naint.grammar-correction.Output))

;; Define naint.grammar-correction.Output access functions

;; Define naint.grammar-correction.Output.results
(: naint.grammar-correction.Output.results (-> naint.grammar-correction.Output String))
(= (naint.grammar-correction.Output.results
    (naint.grammar-correction.MkOutput
     $results)) $results)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; Corrector ;;
;;;;;;;;;;;;;;;

;; Define naint.grammar-correction.correct service method
(: naint.grammar-correction.correct (-> naint.grammar-correction.Input naint.grammar-correction.Output))



;; ServiceID definition of naint.poetic-generation"
(: naint.poetic-generation (ServiceID naint))

;; Service metadata of naint.poetic-generation
(= (service naint.poetic-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Poetic Text Generation"
       ; encoding
       "proto"
       ; service_type
       "http"
       ; model_ipfs_hash
       "QmbLMdc3A6a1EnEzqa9cMJHk2g5ULrAAmuHTnR25v4zpbL"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/poetic-text-generation/blob/main/README.md"
           ; url content
           null
           ; description
           "<div>The service receives a textual seed in English and uses it as input to the neural model trained to solve diverse text generation task using large-scale poetic text based dataset and outputs the generated poetic text for a given seed. The basic commonsense model generates diverse poetic text adapting to the style and content of the given text seed.<div>\n"
           ; short_description
           "The service receives a textual seed in English and outputs the generated poetic text for a given seed.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "english" (Cons "poetic" (Cons "generation" (Cons "nlp" Nil))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: poetic_proto.proto
;; Protobuf syntax: proto3
;; Protobuf package: poetic
;; Prefix: naint.poetic-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.poetic-generation.Query type
(: naint.poetic-generation.Query Type)

;; Define naint.poetic-generation.Query constuctor
(: naint.poetic-generation.MkQuery
   (->
    String ; request
    naint.poetic-generation.Query))

;; Define naint.poetic-generation.Query access functions

;; Define naint.poetic-generation.Query.request
(: naint.poetic-generation.Query.request (-> naint.poetic-generation.Query String))
(= (naint.poetic-generation.Query.request
    (naint.poetic-generation.MkQuery
     $request)) $request)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.poetic-generation.Answer type
(: naint.poetic-generation.Answer Type)

;; Define naint.poetic-generation.Answer constuctor
(: naint.poetic-generation.MkAnswer
   (->
    String ; answer
    naint.poetic-generation.Answer))

;; Define naint.poetic-generation.Answer access functions

;; Define naint.poetic-generation.Answer.answer
(: naint.poetic-generation.Answer.answer (-> naint.poetic-generation.Answer String))
(= (naint.poetic-generation.Answer.answer
    (naint.poetic-generation.MkAnswer
     $answer)) $answer)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Poetic ;;
;;;;;;;;;;;;

;; Define naint.poetic-generation.generate service method
(: naint.poetic-generation.generate (-> naint.poetic-generation.Query naint.poetic-generation.Answer))



;; ServiceID definition of naint.speech2text-ru"
(: naint.speech2text-ru (ServiceID naint))

;; Service metadata of naint.speech2text-ru
(= (service naint.speech2text-ru)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Russian Speech Recognition"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmezqjKEKJztDygetsp2VYC86qa4zBBc4XxyJLhd9RQBgD"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/iktina/russian-speech-recognition"
           ; url content
           null
           ; description
           "<div>The service performs speech recognition using machine learning techniques. The service receives the audio file in binary format and outputs the text string resulting from audio recognition.</div>"
           ; short_description
           "The service performs speech recognition using machine learning techniques.")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "speech" (Cons "speech2text" (Cons "russianasr" (Cons "recognition" (Cons "asr" Nil)))))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: Speech2text_proto.proto
;; Protobuf syntax: proto3
;; Protobuf package: ru_asr
;; Prefix: naint.speech2text-ru
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define naint.speech2text-ru.Audio type
(: naint.speech2text-ru.Audio Type)

;; Define naint.speech2text-ru.Audio constuctor
(: naint.speech2text-ru.MkAudio
   (->
    Bytes ; data
    naint.speech2text-ru.Audio))

;; Define naint.speech2text-ru.Audio access functions

;; Define naint.speech2text-ru.Audio.data
(: naint.speech2text-ru.Audio.data (-> naint.speech2text-ru.Audio Bytes))
(= (naint.speech2text-ru.Audio.data
    (naint.speech2text-ru.MkAudio
     $data)) $data)

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define naint.speech2text-ru.Text type
(: naint.speech2text-ru.Text Type)

;; Define naint.speech2text-ru.Text constuctor
(: naint.speech2text-ru.MkText
   (->
    String ; text
    naint.speech2text-ru.Text))

;; Define naint.speech2text-ru.Text access functions

;; Define naint.speech2text-ru.Text.text
(: naint.speech2text-ru.Text.text (-> naint.speech2text-ru.Text String))
(= (naint.speech2text-ru.Text.text
    (naint.speech2text-ru.MkText
     $text)) $text)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; ru_asr ;;
;;;;;;;;;;;;

;; Define naint.speech2text-ru.s2t service method
(: naint.speech2text-ru.s2t (-> naint.speech2text-ru.Audio naint.speech2text-ru.Text))




;; OrganizationID definition of 10ef4aa2df9d4bc9952b2a04c6a09726
(: 10ef4aa2df9d4bc9952b2a04c6a09726 OrganizationID)

;; Organization metadata of 10ef4aa2df9d4bc9952b2a04c6a09726
(= (organization 10ef4aa2df9d4bc9952b2a04c6a09726)
   ; Organization
   (MkOrganization
       ; org_name
       "LLaMaHost"
       ; org_id
       "10ef4aa2df9d4bc9952b2a04c6a09726"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           "https://notavalidurl.kek"
           ; url content
           null
           ; description
           "Long description"
           ; short_description
           "Short description")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of 10ef4aa2df9d4bc9952b2a04c6a09726


;; ServiceID definition of 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation"
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation (ServiceID 10ef4aa2df9d4bc9952b2a04c6a09726))

;; Service metadata of 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation
(= (service 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "Text generation"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmZ6Zy5BS6LtUdnno98UpYpF7t4JNXgEo5iNDcFGD4hNeX"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://github.com/facebookresearch/llama"
           ; url content
           null
           ; description
           "Service is designed to generate text with help of generative LLM(Large Language Model) using user prompt as initial input. Service is primarily intended for prompt in English, but also accepts prompts in other languages with Latin or Cyrillic alphabets."
           ; short_description
           "Service generates text with help of generative language model basing on prompt input")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "nlp" (Cons "text" (Cons "generation" Nil)))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: llama.proto
;; Protobuf syntax: proto3
;; Protobuf package: llama_generation
;; Prefix: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query type
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query Type)

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query constuctor
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.MkQuery
   (->
    String ; prompt
    Int32 ; generation_length
    Float ; top_p
    Float ; temperature
    10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query))

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query access functions

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.prompt
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.prompt (-> 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query String))
(= (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.prompt
    (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.MkQuery
     $prompt
     $generation_length
     $top_p
     $temperature)) $prompt)

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.generation_length
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.generation_length (-> 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query Int32))
(= (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.generation_length
    (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.MkQuery
     $prompt
     $generation_length
     $top_p
     $temperature)) $generation_length)

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.top_p
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.top_p (-> 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query Float))
(= (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.top_p
    (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.MkQuery
     $prompt
     $generation_length
     $top_p
     $temperature)) $top_p)

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.temperature
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.temperature (-> 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query Float))
(= (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query.temperature
    (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.MkQuery
     $prompt
     $generation_length
     $top_p
     $temperature)) $temperature)

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer type
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer Type)

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer constuctor
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.MkAnswer
   (->
    String ; generation_result
    10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer))

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer access functions

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer.generation_result
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer.generation_result (-> 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer String))
(= (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer.generation_result
    (10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.MkAnswer
     $generation_result)) $generation_result)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;
;; LLaMa ;;
;;;;;;;;;;;

;; Define 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.generate service method
(: 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.generate (-> 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Query 10ef4aa2df9d4bc9952b2a04c6a09726.text-generation.Answer))




;; OrganizationID definition of EnigmaAi
(: EnigmaAi OrganizationID)

;; Organization metadata of EnigmaAi
(= (organization EnigmaAi)
   ; Organization
   (MkOrganization
       ; org_name
       "Enigma Multi Activities Co.Ltd."
       ; org_id
       "EnigmaAi"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "enigma-ai.com"
           ; url content
           null
           ; description
           "We specialize in creating customized chatbots that can automate customer service, sales, marketing, and more. Our customized chatbots can answer customer inquiries, provide product information, process orders, and automate internal processes, saving time and money by freeing up staff to focus on more important tasks. With our tailored chatbots, we can help businesses improve customer service by providing quick and accurate responses to customer inquiries. Our team of experts will work with you to create a chatbot that is specifically tailored to your business operations, helping to automate many of your processes and save valuable time and resources.\n\nOur platform offers a unique \"one to many\" feature through our customized chatbot builder, enabling you to communicate with customers across multiple channels in a single interface. The intuitive and customizable chatbot allows you to tailor conversations to fit your customers' specific needs. You can quickly respond to inquiries, provide support, and initiate s"
           ; short_description
           "We offer our customers an innovative and user-friendly platform for omnichannel communications.")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of EnigmaAi


;; ServiceID definition of EnigmaAi.similarityAI"
(: EnigmaAi.similarityAI (ServiceID EnigmaAi))

;; Service metadata of EnigmaAi.similarityAI
(= (service EnigmaAi.similarityAI)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "SimilarityAI"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUJN3pZH8pzNmnZgbbDdQ7HVrX5BC1HB1KjAvit4KSYVm"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "enigma-ai.com"
           ; url content
           null
           ; description
           "The main goal of this service is to allow users to query a specific sentence from a group of sentences and then return the group with the highest similarity using semantic similarity search, this semantic similarity search is tailored for the data of each user by training the model on his/her domain-specific data.\n\nYou can create and use this service in two steps, first Train the model on your data, here you supply a link to a CSV file (the link should contain .csv extension) that contains two columns \"question\" and \"id\", the question column contains the questions that you want to query from, and the id column contains the group to which this question belongs, you should also specify a name for the endpoint to which the model will be deployed (only characters and digits all in small letter format), you then wait about 60 mins until the model is deployed after the endpoint is deployed you can send a request using the endpoint name with the sentence that you want to get the most similar group to, this will retu"
           ; short_description
           "Semantic Similarity query")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "nlp" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: enigma.proto
;; Protobuf syntax: proto3
;; Prefix: EnigmaAi.similarityAI
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; HelloRequest ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.HelloRequest type
(: EnigmaAi.similarityAI.HelloRequest Type)

;; Define EnigmaAi.similarityAI.HelloRequest constuctor
(: EnigmaAi.similarityAI.MkHelloRequest
   (->
    EnigmaAi.similarityAI.HelloRequest))

;; Define EnigmaAi.similarityAI.HelloRequest access functions

;;;;;;;;;;;;;;;;;;;;
;; StringResponse ;;
;;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.StringResponse type
(: EnigmaAi.similarityAI.StringResponse Type)

;; Define EnigmaAi.similarityAI.StringResponse constuctor
(: EnigmaAi.similarityAI.MkStringResponse
   (->
    String ; message
    EnigmaAi.similarityAI.StringResponse))

;; Define EnigmaAi.similarityAI.StringResponse access functions

;; Define EnigmaAi.similarityAI.StringResponse.message
(: EnigmaAi.similarityAI.StringResponse.message (-> EnigmaAi.similarityAI.StringResponse String))
(= (EnigmaAi.similarityAI.StringResponse.message
    (EnigmaAi.similarityAI.MkStringResponse
     $message)) $message)

;;;;;;;;;;;;;;;;;;
;; FileResponse ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.FileResponse type
(: EnigmaAi.similarityAI.FileResponse Type)

;; Define EnigmaAi.similarityAI.FileResponse constuctor
(: EnigmaAi.similarityAI.MkFileResponse
   (->
    Bytes ; chunk_data
    EnigmaAi.similarityAI.FileResponse))

;; Define EnigmaAi.similarityAI.FileResponse access functions

;; Define EnigmaAi.similarityAI.FileResponse.chunk_data
(: EnigmaAi.similarityAI.FileResponse.chunk_data (-> EnigmaAi.similarityAI.FileResponse Bytes))
(= (EnigmaAi.similarityAI.FileResponse.chunk_data
    (EnigmaAi.similarityAI.MkFileResponse
     $chunk_data)) $chunk_data)

;;;;;;;;;;;;;;;;;;;
;; InvokeRequest ;;
;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.InvokeRequest type
(: EnigmaAi.similarityAI.InvokeRequest Type)

;; Define EnigmaAi.similarityAI.InvokeRequest constuctor
(: EnigmaAi.similarityAI.MkInvokeRequest
   (->
    String ; endpoint_name
    String ; sentence
    EnigmaAi.similarityAI.InvokeRequest))

;; Define EnigmaAi.similarityAI.InvokeRequest access functions

;; Define EnigmaAi.similarityAI.InvokeRequest.endpoint_name
(: EnigmaAi.similarityAI.InvokeRequest.endpoint_name (-> EnigmaAi.similarityAI.InvokeRequest String))
(= (EnigmaAi.similarityAI.InvokeRequest.endpoint_name
    (EnigmaAi.similarityAI.MkInvokeRequest
     $endpoint_name
     $sentence)) $endpoint_name)

;; Define EnigmaAi.similarityAI.InvokeRequest.sentence
(: EnigmaAi.similarityAI.InvokeRequest.sentence (-> EnigmaAi.similarityAI.InvokeRequest String))
(= (EnigmaAi.similarityAI.InvokeRequest.sentence
    (EnigmaAi.similarityAI.MkInvokeRequest
     $endpoint_name
     $sentence)) $sentence)

;;;;;;;;;;;;;;
;; MetaData ;;
;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.MetaData type
(: EnigmaAi.similarityAI.MetaData Type)

;; Define EnigmaAi.similarityAI.MetaData constuctor
(: EnigmaAi.similarityAI.MkMetaData
   (->
    String ; filename
    String ; extension
    EnigmaAi.similarityAI.MetaData))

;; Define EnigmaAi.similarityAI.MetaData access functions

;; Define EnigmaAi.similarityAI.MetaData.filename
(: EnigmaAi.similarityAI.MetaData.filename (-> EnigmaAi.similarityAI.MetaData String))
(= (EnigmaAi.similarityAI.MetaData.filename
    (EnigmaAi.similarityAI.MkMetaData
     $filename
     $extension)) $filename)

;; Define EnigmaAi.similarityAI.MetaData.extension
(: EnigmaAi.similarityAI.MetaData.extension (-> EnigmaAi.similarityAI.MetaData String))
(= (EnigmaAi.similarityAI.MetaData.extension
    (EnigmaAi.similarityAI.MkMetaData
     $filename
     $extension)) $extension)

;;;;;;;;;;;;;;;;;;
;; EndpointData ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.EndpointData type
(: EnigmaAi.similarityAI.EndpointData Type)

;; Define EnigmaAi.similarityAI.EndpointData constuctor
(: EnigmaAi.similarityAI.MkEndpointData
   (->
    String ; endpoint_name
    EnigmaAi.similarityAI.EndpointData))

;; Define EnigmaAi.similarityAI.EndpointData access functions

;; Define EnigmaAi.similarityAI.EndpointData.endpoint_name
(: EnigmaAi.similarityAI.EndpointData.endpoint_name (-> EnigmaAi.similarityAI.EndpointData String))
(= (EnigmaAi.similarityAI.EndpointData.endpoint_name
    (EnigmaAi.similarityAI.MkEndpointData
     $endpoint_name)) $endpoint_name)

;;;;;;;;;;;;;;;;;;;;;;;
;; UploadFileRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.UploadFileRequest type
(: EnigmaAi.similarityAI.UploadFileRequest Type)

;; Define EnigmaAi.similarityAI.UploadFileRequest constuctor
(: EnigmaAi.similarityAI.MkUploadFileRequest
   (->
    EnigmaAi.similarityAI.MetaData ; metadata
    EnigmaAi.similarityAI.EndpointData ; endpoint_data
    Bytes ; chunk_data
    EnigmaAi.similarityAI.UploadFileRequest))

;; Define EnigmaAi.similarityAI.UploadFileRequest access functions

;; Define EnigmaAi.similarityAI.UploadFileRequest.metadata
(: EnigmaAi.similarityAI.UploadFileRequest.metadata (-> EnigmaAi.similarityAI.UploadFileRequest EnigmaAi.similarityAI.MetaData))
(= (EnigmaAi.similarityAI.UploadFileRequest.metadata
    (EnigmaAi.similarityAI.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $metadata)

;; Define EnigmaAi.similarityAI.UploadFileRequest.endpoint_data
(: EnigmaAi.similarityAI.UploadFileRequest.endpoint_data (-> EnigmaAi.similarityAI.UploadFileRequest EnigmaAi.similarityAI.EndpointData))
(= (EnigmaAi.similarityAI.UploadFileRequest.endpoint_data
    (EnigmaAi.similarityAI.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $endpoint_data)

;; Define EnigmaAi.similarityAI.UploadFileRequest.chunk_data
(: EnigmaAi.similarityAI.UploadFileRequest.chunk_data (-> EnigmaAi.similarityAI.UploadFileRequest Bytes))
(= (EnigmaAi.similarityAI.UploadFileRequest.chunk_data
    (EnigmaAi.similarityAI.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $chunk_data)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Enigma ;;
;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI.SayHello service method
(: EnigmaAi.similarityAI.SayHello (-> EnigmaAi.similarityAI.HelloRequest EnigmaAi.similarityAI.StringResponse))

;; Define EnigmaAi.similarityAI.TrainModel service method
(: EnigmaAi.similarityAI.TrainModel (-> EnigmaAi.similarityAI.UploadFileRequest EnigmaAi.similarityAI.StringResponse))

;; Define EnigmaAi.similarityAI.InvokeModel service method
(: EnigmaAi.similarityAI.InvokeModel (-> EnigmaAi.similarityAI.InvokeRequest EnigmaAi.similarityAI.StringResponse))



;; ServiceID definition of EnigmaAi.SemanticSimilarityQuery"
(: EnigmaAi.SemanticSimilarityQuery (ServiceID EnigmaAi))

;; Service metadata of EnigmaAi.SemanticSimilarityQuery
(= (service EnigmaAi.SemanticSimilarityQuery)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "SimilarityAI"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUJN3pZH8pzNmnZgbbDdQ7HVrX5BC1HB1KjAvit4KSYVm"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "enigma-ai.com"
           ; url content
           null
           ; description
           "The main goal of this service is to allow users to query a specific sentence from a group of sentences and then return the group with the highest similarity using semantic similarity search, this semantic similarity search is tailored for the data of each user by training the model on his/her domain-specific data.\n\nYou can create and use this service in two steps, first Train the model on your data, here you supply a link to a CSV file (the link should contain .csv extension) that contains two columns \"question\" and \"id\", the question column contains the questions that you want to query from, and the id column contains the group to which this question belongs, you should also specify a name for the endpoint to which the model will be deployed (only characters and digits all in small letter format), you then wait about 60 mins until the model is deployed after the endpoint is deployed you can send a request using the endpoint name with the sentence that you want to get the most similar group to, this will retu"
           ; short_description
           "Semantic Similarity query")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "llm" (Cons "nlp" Nil))
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: enigma.proto
;; Protobuf syntax: proto3
;; Prefix: EnigmaAi.SemanticSimilarityQuery
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; HelloRequest ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.HelloRequest type
(: EnigmaAi.SemanticSimilarityQuery.HelloRequest Type)

;; Define EnigmaAi.SemanticSimilarityQuery.HelloRequest constuctor
(: EnigmaAi.SemanticSimilarityQuery.MkHelloRequest
   (->
    EnigmaAi.SemanticSimilarityQuery.HelloRequest))

;; Define EnigmaAi.SemanticSimilarityQuery.HelloRequest access functions

;;;;;;;;;;;;;;;;;;;;
;; StringResponse ;;
;;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.StringResponse type
(: EnigmaAi.SemanticSimilarityQuery.StringResponse Type)

;; Define EnigmaAi.SemanticSimilarityQuery.StringResponse constuctor
(: EnigmaAi.SemanticSimilarityQuery.MkStringResponse
   (->
    String ; message
    EnigmaAi.SemanticSimilarityQuery.StringResponse))

;; Define EnigmaAi.SemanticSimilarityQuery.StringResponse access functions

;; Define EnigmaAi.SemanticSimilarityQuery.StringResponse.message
(: EnigmaAi.SemanticSimilarityQuery.StringResponse.message (-> EnigmaAi.SemanticSimilarityQuery.StringResponse String))
(= (EnigmaAi.SemanticSimilarityQuery.StringResponse.message
    (EnigmaAi.SemanticSimilarityQuery.MkStringResponse
     $message)) $message)

;;;;;;;;;;;;;;;;;;
;; FileResponse ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.FileResponse type
(: EnigmaAi.SemanticSimilarityQuery.FileResponse Type)

;; Define EnigmaAi.SemanticSimilarityQuery.FileResponse constuctor
(: EnigmaAi.SemanticSimilarityQuery.MkFileResponse
   (->
    Bytes ; chunk_data
    EnigmaAi.SemanticSimilarityQuery.FileResponse))

;; Define EnigmaAi.SemanticSimilarityQuery.FileResponse access functions

;; Define EnigmaAi.SemanticSimilarityQuery.FileResponse.chunk_data
(: EnigmaAi.SemanticSimilarityQuery.FileResponse.chunk_data (-> EnigmaAi.SemanticSimilarityQuery.FileResponse Bytes))
(= (EnigmaAi.SemanticSimilarityQuery.FileResponse.chunk_data
    (EnigmaAi.SemanticSimilarityQuery.MkFileResponse
     $chunk_data)) $chunk_data)

;;;;;;;;;;;;;;;;;;;
;; InvokeRequest ;;
;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.InvokeRequest type
(: EnigmaAi.SemanticSimilarityQuery.InvokeRequest Type)

;; Define EnigmaAi.SemanticSimilarityQuery.InvokeRequest constuctor
(: EnigmaAi.SemanticSimilarityQuery.MkInvokeRequest
   (->
    String ; endpoint_name
    String ; sentence
    EnigmaAi.SemanticSimilarityQuery.InvokeRequest))

;; Define EnigmaAi.SemanticSimilarityQuery.InvokeRequest access functions

;; Define EnigmaAi.SemanticSimilarityQuery.InvokeRequest.endpoint_name
(: EnigmaAi.SemanticSimilarityQuery.InvokeRequest.endpoint_name (-> EnigmaAi.SemanticSimilarityQuery.InvokeRequest String))
(= (EnigmaAi.SemanticSimilarityQuery.InvokeRequest.endpoint_name
    (EnigmaAi.SemanticSimilarityQuery.MkInvokeRequest
     $endpoint_name
     $sentence)) $endpoint_name)

;; Define EnigmaAi.SemanticSimilarityQuery.InvokeRequest.sentence
(: EnigmaAi.SemanticSimilarityQuery.InvokeRequest.sentence (-> EnigmaAi.SemanticSimilarityQuery.InvokeRequest String))
(= (EnigmaAi.SemanticSimilarityQuery.InvokeRequest.sentence
    (EnigmaAi.SemanticSimilarityQuery.MkInvokeRequest
     $endpoint_name
     $sentence)) $sentence)

;;;;;;;;;;;;;;
;; MetaData ;;
;;;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.MetaData type
(: EnigmaAi.SemanticSimilarityQuery.MetaData Type)

;; Define EnigmaAi.SemanticSimilarityQuery.MetaData constuctor
(: EnigmaAi.SemanticSimilarityQuery.MkMetaData
   (->
    String ; filename
    String ; extension
    EnigmaAi.SemanticSimilarityQuery.MetaData))

;; Define EnigmaAi.SemanticSimilarityQuery.MetaData access functions

;; Define EnigmaAi.SemanticSimilarityQuery.MetaData.filename
(: EnigmaAi.SemanticSimilarityQuery.MetaData.filename (-> EnigmaAi.SemanticSimilarityQuery.MetaData String))
(= (EnigmaAi.SemanticSimilarityQuery.MetaData.filename
    (EnigmaAi.SemanticSimilarityQuery.MkMetaData
     $filename
     $extension)) $filename)

;; Define EnigmaAi.SemanticSimilarityQuery.MetaData.extension
(: EnigmaAi.SemanticSimilarityQuery.MetaData.extension (-> EnigmaAi.SemanticSimilarityQuery.MetaData String))
(= (EnigmaAi.SemanticSimilarityQuery.MetaData.extension
    (EnigmaAi.SemanticSimilarityQuery.MkMetaData
     $filename
     $extension)) $extension)

;;;;;;;;;;;;;;;;;;
;; EndpointData ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.EndpointData type
(: EnigmaAi.SemanticSimilarityQuery.EndpointData Type)

;; Define EnigmaAi.SemanticSimilarityQuery.EndpointData constuctor
(: EnigmaAi.SemanticSimilarityQuery.MkEndpointData
   (->
    String ; endpoint_name
    EnigmaAi.SemanticSimilarityQuery.EndpointData))

;; Define EnigmaAi.SemanticSimilarityQuery.EndpointData access functions

;; Define EnigmaAi.SemanticSimilarityQuery.EndpointData.endpoint_name
(: EnigmaAi.SemanticSimilarityQuery.EndpointData.endpoint_name (-> EnigmaAi.SemanticSimilarityQuery.EndpointData String))
(= (EnigmaAi.SemanticSimilarityQuery.EndpointData.endpoint_name
    (EnigmaAi.SemanticSimilarityQuery.MkEndpointData
     $endpoint_name)) $endpoint_name)

;;;;;;;;;;;;;;;;;;;;;;;
;; UploadFileRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.UploadFileRequest type
(: EnigmaAi.SemanticSimilarityQuery.UploadFileRequest Type)

;; Define EnigmaAi.SemanticSimilarityQuery.UploadFileRequest constuctor
(: EnigmaAi.SemanticSimilarityQuery.MkUploadFileRequest
   (->
    EnigmaAi.SemanticSimilarityQuery.MetaData ; metadata
    EnigmaAi.SemanticSimilarityQuery.EndpointData ; endpoint_data
    Bytes ; chunk_data
    EnigmaAi.SemanticSimilarityQuery.UploadFileRequest))

;; Define EnigmaAi.SemanticSimilarityQuery.UploadFileRequest access functions

;; Define EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.metadata
(: EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.metadata (-> EnigmaAi.SemanticSimilarityQuery.UploadFileRequest EnigmaAi.SemanticSimilarityQuery.MetaData))
(= (EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.metadata
    (EnigmaAi.SemanticSimilarityQuery.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $metadata)

;; Define EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.endpoint_data
(: EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.endpoint_data (-> EnigmaAi.SemanticSimilarityQuery.UploadFileRequest EnigmaAi.SemanticSimilarityQuery.EndpointData))
(= (EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.endpoint_data
    (EnigmaAi.SemanticSimilarityQuery.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $endpoint_data)

;; Define EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.chunk_data
(: EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.chunk_data (-> EnigmaAi.SemanticSimilarityQuery.UploadFileRequest Bytes))
(= (EnigmaAi.SemanticSimilarityQuery.UploadFileRequest.chunk_data
    (EnigmaAi.SemanticSimilarityQuery.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $chunk_data)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Enigma ;;
;;;;;;;;;;;;

;; Define EnigmaAi.SemanticSimilarityQuery.SayHello service method
(: EnigmaAi.SemanticSimilarityQuery.SayHello (-> EnigmaAi.SemanticSimilarityQuery.HelloRequest EnigmaAi.SemanticSimilarityQuery.StringResponse))

;; Define EnigmaAi.SemanticSimilarityQuery.TrainModel service method
(: EnigmaAi.SemanticSimilarityQuery.TrainModel (-> EnigmaAi.SemanticSimilarityQuery.UploadFileRequest EnigmaAi.SemanticSimilarityQuery.StringResponse))

;; Define EnigmaAi.SemanticSimilarityQuery.InvokeModel service method
(: EnigmaAi.SemanticSimilarityQuery.InvokeModel (-> EnigmaAi.SemanticSimilarityQuery.InvokeRequest EnigmaAi.SemanticSimilarityQuery.StringResponse))



;; ServiceID definition of EnigmaAi.similarityAI2"
(: EnigmaAi.similarityAI2 (ServiceID EnigmaAi))

;; Service metadata of EnigmaAi.similarityAI2
(= (service EnigmaAi.similarityAI2)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "SimilarityAI"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmUJN3pZH8pzNmnZgbbDdQ7HVrX5BC1HB1KjAvit4KSYVm"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "enigma-ai.com"
           ; url content
           null
           ; description
           "The main goal of this service is to allow users to query a specific sentence from a group of sentences and then return the group with the highest similarity using semantic similarity search, this semantic similarity search is tailored for the data of each user by training the model on his/her domain-specific data.\n\nYou can create and use this service in two steps, first Train the model on your data, here you supply a link to a CSV file (the link should contain .csv extension) that contains two columns \"question\" and \"id\", the question column contains the questions that you want to query from, and the id column contains the group to which this question belongs, you should also specify a name for the endpoint to which the model will be deployed (only characters and digits all in small letter format), you then wait about 60 mins until the model is deployed after the endpoint is deployed you can send a request using the endpoint name with the sentence that you want to get the most similar group to, this will retu"
           ; short_description
           "Semantic Similarity query")
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       (Cons "nlp" Nil)
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: enigma.proto
;; Protobuf syntax: proto3
;; Prefix: EnigmaAi.similarityAI2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; HelloRequest ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.HelloRequest type
(: EnigmaAi.similarityAI2.HelloRequest Type)

;; Define EnigmaAi.similarityAI2.HelloRequest constuctor
(: EnigmaAi.similarityAI2.MkHelloRequest
   (->
    EnigmaAi.similarityAI2.HelloRequest))

;; Define EnigmaAi.similarityAI2.HelloRequest access functions

;;;;;;;;;;;;;;;;;;;;
;; StringResponse ;;
;;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.StringResponse type
(: EnigmaAi.similarityAI2.StringResponse Type)

;; Define EnigmaAi.similarityAI2.StringResponse constuctor
(: EnigmaAi.similarityAI2.MkStringResponse
   (->
    String ; message
    EnigmaAi.similarityAI2.StringResponse))

;; Define EnigmaAi.similarityAI2.StringResponse access functions

;; Define EnigmaAi.similarityAI2.StringResponse.message
(: EnigmaAi.similarityAI2.StringResponse.message (-> EnigmaAi.similarityAI2.StringResponse String))
(= (EnigmaAi.similarityAI2.StringResponse.message
    (EnigmaAi.similarityAI2.MkStringResponse
     $message)) $message)

;;;;;;;;;;;;;;;;;;
;; FileResponse ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.FileResponse type
(: EnigmaAi.similarityAI2.FileResponse Type)

;; Define EnigmaAi.similarityAI2.FileResponse constuctor
(: EnigmaAi.similarityAI2.MkFileResponse
   (->
    Bytes ; chunk_data
    EnigmaAi.similarityAI2.FileResponse))

;; Define EnigmaAi.similarityAI2.FileResponse access functions

;; Define EnigmaAi.similarityAI2.FileResponse.chunk_data
(: EnigmaAi.similarityAI2.FileResponse.chunk_data (-> EnigmaAi.similarityAI2.FileResponse Bytes))
(= (EnigmaAi.similarityAI2.FileResponse.chunk_data
    (EnigmaAi.similarityAI2.MkFileResponse
     $chunk_data)) $chunk_data)

;;;;;;;;;;;;;;;;;;;
;; InvokeRequest ;;
;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.InvokeRequest type
(: EnigmaAi.similarityAI2.InvokeRequest Type)

;; Define EnigmaAi.similarityAI2.InvokeRequest constuctor
(: EnigmaAi.similarityAI2.MkInvokeRequest
   (->
    String ; endpoint_name
    String ; sentence
    EnigmaAi.similarityAI2.InvokeRequest))

;; Define EnigmaAi.similarityAI2.InvokeRequest access functions

;; Define EnigmaAi.similarityAI2.InvokeRequest.endpoint_name
(: EnigmaAi.similarityAI2.InvokeRequest.endpoint_name (-> EnigmaAi.similarityAI2.InvokeRequest String))
(= (EnigmaAi.similarityAI2.InvokeRequest.endpoint_name
    (EnigmaAi.similarityAI2.MkInvokeRequest
     $endpoint_name
     $sentence)) $endpoint_name)

;; Define EnigmaAi.similarityAI2.InvokeRequest.sentence
(: EnigmaAi.similarityAI2.InvokeRequest.sentence (-> EnigmaAi.similarityAI2.InvokeRequest String))
(= (EnigmaAi.similarityAI2.InvokeRequest.sentence
    (EnigmaAi.similarityAI2.MkInvokeRequest
     $endpoint_name
     $sentence)) $sentence)

;;;;;;;;;;;;;;
;; MetaData ;;
;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.MetaData type
(: EnigmaAi.similarityAI2.MetaData Type)

;; Define EnigmaAi.similarityAI2.MetaData constuctor
(: EnigmaAi.similarityAI2.MkMetaData
   (->
    String ; filename
    String ; extension
    EnigmaAi.similarityAI2.MetaData))

;; Define EnigmaAi.similarityAI2.MetaData access functions

;; Define EnigmaAi.similarityAI2.MetaData.filename
(: EnigmaAi.similarityAI2.MetaData.filename (-> EnigmaAi.similarityAI2.MetaData String))
(= (EnigmaAi.similarityAI2.MetaData.filename
    (EnigmaAi.similarityAI2.MkMetaData
     $filename
     $extension)) $filename)

;; Define EnigmaAi.similarityAI2.MetaData.extension
(: EnigmaAi.similarityAI2.MetaData.extension (-> EnigmaAi.similarityAI2.MetaData String))
(= (EnigmaAi.similarityAI2.MetaData.extension
    (EnigmaAi.similarityAI2.MkMetaData
     $filename
     $extension)) $extension)

;;;;;;;;;;;;;;;;;;
;; EndpointData ;;
;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.EndpointData type
(: EnigmaAi.similarityAI2.EndpointData Type)

;; Define EnigmaAi.similarityAI2.EndpointData constuctor
(: EnigmaAi.similarityAI2.MkEndpointData
   (->
    String ; endpoint_name
    EnigmaAi.similarityAI2.EndpointData))

;; Define EnigmaAi.similarityAI2.EndpointData access functions

;; Define EnigmaAi.similarityAI2.EndpointData.endpoint_name
(: EnigmaAi.similarityAI2.EndpointData.endpoint_name (-> EnigmaAi.similarityAI2.EndpointData String))
(= (EnigmaAi.similarityAI2.EndpointData.endpoint_name
    (EnigmaAi.similarityAI2.MkEndpointData
     $endpoint_name)) $endpoint_name)

;;;;;;;;;;;;;;;;;;;;;;;
;; UploadFileRequest ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.UploadFileRequest type
(: EnigmaAi.similarityAI2.UploadFileRequest Type)

;; Define EnigmaAi.similarityAI2.UploadFileRequest constuctor
(: EnigmaAi.similarityAI2.MkUploadFileRequest
   (->
    EnigmaAi.similarityAI2.MetaData ; metadata
    EnigmaAi.similarityAI2.EndpointData ; endpoint_data
    Bytes ; chunk_data
    EnigmaAi.similarityAI2.UploadFileRequest))

;; Define EnigmaAi.similarityAI2.UploadFileRequest access functions

;; Define EnigmaAi.similarityAI2.UploadFileRequest.metadata
(: EnigmaAi.similarityAI2.UploadFileRequest.metadata (-> EnigmaAi.similarityAI2.UploadFileRequest EnigmaAi.similarityAI2.MetaData))
(= (EnigmaAi.similarityAI2.UploadFileRequest.metadata
    (EnigmaAi.similarityAI2.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $metadata)

;; Define EnigmaAi.similarityAI2.UploadFileRequest.endpoint_data
(: EnigmaAi.similarityAI2.UploadFileRequest.endpoint_data (-> EnigmaAi.similarityAI2.UploadFileRequest EnigmaAi.similarityAI2.EndpointData))
(= (EnigmaAi.similarityAI2.UploadFileRequest.endpoint_data
    (EnigmaAi.similarityAI2.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $endpoint_data)

;; Define EnigmaAi.similarityAI2.UploadFileRequest.chunk_data
(: EnigmaAi.similarityAI2.UploadFileRequest.chunk_data (-> EnigmaAi.similarityAI2.UploadFileRequest Bytes))
(= (EnigmaAi.similarityAI2.UploadFileRequest.chunk_data
    (EnigmaAi.similarityAI2.MkUploadFileRequest
     $metadata
     $endpoint_data
     $chunk_data)) $chunk_data)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Enigma ;;
;;;;;;;;;;;;

;; Define EnigmaAi.similarityAI2.SayHello service method
(: EnigmaAi.similarityAI2.SayHello (-> EnigmaAi.similarityAI2.HelloRequest EnigmaAi.similarityAI2.StringResponse))

;; Define EnigmaAi.similarityAI2.TrainModel service method
(: EnigmaAi.similarityAI2.TrainModel (-> EnigmaAi.similarityAI2.UploadFileRequest EnigmaAi.similarityAI2.StringResponse))

;; Define EnigmaAi.similarityAI2.InvokeModel service method
(: EnigmaAi.similarityAI2.InvokeModel (-> EnigmaAi.similarityAI2.InvokeRequest EnigmaAi.similarityAI2.StringResponse))




;; OrganizationID definition of pillm-org
(: pillm-org OrganizationID)

;; Organization metadata of pillm-org
(= (organization pillm-org)
   ; Organization
   (MkOrganization
       ; org_name
       "pi llm"
       ; org_id
       "pillm-org"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           null
           ; url content
           null
           ; description
           null
           ; short_description
           null)
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of pillm-org


;; ServiceID definition of pillm-org.pillm-service"
(: pillm-org.pillm-service (ServiceID pillm-org))

;; Service metadata of pillm-org.pillm-service
(= (service pillm-org.pillm-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "PI LLM SERVICE"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmbrR2fCGCSfY76MhfxTqKxatZnMn4QkUYaeBVw8osM8LF"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://pythonllmcoding.io"
           ; url content
           null
           ; description
           "An LLM for coding python"
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: example_service.proto
;; Protobuf syntax: proto3
;; Protobuf package: example_service
;; Prefix: pillm-org.pillm-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

;; Define pillm-org.pillm-service.Numbers type
(: pillm-org.pillm-service.Numbers Type)

;; Define pillm-org.pillm-service.Numbers constuctor
(: pillm-org.pillm-service.MkNumbers
   (->
    Float ; a
    Float ; b
    pillm-org.pillm-service.Numbers))

;; Define pillm-org.pillm-service.Numbers access functions

;; Define pillm-org.pillm-service.Numbers.a
(: pillm-org.pillm-service.Numbers.a (-> pillm-org.pillm-service.Numbers Float))
(= (pillm-org.pillm-service.Numbers.a
    (pillm-org.pillm-service.MkNumbers
     $a
     $b)) $a)

;; Define pillm-org.pillm-service.Numbers.b
(: pillm-org.pillm-service.Numbers.b (-> pillm-org.pillm-service.Numbers Float))
(= (pillm-org.pillm-service.Numbers.b
    (pillm-org.pillm-service.MkNumbers
     $a
     $b)) $b)

;;;;;;;;;;;;
;; Result ;;
;;;;;;;;;;;;

;; Define pillm-org.pillm-service.Result type
(: pillm-org.pillm-service.Result Type)

;; Define pillm-org.pillm-service.Result constuctor
(: pillm-org.pillm-service.MkResult
   (->
    Float ; value
    pillm-org.pillm-service.Result))

;; Define pillm-org.pillm-service.Result access functions

;; Define pillm-org.pillm-service.Result.value
(: pillm-org.pillm-service.Result.value (-> pillm-org.pillm-service.Result Float))
(= (pillm-org.pillm-service.Result.value
    (pillm-org.pillm-service.MkResult
     $value)) $value)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Calculator ;;
;;;;;;;;;;;;;;;;

;; Define pillm-org.pillm-service.add service method
(: pillm-org.pillm-service.add (-> pillm-org.pillm-service.Numbers pillm-org.pillm-service.Result))

;; Define pillm-org.pillm-service.sub service method
(: pillm-org.pillm-service.sub (-> pillm-org.pillm-service.Numbers pillm-org.pillm-service.Result))

;; Define pillm-org.pillm-service.mul service method
(: pillm-org.pillm-service.mul (-> pillm-org.pillm-service.Numbers pillm-org.pillm-service.Result))

;; Define pillm-org.pillm-service.div service method
(: pillm-org.pillm-service.div (-> pillm-org.pillm-service.Numbers pillm-org.pillm-service.Result))




;; OrganizationID definition of a4fdeb5445fc4644bb092cf327c98d1e
(: a4fdeb5445fc4644bb092cf327c98d1e OrganizationID)

;; Organization metadata of a4fdeb5445fc4644bb092cf327c98d1e
(= (organization a4fdeb5445fc4644bb092cf327c98d1e)
   ; Organization
   (MkOrganization
       ; org_name
       "qwaezrx"
       ; org_id
       "a4fdeb5445fc4644bb092cf327c98d1e"
       ; org_type
       "individual"
       ; description
       (MkDescription
           ; url
           "https://qwaezrx.github.io/"
           ; url content
           null
           ; description
           "Image generation"
           ; short_description
           "AI developer")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of a4fdeb5445fc4644bb092cf327c98d1e



;; OrganizationID definition of trustlevel-org-id
(: trustlevel-org-id OrganizationID)

;; Organization metadata of trustlevel-org-id
(= (organization trustlevel-org-id)
   ; Organization
   (MkOrganization
       ; org_name
       "trustlevel-org"
       ; org_id
       "trustlevel-org-id"
       ; org_type
       "organization"
       ; description
       (MkDescription
           ; url
           "https://www.trustlevel.io/"
           ; url content
           null
           ; description
           "Verify online information"
           ; short_description
           "Verify online information")
       ; assets
       Nil
       ; contacts
       Nil
       ; groups
       Nil
   )
)

;; Services of trustlevel-org-id


;; ServiceID definition of trustlevel-org-id.trustlevel-cqs-service"
(: trustlevel-org-id.trustlevel-cqs-service (ServiceID trustlevel-org-id))

;; Service metadata of trustlevel-org-id.trustlevel-cqs-service
(= (service trustlevel-org-id.trustlevel-cqs-service)
   ; Service
   (MkService
       ; version
       1
       ; display_name
       "trustlevel-cqs-service"
       ; encoding
       "proto"
       ; service_type
       "grpc"
       ; model_ipfs_hash
       "QmZQ4APBbVFxBRZt4DKn3oXD1cjwxFbDC1eNgtadPLqQNB"
       ; mpe_address
       "0x5e592F9b1d303183d963635f895f0f0C48284f4e"
       ; groups
       Nil
       ; service_description
       (MkServiceDescription
           ; url
           "https://www.trustlevel.io/"
           ; url content
           null
           ; description
           "Content_Quality_Score"
           ; short_description
           null)
       ; contributors
       Nil
       ; media
       Nil
       ; tags
       Nil
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: trustlevel.proto
;; Protobuf syntax: proto3
;; Protobuf package: trustlevel
;; Prefix: trustlevel-org-id.trustlevel-cqs-service
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define trustlevel-org-id.trustlevel-cqs-service.Input type
(: trustlevel-org-id.trustlevel-cqs-service.Input Type)

;; Define trustlevel-org-id.trustlevel-cqs-service.Input constuctor
(: trustlevel-org-id.trustlevel-cqs-service.MkInput
   (->
    String ; input_string
    trustlevel-org-id.trustlevel-cqs-service.Input))

;; Define trustlevel-org-id.trustlevel-cqs-service.Input access functions

;; Define trustlevel-org-id.trustlevel-cqs-service.Input.input_string
(: trustlevel-org-id.trustlevel-cqs-service.Input.input_string (-> trustlevel-org-id.trustlevel-cqs-service.Input String))
(= (trustlevel-org-id.trustlevel-cqs-service.Input.input_string
    (trustlevel-org-id.trustlevel-cqs-service.MkInput
     $input_string)) $input_string)

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define trustlevel-org-id.trustlevel-cqs-service.Output type
(: trustlevel-org-id.trustlevel-cqs-service.Output Type)

;; Define trustlevel-org-id.trustlevel-cqs-service.Output constuctor
(: trustlevel-org-id.trustlevel-cqs-service.MkOutput
   (->
    Double ; trust_level
    trustlevel-org-id.trustlevel-cqs-service.Output))

;; Define trustlevel-org-id.trustlevel-cqs-service.Output access functions

;; Define trustlevel-org-id.trustlevel-cqs-service.Output.trust_level
(: trustlevel-org-id.trustlevel-cqs-service.Output.trust_level (-> trustlevel-org-id.trustlevel-cqs-service.Output Double))
(= (trustlevel-org-id.trustlevel-cqs-service.Output.trust_level
    (trustlevel-org-id.trustlevel-cqs-service.MkOutput
     $trust_level)) $trust_level)

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; ServiceDefinition ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define trustlevel-org-id.trustlevel-cqs-service.determineTrustLevel service method
(: trustlevel-org-id.trustlevel-cqs-service.determineTrustLevel (-> trustlevel-org-id.trustlevel-cqs-service.Input trustlevel-org-id.trustlevel-cqs-service.Output))


