#!/bin/bash

#############
# Constants #
#############

# Define output MeTTa filename
DATETIME=$(date --iso-8601=seconds)
METTA_FILENAME="snet_marketplace_${DATETIME}.metta"

#############
# Functions #
#############

# Output the type declarations of the various attributes involved in
# MeTTa format.
types_definitions_to_metta() {
    echo "(: OrganizationID Type)"
    echo "(: ServiceOf (-> OrganizationID Type))"
    echo "(: version (-> (ServiceOf \$a) Number))"
    echo "(: display_name (-> (ServiceOf \$a) String))"
    echo "(: service_type (-> (ServiceOf \$a) String))"
    echo "(: model_ipfs_hash (-> (ServiceOf \$x) String))"
    echo "(: mpe_address (-> (ServiceOf \$x) String))"
    echo "(: service_description.url (-> (ServiceOf \$x) String))"
    echo "(: service_description.description (-> (ServiceOf \$x) String))"
    echo "(: service_description.short_description (-> (ServiceOf \$x) String))"
}

# Takes the organization id as first argument and outputs knowledge
# about that organization in MeTTa format.
organization_to_metta() {
    local org="$1"
    echo "(: ${org} OrganizationID)"
    echo
    echo ";; Services of ${org}"
    for service in $(snet organization list-services ${org} | tail --lines=+3 | cut -f2 -d" "); do
        service_to_metta ${org} ${service}
    done
}

# Takes the organization id as first argument and service as second
# argument and outputs knowledge about that service in MeTTa format.
service_to_metta() {
    local org="$1"
    local service="$2"

    # Declare service
    echo
    echo ";; Service declaration of ${org}.${service}"
    echo "(: ${org}.${service} (ServiceOf ${org}))"

    # Output service attributes
    echo
    echo ";; Service attributes of ${org}.${service}"
    service_attributes_to_metta ${org} ${service}
}

# Takes the organization id as first argument and service as second
# argument and outputs knowledge about that service attributes in
# MeTTa format.
service_attributes_to_metta() {
    local org="$1"
    local service="$2"

    # Save json metadata of that service in temporary file
    local metadata_file=$(mktemp)
    snet service print-metadata ${org} ${service} > ${metadata_file}

    # Output attributes of service found in the json metadata file
    echo "(= (version ${org}.${service}) $(jq '.version' ${metadata_file}))"
    echo "(= (display_name ${org}.${service}) $(jq '.display_name' ${metadata_file}))"
    echo "(= (service_type ${org}.${service}) $(jq '.service_type' ${metadata_file}))"
    echo "(= (model_ipfs_hash ${org}.${service}) $(jq '.model_ipfs_hash' ${metadata_file}))"
    echo "(= (mpe_address ${org}.${service}) $(jq '.mpe_address' ${metadata_file}))"
    echo "(= (service_description.url ${org}.${service}) $(jq '.service_description.url' ${metadata_file}))"
    echo "(= (service_description.description ${org}.${service}) $(jq '.service_description.description' ${metadata_file}))"
    echo "(= (service_description.short_description ${org}.${service}) $(jq '.service_description.short_description' ${metadata_file}))"
}

########
# Main #
########

# Set the network to mainnet
snet network mainnet

# Write header
cat <<EOF > ${METTA_FILENAME}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; File generated by gen-snet-marketplace-space.sh                     ;;
;;                                                                     ;;
;; It contains:                                                        ;;
;;                                                                     ;;
;; 1. a description of all AI services on the marketplace;             ;;
;; 2. the relationship between AI services, such as their potential    ;;
;;    connectivity (whether the output of a given service can be used  ;;
;;    as input of another).                                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

EOF

# Write type definitions
cat <<EOF >> ${METTA_FILENAME}
;;;;;;;;;;;;;;;;;;;;;;
;; Type Definitions ;;
;;;;;;;;;;;;;;;;;;;;;;

EOF
types_definitions_to_metta >> ${METTA_FILENAME}

# Write organizations
cat <<EOF >> ${METTA_FILENAME}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SingularityNET Organizations ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EOF
for org in $(snet organization list | tail --lines=+2); do
    echo "Collect information about ${org}"
    echo >> ${METTA_FILENAME}
    echo ";; Organization: ${org}" >> ${METTA_FILENAME}
    organization_to_metta "${org}" >> ${METTA_FILENAME}
done
echo "Generated ${METTA_FILENAME}"

# Example of service metadata

# {
#   "version": 1,
#   "display_name": "AI Sight",
#   "encoding": "proto",
#   "service_type": "grpc",
#   "model_ipfs_hash": "QmWEuXDXBfRMedvzbzC52iYYuv4Bgp6w2PTbwcYyKWg1XU",
#   "mpe_address": "0x5e592F9b1d303183d963635f895f0f0C48284f4e",
#   "groups": [
#     {
#       "group_name": "default_group",
#       "pricing": [
#         {
#           "price_model": "fixed_price",
#           "price_in_cogs": 2000000,
#           "default": true
#         }
#       ],
#       "endpoints": [
#         "https://bh.singularitynet.io:7015"
#       ],
#       "group_id": "nZdFbyUlpWfOuTn0WpJCpKtQATrU6gxz6Wn9zAC2mno=",
#       "free_calls": 15,
#       "free_call_signer_address": "0x3Bb9b2499c283cec176e7C707Ecb495B7a961ebf",
#       "daemon_addresses": [
#         "0x92D9f8539D39244Fbe8dEAC771D95cF2A77087CF"
#       ]
#     }
#   ],
#   "service_description": {
#     "url": "https://singnet.github.io/dnn-model-services/users_guide/cntk-image-recon.html",
#     "description": "<div>Images of flowers and dogs can be classified using deep neural network models, generated using Microsoft's Cognitive Toolkit. The service receives an image, and then uses it as an input for a pretrained ResNet152 model.<br></br>There are two pre-trained models available, one trained with a flowers dataset from the Oxford Visual Geometry Group, that includes 102 different categories of flowers common to the UK. The second model was trained using the Columbia Dogs Dataset, which possesses 133 different dog breeds.<br></br>The service makes predictions using computer vision and machine learning techniques, and displays a top 5 prediction list (ordered by confidence) based on the specified dataset (flowers or dogs).</div>",
#     "short_description": "Use neural network models generated by Microsoft's Cognitive Toolkit to classify images of flowers and dogs. Simply upload an image and the service will identify and apply a label."
#   },
#   "contributors": [
#     {
#       "name": "Artur Gontigo",
#       "email_id": "artur@singularitynet.io"
#     }
#   ],
#   "media": [
#     {
#       "order": 1,
#       "url": "QmNkP3qpyisaYTJfRW45e7HGRZ3vrjyjsg7QiABbRiWoFu/hero_cntk_image_recon.jpg",
#       "file_type": "image",
#       "alt_text": "hero_image",
#       "asset_type": "hero_image"
#     },
#     {
#       "order": 2,
#       "url": "QmRWfXQcA9RKSmiHk6AGkgSrZ4kcfMCWzR26zEZqYAmV1G/gallery_item_1_-_img_recognition_example.png",
#       "file_type": "image",
#       "alt_text": "hover_on_the_image_text"
#     },
#     {
#       "order": 3,
#       "url": "QmSmDd9ByNDE693vcsua3BnhfvZaZLHbfWhGvjCEt67Yu9/gallery_item_2_-_golden-retriever.jpg",
#       "file_type": "image",
#       "alt_text": "hover_on_the_image_text"
#     },
#     {
#       "order": 4,
#       "url": "QmXWwqaoHsHuyMgKASfRCrBYQaCD4hfHodf6PTZoiruB6W/gallery_item_3_-_sunflower.jpg",
#       "file_type": "image",
#       "alt_text": "hover_on_the_image_text"
#     }
#   ],
#   "tags": [
#     "cntk",
#     "image",
#     "recognition"
#   ]
# }
